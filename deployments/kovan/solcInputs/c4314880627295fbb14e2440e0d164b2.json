{
  "language": "Solidity",
  "sources": {
    "contracts/ClearingHouse.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// contracts\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {IncreOwnable} from \"./utils/IncreOwnable.sol\";\n\n// interfaces\nimport {IClearingHouse} from \"./interfaces/IClearingHouse.sol\";\nimport {IPerpetual} from \"./interfaces/IPerpetual.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IVault} from \"./interfaces/IVault.sol\";\nimport {ICryptoSwap} from \"./interfaces/ICryptoSwap.sol\";\n\n// libraries\nimport {LibMath} from \"./lib/LibMath.sol\";\nimport {LibPerpetual} from \"./lib/LibPerpetual.sol\";\nimport {LibReserve} from \"./lib/LibReserve.sol\";\n\nimport \"hardhat/console.sol\";\n\n/// @notice Entry point for users to vault and perpetual markets\ncontract ClearingHouse is IClearingHouse, IncreOwnable, Pausable, ReentrancyGuard {\n    using LibMath for int256;\n    using LibMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // parameterization\n\n    /// @notice minimum maintenance margin\n    /// @dev 2.5%\n    int256 public constant MIN_MARGIN = 25e15;\n\n    /// @notice minimum margin when opening a position\n    /// @dev 2.5% (maintenance margin) + 5.5% = 8%\n    int256 public constant MIN_MARGIN_AT_CREATION = MIN_MARGIN + 55e15;\n\n    /// @notice minimum maintenance margin\n    /// @dev Paid on dollar value of an trader position. important: LIQUIDATION_REWARD >> MIN_MARGIN or liquidations will result in protocol losses\n    /// @dev (1.5%)\n    uint256 public constant LIQUIDATION_REWARD = 15e15;\n\n    /// @notice Insurance fee\n    /// @dev Paid on dollar value of an opened position\n    /// @dev (0.1%)\n    int256 public constant INSURANCE_FEE = 1e15;\n\n    /// @notice Insurance ratio\n    /// @dev Once the insurance reserve exceed 10% of the tvl, governance can withdraw the insurance fee\n    /// @dev (10%)\n    uint256 public constant INSURANCE_RATIO = 1e17;\n\n    // dependencies\n\n    /// @notice Vault contract\n    IVault public override vault;\n\n    /// @notice Allowlisted Perpetual contracts\n    IPerpetual[] public override perpetuals;\n\n    /* ****************** */\n    /*     Events         */\n    /* ****************** */\n\n    /// @notice Emitted when new perpetual market is added\n    /// @param perpetual The new perpetual market\n    /// @param numPerpetuals The number of perpetual markets\n    event MarketAdded(IPerpetual indexed perpetual, uint256 numPerpetuals);\n\n    /// @notice Emitted when collateral is deposited into the vault\n    /// @param idx Index of the perpetual market\n    /// @param user User who deposited collateral\n    /// @param asset Token to be used for the collateral\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\n    event Deposit(uint256 indexed idx, address indexed user, address indexed asset, uint256 amount);\n\n    /// @notice Emitted when collateral is withdrawn from the vault\n    /// @param idx Index of the perpetual market\n    /// @param user User who deposited collateral\n    /// @param asset Amount to be used as collateral. Might not be 18 decimals\n    /// @param amount Token to be used for the collateral\n    event Withdraw(uint256 indexed idx, address indexed user, address indexed asset, uint256 amount);\n\n    /// @notice Emitted when a position is extended/opened\n    /// @param idx Index of the perpetual market\n    /// @param user User who deposited collateral\n    /// @param direction Whether the position is LONG or SHORT\n    /// @param addedOpenNotional Notional (USD assets/debt) added to the position\n    /// @param addedPositionSize positionSize (Base assets/debt) added to the position\n    event ExtendPosition(\n        uint256 indexed idx,\n        address indexed user,\n        LibPerpetual.Side direction,\n        int256 addedOpenNotional,\n        int256 addedPositionSize\n    );\n    /// @notice Emitted when a position is reduced/closed\n    /// @param idx Index of the perpetual market\n    /// @param user User who deposited collateral\n    /// @param reducedOpenNotional notional (USD assets/debt) removed from the position\n    /// @param reducedPositionSize positionSize (Base assets/debt) removed from the position\n    event ReducePosition(\n        uint256 indexed idx,\n        address indexed user,\n        int256 reducedOpenNotional,\n        int256 reducedPositionSize\n    );\n    /// @notice Emitted when a trader position is liquidated\n    /// @param idx Index of the perpetual market\n    /// @param liquidatee User who gets liquidated\n    /// @param liquidator User who is liquidating\n    /// @param notional Notional amount of the liquidatee\n    event LiquidationCall(\n        uint256 indexed idx,\n        address indexed liquidatee,\n        address indexed liquidator,\n        uint256 notional\n    );\n    /// @notice Emitted when a (additional) liquidity is provided\n    /// @param idx Index of the perpetual market\n    /// @param liquidityProvider User who provides liquidity\n    /// @param asset  Token to be added to the pool\n    /// @param amount Amount of token to be added to the pool. Might not have 18 decimals\n    event LiquidityProvided(\n        uint256 indexed idx,\n        address indexed liquidityProvider,\n        address indexed asset,\n        uint256 amount\n    );\n    /// @notice Emitted when a (additional) liquidity is removed\n    /// @param idx Index of the perpetual market\n    /// @param liquidityProvider User who provides liquidity\n    /// @param removedLiquidity Amount of liquidity (in LP tokens) to be removed from the pool. 18 decimals\n    /// @param quoteTokens Amount of vQuote proceeds to be removed from the pool. 18 decimals\n    /// @param baseTokens Amount of vBase proceeds to be removed from the pool. 18 decimals\n    /// @param profit Profit generated by the liquidity provider. 18 decimals\n    event LiquidityRemoved(\n        uint256 indexed idx,\n        address indexed liquidityProvider,\n        uint256 removedLiquidity,\n        uint256 quoteTokens,\n        uint256 baseTokens,\n        int256 profit\n    );\n\n    /// @notice Emitted when dust is sold by governance\n    /// @param idx Index of the perpetual market\n    /// @param profit Amount of profit generated by the dust sale. 18 decimals\n    event DustSold(uint256 indexed idx, int256 profit);\n\n    /// @notice Emitted when (exceeding) insurance reserves are withdrawn by governance\n    /// @param amount Amount of insurance reserves withdrawn. 18 decimals\n    event InsuranceRemoved(uint256 amount);\n\n    constructor(IVault _vault) {\n        require(address(_vault) != address(0), \"Vault address cannot be 0\");\n        vault = _vault;\n    }\n\n    /* ****************** */\n    /*   Trader flow      */\n    /* ****************** */\n\n    /// @notice Single open position function, group collateral deposit and extend position\n    /// @param idx Index of the perpetual market\n    /// @param collateralAmount Amount to be used as the collateral of the position. Might not be 18 decimals\n    /// @param token Token to be used for the collateral of the position\n    /// @param positionAmount Amount to be sold, in vQuote (if long) or vBase (if short). Must be 18 decimals\n    /// @param direction Whether the position is LONG or SHORT\n    /// @param minAmount Minimum amount that the user is willing to accept. 18 decimals\n    function extendPositionWithCollateral(\n        uint256 idx,\n        uint256 collateralAmount,\n        IERC20 token,\n        uint256 positionAmount,\n        LibPerpetual.Side direction,\n        uint256 minAmount\n    ) external override whenNotPaused returns (int256, int256) {\n        _deposit(idx, collateralAmount, token);\n        return extendPosition(idx, positionAmount, direction, minAmount);\n    }\n\n    /// @notice Deposit tokens into the vault\n    /// @dev Should only be called by the trader\n    /// @param idx Index of the perpetual market\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\n    /// @param token Token to be used for the collateral\n    function deposit(\n        uint256 idx,\n        uint256 amount,\n        IERC20 token\n    ) external override nonReentrant whenNotPaused {\n        _deposit(idx, amount, token);\n    }\n\n    /// @notice Withdraw tokens from the vault\n    /// @dev Should only be called by the trader\n    /// @param idx Index of the perpetual market\n    /// @param amount Amount of collateral to withdraw. Must be 18 decimals\n    /// @param token Token of the collateral\n    function withdraw(\n        uint256 idx,\n        uint256 amount,\n        IERC20 token\n    ) external override nonReentrant whenNotPaused {\n        // unlike `amount` which is 18 decimal-based, `withdrawAmount` is based on the number of decimals of `token`\n        uint256 withdrawAmount = vault.withdraw(idx, msg.sender, amount, token, true);\n\n        require(marginIsValid(idx, msg.sender, MIN_MARGIN_AT_CREATION), \"Not enough margin\");\n\n        emit Withdraw(idx, msg.sender, address(token), withdrawAmount);\n    }\n\n    /// @notice Open or increase a position, either long or short\n    /// @param idx Index of the perpetual market\n    /// @param amount Represent amount in vQuote (if long) or vBase (if short) to sell. 18 decimals\n    /// @param direction Whether the position is LONG or SHORT\n    /// @param minAmount Minimum amount that the user is willing to accept. 18 decimals\n    /// @dev No number for the leverage is given but the amount in the vault must be bigger than MIN_MARGIN_AT_CREATION\n    /// @dev No checks are done if bought amount exceeds allowance\n    /// @return addedOpenNotional Additional quote asset / liabilities accrued\n    /// @return addedPositionSize Additional base asset / liabilities accrued\n    function extendPosition(\n        uint256 idx,\n        uint256 amount,\n        LibPerpetual.Side direction,\n        uint256 minAmount\n    ) public override nonReentrant whenNotPaused returns (int256 addedOpenNotional, int256 addedPositionSize) {\n        (addedOpenNotional, addedPositionSize) = _extendPosition(idx, amount, direction, minAmount);\n    }\n\n    function _extendPosition(\n        uint256 idx,\n        uint256 amount,\n        LibPerpetual.Side direction,\n        uint256 minAmount\n    ) internal returns (int256 addedOpenNotional, int256 addedPositionSize) {\n        /*\n            if direction = Long\n\n                trader goes long EUR\n                trader accrues openNotional debt\n                trader receives positionSize assets\n\n                openNotional = vQuote traded   to market   ( < 0)\n                positionSize = vBase  received from market ( > 0)\n\n            else direction = Short\n\n                trader goes short EUR\n                trader receives openNotional assets\n                trader accrues positionSize debt\n\n                openNotional = vQuote received from market ( > 0)\n                positionSize = vBase  traded   to market   ( < 0)\n\n        */\n        require(amount > 0, \"The amount can't be null\");\n\n        int256 fundingPayments = 0;\n        (addedOpenNotional, addedPositionSize, fundingPayments) = perpetuals[idx].extendPosition(\n            msg.sender,\n            amount,\n            direction,\n            minAmount\n        );\n\n        // pay insurance fee\n        int256 insuranceFee = addedOpenNotional.abs().wadMul(INSURANCE_FEE);\n        vault.settleProfit(0, address(this), insuranceFee, true); // always deposit insurance fees into the 0 vault\n\n        int256 traderVaultDiff = fundingPayments - insuranceFee;\n        vault.settleProfit(idx, msg.sender, traderVaultDiff, true);\n\n        require(marginIsValid(idx, msg.sender, MIN_MARGIN_AT_CREATION), \"Not enough margin\");\n\n        emit ExtendPosition(idx, msg.sender, direction, addedOpenNotional, addedPositionSize);\n\n        return (addedOpenNotional, addedPositionSize);\n    }\n\n    /// @notice Single close position function, groups close position and withdraw collateral\n    /// @notice Important: `proposedAmount` must be large enough to close the entire position else the function call will fail\n    /// @param idx Index of the perpetual market\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\n    /// @param minAmount Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\n    /// @param token Token used for the collateral\n    function closePositionWithdrawCollateral(\n        uint256 idx,\n        uint256 proposedAmount,\n        uint256 minAmount,\n        IERC20 token\n    ) external override nonReentrant whenNotPaused {\n        _reducePosition(idx, proposedAmount, minAmount);\n\n        LibPerpetual.UserPosition memory trader = _getTraderPosition(idx, msg.sender);\n        require(trader.openNotional == 0 && trader.positionSize == 0, \"Has open position\");\n\n        uint256 withdrawAmount = vault.withdrawAll(idx, msg.sender, token, true);\n\n        emit Withdraw(idx, msg.sender, address(token), withdrawAmount);\n    }\n\n    /// @notice Reduces, or closes in full, a position from an account holder\n    /// @param idx Index of the perpetual market\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\n    /// @param minAmount Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\n    function reducePosition(\n        uint256 idx,\n        uint256 proposedAmount,\n        uint256 minAmount\n    ) external override nonReentrant whenNotPaused {\n        _reducePosition(idx, proposedAmount, minAmount);\n    }\n\n    /* ****************** */\n    /*  Liquidation flow  */\n    /* ****************** */\n\n    /// @notice Submit the address of a trader whose position is worth liquidating for a reward\n    /// @param idx Index of the perpetual market\n    /// @param liquidatee Address of the trader to liquidate\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\n    function liquidate(\n        uint256 idx,\n        address liquidatee,\n        uint256 proposedAmount\n    ) external override nonReentrant whenNotPaused {\n        address liquidator = msg.sender;\n\n        // update funding rate, so that the marginRatio is correct\n        perpetuals[idx].updateTwapAndFundingRate();\n\n        uint256 positiveOpenNotional = uint256(_getTraderPosition(idx, liquidatee).openNotional.abs());\n\n        require(positiveOpenNotional != 0, \"No position currently opened\");\n        require(!marginIsValid(idx, liquidatee, MIN_MARGIN), \"Margin is valid\");\n\n        (, , int256 profit) = perpetuals[idx].reducePosition(liquidatee, proposedAmount, 0);\n\n        // traders are allowed to reduce their positions partially, but liquidators have to close positions in full\n        LibPerpetual.UserPosition memory trader = _getTraderPosition(idx, liquidatee);\n        require(\n            trader.openNotional == 0 && trader.positionSize == 0,\n            \"Proposed amount insufficient to liquidate the position in its entirety\"\n        );\n\n        // adjust liquidator vault amount\n        uint256 liquidationRewardAmount = positiveOpenNotional.wadMul(LIQUIDATION_REWARD);\n\n        // subtract reward from liquidatee\n        int256 reducedProfit = profit - liquidationRewardAmount.toInt256();\n        vault.settleProfit(idx, liquidatee, reducedProfit, true);\n\n        // add reward to liquidator\n        vault.settleProfit(idx, liquidator, liquidationRewardAmount.toInt256(), true);\n\n        emit LiquidationCall(idx, liquidatee, liquidator, positiveOpenNotional);\n    }\n\n    /* ****************** */\n    /*   Liquidity flow   */\n    /* ****************** */\n\n    /// @notice Provide liquidity to the pool\n    /// @param idx Index of the perpetual market\n    /// @param amount Amount of token to be added to the pool. Might not have 18 decimals\n    /// @param minLpAmount Minimum amount of Lp tokens minted. 18 decimals\n    /// @param token Token to be added to the pool\n    /// @return wadAmount Amount of quoteTokens added to the pool. 18 decimals\n    /// @return baseAmount Amount of baseTokens added to the pool. 18 decimals\n    function provideLiquidity(\n        uint256 idx,\n        uint256 amount,\n        uint256 minLpAmount,\n        IERC20 token\n    ) external override nonReentrant whenNotPaused returns (uint256 wadAmount, uint256 baseAmount) {\n        require(amount != 0, \"Zero amount\");\n\n        // split liquidity between long and short\n\n        wadAmount = vault.deposit(idx, msg.sender, amount, token, false);\n\n        int256 fundingPayments = 0;\n        (baseAmount, fundingPayments) = perpetuals[idx].provideLiquidity(msg.sender, wadAmount, minLpAmount);\n\n        if (fundingPayments != 0) {\n            vault.settleProfit(idx, msg.sender, fundingPayments, false);\n        }\n\n        emit LiquidityProvided(idx, msg.sender, address(token), amount);\n\n        return (wadAmount, baseAmount);\n    }\n\n    /// @notice Remove liquidity from the pool\n    /// @param idx Index of the perpetual market\n    /// @param liquidityAmountToRemove Amount of liquidity (in LP tokens) to be removed from the pool. 18 decimals\n    /// @param minVTokenAmounts Minimum amount of virtual tokens [vQuote, vBase] withdrawn from the curve pool. 18 decimals\n    function removeLiquidity(\n        uint256 idx,\n        uint256 liquidityAmountToRemove,\n        uint256[2] calldata minVTokenAmounts\n    ) external override nonReentrant whenNotPaused {\n        (uint256 quoteTokens, uint256 baseTokens, int256 fundingPayments) = perpetuals[idx].removeLiquidity(\n            msg.sender,\n            liquidityAmountToRemove,\n            minVTokenAmounts\n        );\n\n        vault.settleProfit(idx, msg.sender, fundingPayments, false);\n\n        emit LiquidityRemoved(idx, msg.sender, liquidityAmountToRemove, quoteTokens, baseTokens, fundingPayments);\n    }\n\n    /// @notice Settle liquidity of a liquidity provider\n    /// @param idx Index of the perpetual market\n    /// @param proposedAmount Amount at which to get the LP position (in vBase if LONG, in vQuote if SHORT). 18 decimals\n    /// @param minAmount Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\n    function settleLiquidityProvider(\n        uint256 idx,\n        uint256 proposedAmount,\n        uint256 minAmount,\n        IERC20 token\n    ) external override nonReentrant whenNotPaused {\n        require(proposedAmount > 0, \"The proposed amount can't be null\");\n\n        (int256 reducedOpenNotional, int256 reducedPositionSize, int256 profit) = perpetuals[idx]\n            .settleLiquidityProvider(msg.sender, proposedAmount, minAmount);\n\n        // apply changes to collateral\n        vault.settleProfit(idx, msg.sender, profit, true);\n\n        LibPerpetual.UserPosition memory lp = _getLpPosition(idx, msg.sender);\n        if (lp.openNotional == 0 && lp.positionSize == 0 && lp.liquidityBalance == 0) {\n            // remove the part of the reserve\n            require(vault.withdrawAll(idx, msg.sender, token, false) > 0, \"Insufficient funds\");\n        }\n\n        emit ReducePosition(idx, msg.sender, reducedOpenNotional, reducedPositionSize);\n    }\n\n    /* ****************** */\n    /*     Governance     */\n    /* ****************** */\n\n    /// @notice Add one perpetual market to the list of markets\n    /// @param perp Market to add to the list of supported market\n    function allowListPerpetual(IPerpetual perp) external override onlyOwner {\n        perpetuals.push(perp);\n        emit MarketAdded(perp, perpetuals.length);\n    }\n\n    /// @notice Pause the contract\n    function pause() external override onlyOwner {\n        _pause();\n    }\n\n    /// @notice Unpause the contract\n    function unpause() external override onlyOwner {\n        _unpause();\n    }\n\n    /// @notice Sell dust in market idx\n    /// @param idx Index of the perpetual market\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\n    /// @param minAmount Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\n    /// @param token Token of the collateral\n    function sellDust(\n        uint256 idx,\n        uint256 proposedAmount,\n        uint256 minAmount,\n        IERC20 token\n    ) external override onlyOwner {\n        (, , int256 profit) = perpetuals[idx].reducePosition(address(this), proposedAmount, minAmount);\n\n        // apply changes to collateral\n        vault.settleProfit(1, address(this), profit, true);\n\n        // withdraw\n        require(vault.withdrawAll(1, address(this), token, true) > 0);\n        IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\n\n        emit DustSold(idx, profit);\n    }\n\n    /// @notice Remove insurance fees exceeding 10% of the TVL from the vault\n    /// @param amount Token withdrawn. 18 decimals\n    /// @param token Token to be withdrawn from the vault\n    function removeInsurance(uint256 amount, IERC20 token) external override onlyOwner {\n        uint256 tvl = vault.getTotalReserveToken();\n\n        require(vault.withdraw(0, address(this), amount, token, true) > 0, \"Unsuccessful withdrawal\");\n        IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\n\n        uint256 lockedInsurance = vault.getTraderBalance(0, address(this)).toUint256();\n\n        require(lockedInsurance >= tvl.wadMul(INSURANCE_RATIO), \"Insurance is not enough\");\n\n        emit InsuranceRemoved(amount);\n    }\n\n    /* ****************** */\n    /*   Market viewer    */\n    /* ****************** */\n\n    /// @notice Return the number of active markets\n    /// @return Number of active markets\n    function getNumMarkets() external view override returns (uint256) {\n        return perpetuals.length;\n    }\n\n    /* ****************** */\n    /*   User viewer      */\n    /* ****************** */\n\n    /// @notice Determines whether or not a position is valid for a given margin ratio\n    /// @param idx Index of the perpetual market\n    /// @param account Account of the position to get the margin ratio from\n    /// @param ratio Proposed ratio to compare the position against\n    /// @return True if the position exceeds margin ratio, false otherwise\n    function marginIsValid(\n        uint256 idx,\n        address account,\n        int256 ratio\n    ) public view override returns (bool) {\n        return marginRatio(idx, account) >= ratio;\n    }\n\n    /// @notice Get the margin ratio of a trading position (given that, for now, 1 trading position = 1 address)\n    /// @param idx Index of the perpetual market\n    /// @param account Account of the position to get the margin ratio from\n    /// @return Margin ratio of the position (in 1e18)\n    function marginRatio(uint256 idx, address account) public view override returns (int256) {\n        // margin ratio = (collateral + unrealizedPositionPnl + fundingPayments) / trader.openNotional\n        // all amounts must be expressed in vQuote (e.g. USD), otherwise the end result doesn't make sense\n        int256 openNotional = _getTraderPosition(idx, account).openNotional;\n\n        // when no position open, margin ratio is 100%\n        if (openNotional == 0) {\n            return 1e18;\n        }\n\n        int256 collateral = _getTraderReserveValue(idx, account);\n        int256 fundingPayments = _getFundingPayments(idx, account);\n        int256 unrealizedPositionPnl = _getUnrealizedPnL(idx, account);\n\n        return _marginRatio(collateral, unrealizedPositionPnl, fundingPayments, openNotional);\n    }\n\n    /* ****************** */\n    /*   internal user    */\n    /* ****************** */\n\n    /// @dev sub-function of deposit()\n    function _deposit(\n        uint256 idx,\n        uint256 amount,\n        IERC20 token\n    ) internal {\n        require(vault.deposit(idx, msg.sender, amount, token, true) > 0);\n        emit Deposit(idx, msg.sender, address(token), amount);\n    }\n\n    /// @dev sub-function of reducePosition()\n    function _reducePosition(\n        uint256 idx,\n        uint256 proposedAmount,\n        uint256 minAmount\n    ) internal {\n        require(proposedAmount > 0, \"The proposed amount can't be null\");\n\n        (int256 reducedOpenNotional, int256 reducedPositionSize, int256 profit) = perpetuals[idx].reducePosition(\n            msg.sender,\n            proposedAmount,\n            minAmount\n        );\n\n        // apply changes to collateral\n        vault.settleProfit(idx, msg.sender, profit, true);\n\n        emit ReducePosition(idx, msg.sender, reducedOpenNotional, reducedPositionSize);\n    }\n\n    /* ****************** */\n    /*   internal getter  */\n    /* ****************** */\n\n    function _getFundingPayments(uint256 idx, address account) internal view returns (int256 upcomingFundingPayment) {\n        return perpetuals[idx].getFundingPayments(account);\n    }\n\n    function _getUnrealizedPnL(uint256 idx, address account) internal view returns (int256) {\n        return perpetuals[idx].getUnrealizedPnL(account);\n    }\n\n    function _getTraderReserveValue(uint256 idx, address account) internal view returns (int256) {\n        return vault.getTraderReserveValue(idx, account);\n    }\n\n    function _getTraderPosition(uint256 idx, address account) internal view returns (LibPerpetual.UserPosition memory) {\n        return perpetuals[idx].getTraderPosition(account);\n    }\n\n    function _getLpPosition(uint256 idx, address account) internal view returns (LibPerpetual.UserPosition memory) {\n        return perpetuals[idx].getLpPosition(account);\n    }\n\n    function _marginRatio(\n        int256 collateral,\n        int256 fundingPayments,\n        int256 unrealizedPositionPnl,\n        int256 openNotional\n    ) internal pure returns (int256) {\n        return (collateral + unrealizedPositionPnl + fundingPayments).wadDiv(openNotional.abs());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/utils/IncreOwnable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n/// @notice Increment access control contract.\n/// @author Adapted from https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringOwnable.sol, License-Identifier: MIT.\n/// @author Adapted from https://github.com/sushiswap/trident/blob/master/contracts/utils/TridentOwnable.sol, License-Identifier: GPL-3.0-or-later\ncontract IncreOwnable {\n    address public owner;\n    address public pendingOwner;\n\n    event TransferOwner(address indexed sender, address indexed recipient);\n    event TransferOwnerClaim(address indexed sender, address indexed recipient);\n\n    /// @notice Initialize and grant deployer account (`msg.sender`) `owner` access role.\n    constructor() {\n        owner = msg.sender;\n        emit TransferOwner(address(0), msg.sender);\n    }\n\n    /// @notice Access control modifier that requires modified function to be called by `owner` account.\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"NOT_OWNER\");\n        _;\n    }\n\n    /// @notice `pendingOwner` can claim `owner` account.\n    function claimOwner() external {\n        require(msg.sender == pendingOwner, \"NOT_PENDING_OWNER\");\n        emit TransferOwner(owner, msg.sender);\n        owner = msg.sender;\n        pendingOwner = address(0);\n    }\n\n    /// @notice Transfer `owner` account.\n    /// @param recipient Account granted `owner` access control.\n    /// @param direct If 'true', ownership is directly transferred.\n    function transferOwner(address recipient, bool direct) external onlyOwner {\n        require(recipient != address(0), \"ZERO_ADDRESS\");\n        if (direct) {\n            owner = recipient;\n            emit TransferOwner(msg.sender, recipient);\n        } else {\n            pendingOwner = recipient;\n            emit TransferOwnerClaim(msg.sender, recipient);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IClearingHouse.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// interfaces\nimport {IClearingHouse} from \"./IClearingHouse.sol\";\nimport {IPerpetual} from \"./IPerpetual.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IVault} from \"./IVault.sol\";\nimport {ICryptoSwap} from \"./ICryptoSwap.sol\";\n\n// libraries\nimport {LibPerpetual} from \"../lib/LibPerpetual.sol\";\n\ninterface IClearingHouse {\n    /* ****************** */\n    /*     Viewer         */\n    /* ****************** */\n\n    function vault() external view returns (IVault);\n\n    function perpetuals(uint256 idx) external view returns (IPerpetual);\n\n    function getNumMarkets() external view returns (uint256);\n\n    function marginIsValid(\n        uint256 idx,\n        address account,\n        int256 ratio\n    ) external view returns (bool);\n\n    function marginRatio(uint256 idx, address account) external view returns (int256);\n\n    /* ****************** */\n    /*  State modifying   */\n    /* ****************** */\n\n    function allowListPerpetual(IPerpetual perp) external;\n\n    function pause() external;\n\n    function unpause() external;\n\n    function sellDust(\n        uint256 idx,\n        uint256 proposedAmount,\n        uint256 minAmount,\n        IERC20 token\n    ) external;\n\n    function removeInsurance(uint256 amount, IERC20 token) external;\n\n    function deposit(\n        uint256 idx,\n        uint256 amount,\n        IERC20 token\n    ) external;\n\n    function withdraw(\n        uint256 idx,\n        uint256 amount,\n        IERC20 token\n    ) external;\n\n    function extendPositionWithCollateral(\n        uint256 idx,\n        uint256 collateralAmount,\n        IERC20 token,\n        uint256 positionAmount,\n        LibPerpetual.Side direction,\n        uint256 minAmount\n    ) external returns (int256, int256);\n\n    function extendPosition(\n        uint256 idx,\n        uint256 amount,\n        LibPerpetual.Side direction,\n        uint256 minAmount\n    ) external returns (int256, int256);\n\n    function closePositionWithdrawCollateral(\n        uint256 idx,\n        uint256 proposedAmount,\n        uint256 minAmount,\n        IERC20 token\n    ) external;\n\n    function reducePosition(\n        uint256 idx,\n        uint256 proposedAmount,\n        uint256 minAmount\n    ) external;\n\n    function liquidate(\n        uint256 idx,\n        address liquidatee,\n        uint256 proposedAmount\n    ) external;\n\n    function provideLiquidity(\n        uint256 idx,\n        uint256 amount,\n        uint256 minLpAmount,\n        IERC20 token\n    ) external returns (uint256, uint256);\n\n    function removeLiquidity(\n        uint256 idx,\n        uint256 liquidityAmountToRemove,\n        uint256[2] calldata minVTokenAmounts\n    ) external;\n\n    function settleLiquidityProvider(\n        uint256 idx,\n        uint256 proposedAmount,\n        uint256 minAmount,\n        IERC20 token\n    ) external;\n}\n"
    },
    "contracts/interfaces/IPerpetual.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// interfaces\nimport {ICryptoSwap} from \"./ICryptoSwap.sol\";\nimport {IVault} from \"./IVault.sol\";\nimport {ICryptoSwap} from \"./ICryptoSwap.sol\";\nimport {IVBase} from \"./IVBase.sol\";\nimport {IVQuote} from \"./IVQuote.sol\";\nimport {IInsurance} from \"./IInsurance.sol\";\nimport {IClearingHouse} from \"./IClearingHouse.sol\";\n\n// libraries\nimport {LibPerpetual} from \"../lib/LibPerpetual.sol\";\n\ninterface IPerpetual {\n    /* ****************** */\n    /*     Viewer         */\n    /* ****************** */\n\n    function market() external view returns (ICryptoSwap);\n\n    function vBase() external view returns (IVBase);\n\n    function vQuote() external view returns (IVQuote);\n\n    function clearingHouse() external view returns (IClearingHouse);\n\n    function getTraderPosition(address account) external view returns (LibPerpetual.UserPosition memory);\n\n    function getLpPosition(address account) external view returns (LibPerpetual.UserPosition memory);\n\n    function getGlobalPosition() external view returns (LibPerpetual.GlobalPosition memory);\n\n    function getUnrealizedPnL(address account) external view returns (int256);\n\n    function getFundingPayments(address account) external view returns (int256);\n\n    function marketPrice() external view returns (uint256);\n\n    function indexPrice() external view returns (int256);\n\n    function getTotalLiquidityProvided() external view returns (uint256);\n\n    function getOracleTwap() external view returns (int256);\n\n    function getMarketTwap() external view returns (int256);\n\n    /* ****************** */\n    /*  State modifying   */\n    /* ****************** */\n\n    function extendPosition(\n        address account,\n        uint256 amount,\n        LibPerpetual.Side direction,\n        uint256 minAmount\n    )\n        external\n        returns (\n            int256 addedOpenNotional,\n            int256 addedPositionSize,\n            int256 fundingPayments\n        );\n\n    function reducePosition(\n        address account,\n        uint256 amount,\n        uint256 minAmount\n    )\n        external\n        returns (\n            int256 vQuoteProceeds,\n            int256 vBaseAmount,\n            int256 profit\n        );\n\n    function provideLiquidity(\n        address account,\n        uint256 wadAmount,\n        uint256 minLpAmount\n    ) external returns (uint256, int256);\n\n    function removeLiquidity(\n        address account,\n        uint256 liquidityAmountToRemove,\n        uint256[2] calldata minVTokenAmounts\n    )\n        external\n        returns (\n            uint256 quoteAmount,\n            uint256 baseAmount,\n            int256 fundingPayments\n        );\n\n    function settleLiquidityProvider(\n        address account,\n        uint256 proposedAmount,\n        uint256 minAmount\n    )\n        external\n        returns (\n            int256 vQuoteProceeds,\n            int256 vBaseAmount,\n            int256 profit\n        );\n\n    function updateTwapAndFundingRate() external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// interfaces\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IInsurance} from \"./IInsurance.sol\";\nimport {IClearingHouse} from \"./IClearingHouse.sol\";\n\n// @dev: deposit uint and withdraw int\n// @author: The interface used in other contracts\ninterface IVault {\n    /* ****************** */\n    /*     Events         */\n    /* ****************** */\n\n    /// @notice Emitted when bad debt is settled for by the insurance reserve\n    /// @param idx Index of the perpetual market\n    /// @param beneficiary Beneficiary of the insurance payment\n    /// @param amount Amount of bad insurance requested\n    event BadDebtGenerated(uint256 idx, address beneficiary, uint256 amount);\n\n    /// @notice Emitted when a new ClearingHouse is connected to the vault\n    /// @param newClearingHouse New ClearingHouse contract address\n    event ClearingHouseChanged(IClearingHouse newClearingHouse);\n\n    /// @notice Emitted when a new Insurance is connected to the vault\n    /// @param newInsurance New Insurance contract address\n    event InsuranceChanged(IInsurance newInsurance);\n\n    /// @notice Emitted when the maximum Total Value locked (TVL) is changed\n    /// @param newMaxTVL New maximum TVL level\n    event MaxTVLChanged(uint256 newMaxTVL);\n\n    /// @notice Emitted when the Total Value Locked changed\n    /// @param totalValueLocked New amount of tokens locked\n    event ValueLockedChanged(uint256 totalValueLocked);\n\n    /* ****************** */\n    /*     Viewer         */\n    /* ****************** */\n    function reserveToken() external view returns (IERC20);\n\n    function insurance() external view returns (IInsurance);\n\n    function clearingHouse() external view returns (IClearingHouse);\n\n    function getReserveTokenDecimals() external view returns (uint256);\n\n    function getTotalReserveToken() external view returns (uint256);\n\n    function getBadDebt() external view returns (uint256);\n\n    function getMaxTVL() external view returns (uint256);\n\n    function getLpReserveValue(uint256 idx, address account) external view returns (int256);\n\n    function getTraderReserveValue(uint256 idx, address account) external view returns (int256);\n\n    function getTraderBalance(uint256 idx, address account) external view returns (int256);\n\n    function getLpBalance(uint256 idx, address account) external view returns (int256);\n\n    /* ****************** */\n    /*  State modifying   */\n    /* ****************** */\n\n    function deposit(\n        uint256 idx,\n        address user,\n        uint256 amount,\n        IERC20 token,\n        bool isTrader\n    ) external returns (uint256);\n\n    function settleProfit(\n        uint256 idx,\n        address user,\n        int256 amount,\n        bool isTrader\n    ) external;\n\n    function withdraw(\n        uint256 idx,\n        address user,\n        uint256 amount,\n        IERC20 token,\n        bool isTrader\n    ) external returns (uint256);\n\n    function withdrawPartial(\n        uint256 idx,\n        address user,\n        IERC20 withdrawToken,\n        uint256 reductionRatio,\n        bool isTrader\n    ) external returns (uint256);\n\n    function withdrawAll(\n        uint256 idx,\n        address user,\n        IERC20 withdrawToken,\n        bool isTrader\n    ) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/ICryptoSwap.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n/// @dev Contract https://github.com/curvefi/curve-crypto-contract/blob/master/deployment-logs/2021-11-01.%20EURS%20on%20mainnet/CryptoSwap.vy\ninterface ICryptoSwap {\n    function get_virtual_price() external view returns (uint256);\n\n    function price_oracle() external view returns (uint256);\n\n    function balances(uint256 i) external view returns (uint256);\n\n    // Swap token i to j with amount dx and min amount min_dy\n    function exchange(\n        uint256 i,\n        uint256 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external returns (uint256);\n\n    function get_dy(\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external returns (uint256); // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\n\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external; // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\n\n    function last_prices() external view returns (uint256);\n\n    function token() external view returns (address);\n}\n"
    },
    "contracts/lib/LibMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// libraries\nimport {PRBMathUD60x18} from \"prb-math/contracts/PRBMathUD60x18.sol\";\nimport {PRBMathSD59x18} from \"prb-math/contracts/PRBMathSD59x18.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/*\n * To be used if `b` decimals make `b` larger than what it would be otherwise.\n * Especially useful for fixed point numbers, i.e. a way to represent decimal\n * values without using decimals. E.g. 25e2 with 3 decimals represents 2.5%\n *\n * In our case, we get exchange rates with a 18 decimal precision\n * (Solidity doesn't support decimal values natively).\n * So if we have a EUR positions and want to get the equivalent USD amount\n * we have to do: EUR_position * EUR_USD / 1e18 else the value would be way too high.\n * To move from USD to EUR: (USD_position * 1e18) / EUR_USD else the value would\n * be way too low.\n *\n * In essence,\n * wadMul: a.mul(b).div(WAY)\n * wadDiv: a.mul(WAY).div(b)\n * where `WAY` represents the number of decimals\n */\nlibrary LibMath {\n    // safe casting\n    function toInt256(uint256 x) internal pure returns (int256) {\n        return SafeCast.toInt256(x);\n    }\n\n    function toUint256(int256 x) internal pure returns (uint256) {\n        return SafeCast.toUint256(x);\n    }\n\n    // absolute value\n    function abs(int256 x) internal pure returns (int256) {\n        return PRBMathSD59x18.abs(x);\n    }\n\n    // int256: wad division / multiplication\n    function wadDiv(int256 x, int256 y) internal pure returns (int256) {\n        return PRBMathSD59x18.div(x, y);\n    }\n\n    function wadMul(int256 x, int256 y) internal pure returns (int256) {\n        return PRBMathSD59x18.mul(x, y);\n    }\n\n    // uint256: wad division / multiplication\n    function wadMul(uint256 x, uint256 y) internal pure returns (uint256) {\n        return PRBMathUD60x18.mul(x, y);\n    }\n\n    function wadDiv(uint256 x, uint256 y) internal pure returns (uint256) {\n        return PRBMathUD60x18.div(x, y);\n    }\n}\n"
    },
    "contracts/lib/LibPerpetual.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// libraries\nimport {LibMath} from \"./LibMath.sol\";\n\nlibrary LibPerpetual {\n    using LibMath for int256;\n    using LibMath for uint256;\n\n    enum Side {\n        // long position\n        Long,\n        // short position\n        Short\n    }\n\n    struct UserPosition {\n        // quote assets or liabilities\n        int256 openNotional;\n        // base assets or liabilities\n        int256 positionSize;\n        // user cumulative funding rate (updated when open/close position)\n        int256 cumFundingRate;\n        // lp token owned (is zero for traders)\n        uint256 liquidityBalance;\n    }\n\n    struct GlobalPosition {\n        // timestamp of last trade\n        uint128 timeOfLastTrade;\n        // timestamp of last TWAP update\n        uint128 timeOfLastTwapUpdate;\n        // global cumulative funding rate (updated every trade)\n        int256 cumFundingRate;\n        // market price at the start of the block\n        int256 blockStartPrice;\n    }\n}\n"
    },
    "contracts/lib/LibReserve.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// libraries\nimport {LibMath} from \"./LibMath.sol\";\n\nlibrary LibReserve {\n    using LibMath for int256;\n    using LibMath for uint256;\n\n    uint256 internal constant MAX_DECIMALS = 18;\n\n    /// @notice Convert amount from 'tokenDecimals' to 18 decimals precision\n    /// @param tokenDecimals Decimals of the token\n    /// @param tokenAmount Amount with tokenDecimals precision\n    function tokenToWad(uint256 tokenDecimals, uint256 tokenAmount) internal pure returns (uint256) {\n        require(tokenDecimals <= MAX_DECIMALS, \"Max decimals exceeded\");\n        uint256 scaler = 10**(MAX_DECIMALS - tokenDecimals);\n        return tokenAmount * scaler;\n    }\n\n    /// @notice Convert amount from 'tokenDecimals' decimals to 18 decimals precision\n    /// @param tokenDecimals Decimals of the token\n    /// @param wadAmount Amount with 18 decimals precision\n    function wadToToken(uint256 tokenDecimals, uint256 wadAmount) internal pure returns (uint256) {\n        require(tokenDecimals <= MAX_DECIMALS, \"Max decimals exceeded\");\n        uint256 scaler = 10**(MAX_DECIMALS - tokenDecimals);\n        return wadAmount / scaler;\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IVBase.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// interfaces\nimport {IVirtualToken} from \"../interfaces/IVirtualToken.sol\";\n\ninterface IVBase is IVirtualToken {\n    /* ****************** */\n    /*     Viewer         */\n    /* ****************** */\n\n    function getIndexPrice() external view returns (int256);\n}\n"
    },
    "contracts/interfaces/IVQuote.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// interfaces\nimport {IVirtualToken} from \"../interfaces/IVirtualToken.sol\";\n\ninterface IVQuote is IVirtualToken {}\n"
    },
    "contracts/interfaces/IInsurance.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\ninterface IInsurance {\n    /* ****************** */\n    /*     Events         */\n    /* ****************** */\n\n    /// @notice Emitted when insurance reserves are withdrawn by governance\n    /// @param amount Amount of insurance reserves withdrawn\n    event LiquidityWithdrawn(uint256 amount);\n\n    /* ****************** */\n    /*     Viewer         */\n    /* ****************** */\n\n    /* ****************** */\n    /*  State modifying   */\n    /* ****************** */\n\n    function settleDebt(uint256 amount) external;\n\n    function withdrawRemainder() external;\n}\n"
    },
    "prb-math/contracts/PRBMathUD60x18.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\nimport \"./PRBMath.sol\";\n\n/// @title PRBMathUD60x18\n/// @author Paul Razvan Berg\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\n/// maximum values permitted by the Solidity type uint256.\nlibrary PRBMathUD60x18 {\n    /// @dev Half the SCALE number.\n    uint256 internal constant HALF_SCALE = 5e17;\n\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\n    uint256 internal constant LOG2_E = 1_442695040888963407;\n\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_UD60x18 =\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\n\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_WHOLE_UD60x18 =\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // The operations can never overflow.\n        unchecked {\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\n        }\n    }\n\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function ceil(uint256 x) internal pure returns (uint256 result) {\n        if (x > MAX_WHOLE_UD60x18) {\n            revert PRBMathUD60x18__CeilOverflow(x);\n        }\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"SCALE - remainder\" but faster.\n            let delta := sub(SCALE, remainder)\n\n            // Equivalent to \"x + delta * (remainder > 0 ? 1 : 0)\" but faster.\n            result := add(x, mul(delta, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\n    ///\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    ///\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDiv(x, SCALE, y);\n    }\n\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\n    function e() internal pure returns (uint256 result) {\n        result = 2_718281828459045235;\n    }\n\n    /// @notice Calculates the natural exponent of x.\n    ///\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    /// - x must be less than 133.084258667509499441.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp(uint256 x) internal pure returns (uint256 result) {\n        // Without this check, the value passed to \"exp2\" would be greater than 192.\n        if (x >= 133_084258667509499441) {\n            revert PRBMathUD60x18__ExpInputTooBig(x);\n        }\n\n        // Do the fixed-point multiplication inline to save gas.\n        unchecked {\n            uint256 doubleScaleProduct = x * LOG2_E;\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\n        }\n    }\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    ///\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\n    ///\n    /// Requirements:\n    /// - x must be 192 or less.\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\n        if (x >= 192e18) {\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\n        }\n\n        unchecked {\n            // Convert x to the 192.64-bit fixed-point format.\n            uint256 x192x64 = (x << 64) / SCALE;\n\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\n            result = PRBMath.exp2(x192x64);\n        }\n    }\n\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function floor(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"x - remainder * (remainder > 0 ? 1 : 0)\" but faster.\n            result := sub(x, mul(remainder, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Yields the excess beyond the floor of x.\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\n    function frac(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            result := mod(x, SCALE)\n        }\n    }\n\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\n    ///\n    /// @dev Requirements:\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\n    ///\n    /// @param x The basic integer to convert.\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__FromUintOverflow(x);\n            }\n            result = x * SCALE;\n        }\n    }\n\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\n    ///\n    /// @dev Requirements:\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\n    ///\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        unchecked {\n            // Checking for overflow this way is faster than letting Solidity do it.\n            uint256 xy = x * y;\n            if (xy / x != y) {\n                revert PRBMathUD60x18__GmOverflow(x, y);\n            }\n\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\n            // during multiplication. See the comments within the \"sqrt\" function.\n            result = PRBMath.sqrt(xy);\n        }\n    }\n\n    /// @notice Calculates 1 / x, rounding toward zero.\n    ///\n    /// @dev Requirements:\n    /// - x cannot be zero.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\n    function inv(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // 1e36 is SCALE * SCALE.\n            result = 1e36 / x;\n        }\n    }\n\n    /// @notice Calculates the natural logarithm of x.\n    ///\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\n    function ln(uint256 x) internal pure returns (uint256 result) {\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\n        // can return is 196205294292027477728.\n        unchecked {\n            result = (log2(x) * SCALE) / LOG2_E;\n        }\n    }\n\n    /// @notice Calculates the common logarithm of x.\n    ///\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log10(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n\n        // Note that the \"mul\" in this block is the assembly multiplication operation, not the \"mul\" function defined\n        // in this contract.\n        // prettier-ignore\n        assembly {\n            switch x\n            case 1 { result := mul(SCALE, sub(0, 18)) }\n            case 10 { result := mul(SCALE, sub(1, 18)) }\n            case 100 { result := mul(SCALE, sub(2, 18)) }\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\n            case 1000000000000000000 { result := 0 }\n            case 10000000000000000000 { result := SCALE }\n            case 100000000000000000000 { result := mul(SCALE, 2) }\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\n            default {\n                result := MAX_UD60x18\n            }\n        }\n\n        if (result == MAX_UD60x18) {\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\n            unchecked {\n                result = (log2(x) * SCALE) / 3_321928094887362347;\n            }\n        }\n    }\n\n    /// @notice Calculates the binary logarithm of x.\n    ///\n    /// @dev Based on the iterative approximation algorithm.\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\n    ///\n    /// Requirements:\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\n    ///\n    /// Caveats:\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log2(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n        unchecked {\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\n\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\n            // because n is maximum 255 and SCALE is 1e18.\n            result = n * SCALE;\n\n            // This is y = x * 2^(-n).\n            uint256 y = x >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y == SCALE) {\n                return result;\n            }\n\n            // Calculate the fractional part via the iterative approximation.\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\n                y = (y * y) / SCALE;\n\n                // Is y^2 > 2 and so in the range [2,4)?\n                if (y >= 2 * SCALE) {\n                    // Add the 2^(-m) factor to the logarithm.\n                    result += delta;\n\n                    // Corresponds to z/2 on Wikipedia.\n                    y >>= 1;\n                }\n            }\n        }\n    }\n\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\n    /// fixed-point number.\n    /// @dev See the documentation for the \"PRBMath.mulDivFixedPoint\" function.\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDivFixedPoint(x, y);\n    }\n\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\n    function pi() internal pure returns (uint256 result) {\n        result = 3_141592653589793238;\n    }\n\n    /// @notice Raises x to the power of y.\n    ///\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\n    ///\n    /// Requirements:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    ///\n    /// Caveats:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            result = y == 0 ? SCALE : uint256(0);\n        } else {\n            result = exp2(mul(log2(x), y));\n        }\n    }\n\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\n    /// famous algorithm \"exponentiation by squaring\".\n    ///\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    ///\n    /// Requirements:\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// Caveats:\n    /// - All from \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The exponent as an uint256.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // Calculate the first iteration of the loop in advance.\n        result = y & 1 > 0 ? x : SCALE;\n\n        // Equivalent to \"for(y /= 2; y > 0; y /= 2)\" but faster.\n        for (y >>= 1; y > 0; y >>= 1) {\n            x = PRBMath.mulDivFixedPoint(x, x);\n\n            // Equivalent to \"y % 2 == 1\" but faster.\n            if (y & 1 > 0) {\n                result = PRBMath.mulDivFixedPoint(result, x);\n            }\n        }\n    }\n\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\n    function scale() internal pure returns (uint256 result) {\n        result = SCALE;\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Requirements:\n    /// - x must be less than MAX_UD60x18 / SCALE.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__SqrtOverflow(x);\n            }\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\n            result = PRBMath.sqrt(x * SCALE);\n        }\n    }\n\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\n    /// @return result The same number in basic integer form.\n    function toUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            result = x / SCALE;\n        }\n    }\n}\n"
    },
    "prb-math/contracts/PRBMathSD59x18.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\nimport \"./PRBMath.sol\";\n\n/// @title PRBMathSD59x18\n/// @author Paul Razvan Berg\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\nlibrary PRBMathSD59x18 {\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\n    int256 internal constant LOG2_E = 1_442695040888963407;\n\n    /// @dev Half the SCALE number.\n    int256 internal constant HALF_SCALE = 5e17;\n\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MAX_SD59x18 =\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\n\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MAX_WHOLE_SD59x18 =\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\n\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MIN_SD59x18 =\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\n\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MIN_WHOLE_SD59x18 =\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\n\n    /// @dev How many trailing decimals can be represented.\n    int256 internal constant SCALE = 1e18;\n\n    /// INTERNAL FUNCTIONS ///\n\n    /// @notice Calculate the absolute value of x.\n    ///\n    /// @dev Requirements:\n    /// - x must be greater than MIN_SD59x18.\n    ///\n    /// @param x The number to calculate the absolute value for.\n    /// @param result The absolute value of x.\n    function abs(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            if (x == MIN_SD59x18) {\n                revert PRBMathSD59x18__AbsInputTooSmall();\n            }\n            result = x < 0 ? -x : x;\n        }\n    }\n\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\n        // The operations can never overflow.\n        unchecked {\n            int256 sum = (x >> 1) + (y >> 1);\n            if (sum < 0) {\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\n                // right rounds down to infinity.\n                assembly {\n                    result := add(sum, and(or(x, y), 1))\n                }\n            } else {\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\n                // remainder gets truncated twice.\n                result = sum + (x & y & 1);\n            }\n        }\n    }\n\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\n    function ceil(int256 x) internal pure returns (int256 result) {\n        if (x > MAX_WHOLE_SD59x18) {\n            revert PRBMathSD59x18__CeilOverflow(x);\n        }\n        unchecked {\n            int256 remainder = x % SCALE;\n            if (remainder == 0) {\n                result = x;\n            } else {\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\n                result = x - remainder;\n                if (x > 0) {\n                    result += SCALE;\n                }\n            }\n        }\n    }\n\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\n    ///\n    /// @dev Variant of \"mulDiv\" that works with signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - All from \"PRBMath.mulDiv\".\n    /// - None of the inputs can be MIN_SD59x18.\n    /// - The denominator cannot be zero.\n    /// - The result must fit within int256.\n    ///\n    /// Caveats:\n    /// - All from \"PRBMath.mulDiv\".\n    ///\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\n            revert PRBMathSD59x18__DivInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x and y.\n        uint256 ax;\n        uint256 ay;\n        unchecked {\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n        }\n\n        // Compute the absolute value of (x*SCALE)÷y. The result must fit within int256.\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\n        if (rAbs > uint256(MAX_SD59x18)) {\n            revert PRBMathSD59x18__DivOverflow(rAbs);\n        }\n\n        // Get the signs of x and y.\n        uint256 sx;\n        uint256 sy;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n        }\n\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\n        // should be positive. Otherwise, it should be negative.\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\n    function e() internal pure returns (int256 result) {\n        result = 2_718281828459045235;\n    }\n\n    /// @notice Calculates the natural exponent of x.\n    ///\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    /// - x must be less than 133.084258667509499441.\n    ///\n    /// Caveats:\n    /// - All from \"exp2\".\n    /// - For any x less than -41.446531673892822322, the result is zero.\n    ///\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function exp(int256 x) internal pure returns (int256 result) {\n        // Without this check, the value passed to \"exp2\" would be less than -59.794705707972522261.\n        if (x < -41_446531673892822322) {\n            return 0;\n        }\n\n        // Without this check, the value passed to \"exp2\" would be greater than 192.\n        if (x >= 133_084258667509499441) {\n            revert PRBMathSD59x18__ExpInputTooBig(x);\n        }\n\n        // Do the fixed-point multiplication inline to save gas.\n        unchecked {\n            int256 doubleScaleProduct = x * LOG2_E;\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\n        }\n    }\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    ///\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\n    ///\n    /// Requirements:\n    /// - x must be 192 or less.\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - For any x less than -59.794705707972522261, the result is zero.\n    ///\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function exp2(int256 x) internal pure returns (int256 result) {\n        // This works because 2^(-x) = 1/2^x.\n        if (x < 0) {\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\n            if (x < -59_794705707972522261) {\n                return 0;\n            }\n\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\n            unchecked {\n                result = 1e36 / exp2(-x);\n            }\n        } else {\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\n            if (x >= 192e18) {\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\n            }\n\n            unchecked {\n                // Convert x to the 192.64-bit fixed-point format.\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\n\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\n                result = int256(PRBMath.exp2(x192x64));\n            }\n        }\n    }\n\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\n    function floor(int256 x) internal pure returns (int256 result) {\n        if (x < MIN_WHOLE_SD59x18) {\n            revert PRBMathSD59x18__FloorUnderflow(x);\n        }\n        unchecked {\n            int256 remainder = x % SCALE;\n            if (remainder == 0) {\n                result = x;\n            } else {\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\n                result = x - remainder;\n                if (x < 0) {\n                    result -= SCALE;\n                }\n            }\n        }\n    }\n\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\n    /// of the radix point for negative numbers.\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\n    function frac(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            result = x % SCALE;\n        }\n    }\n\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\n    ///\n    /// @dev Requirements:\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\n    ///\n    /// @param x The basic integer to convert.\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\n    function fromInt(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            if (x < MIN_SD59x18 / SCALE) {\n                revert PRBMathSD59x18__FromIntUnderflow(x);\n            }\n            if (x > MAX_SD59x18 / SCALE) {\n                revert PRBMathSD59x18__FromIntOverflow(x);\n            }\n            result = x * SCALE;\n        }\n    }\n\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\n    ///\n    /// @dev Requirements:\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\n    /// - x * y cannot be negative.\n    ///\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        unchecked {\n            // Checking for overflow this way is faster than letting Solidity do it.\n            int256 xy = x * y;\n            if (xy / x != y) {\n                revert PRBMathSD59x18__GmOverflow(x, y);\n            }\n\n            // The product cannot be negative.\n            if (xy < 0) {\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\n            }\n\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\n            // during multiplication. See the comments within the \"sqrt\" function.\n            result = int256(PRBMath.sqrt(uint256(xy)));\n        }\n    }\n\n    /// @notice Calculates 1 / x, rounding toward zero.\n    ///\n    /// @dev Requirements:\n    /// - x cannot be zero.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\n    function inv(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            // 1e36 is SCALE * SCALE.\n            result = 1e36 / x;\n        }\n    }\n\n    /// @notice Calculates the natural logarithm of x.\n    ///\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\n    function ln(int256 x) internal pure returns (int256 result) {\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\n        // can return is 195205294292027477728.\n        unchecked {\n            result = (log2(x) * SCALE) / LOG2_E;\n        }\n    }\n\n    /// @notice Calculates the common logarithm of x.\n    ///\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\n    function log10(int256 x) internal pure returns (int256 result) {\n        if (x <= 0) {\n            revert PRBMathSD59x18__LogInputTooSmall(x);\n        }\n\n        // Note that the \"mul\" in this block is the assembly mul operation, not the \"mul\" function defined in this contract.\n        // prettier-ignore\n        assembly {\n            switch x\n            case 1 { result := mul(SCALE, sub(0, 18)) }\n            case 10 { result := mul(SCALE, sub(1, 18)) }\n            case 100 { result := mul(SCALE, sub(2, 18)) }\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\n            case 1000000000000000000 { result := 0 }\n            case 10000000000000000000 { result := SCALE }\n            case 100000000000000000000 { result := mul(SCALE, 2) }\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\n            default {\n                result := MAX_SD59x18\n            }\n        }\n\n        if (result == MAX_SD59x18) {\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\n            unchecked {\n                result = (log2(x) * SCALE) / 3_321928094887362347;\n            }\n        }\n    }\n\n    /// @notice Calculates the binary logarithm of x.\n    ///\n    /// @dev Based on the iterative approximation algorithm.\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\n    ///\n    /// Requirements:\n    /// - x must be greater than zero.\n    ///\n    /// Caveats:\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\n    function log2(int256 x) internal pure returns (int256 result) {\n        if (x <= 0) {\n            revert PRBMathSD59x18__LogInputTooSmall(x);\n        }\n        unchecked {\n            // This works because log2(x) = -log2(1/x).\n            int256 sign;\n            if (x >= SCALE) {\n                sign = 1;\n            } else {\n                sign = -1;\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\n                assembly {\n                    x := div(1000000000000000000000000000000000000, x)\n                }\n            }\n\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\n\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\n            result = int256(n) * SCALE;\n\n            // This is y = x * 2^(-n).\n            int256 y = x >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y == SCALE) {\n                return result * sign;\n            }\n\n            // Calculate the fractional part via the iterative approximation.\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\n                y = (y * y) / SCALE;\n\n                // Is y^2 > 2 and so in the range [2,4)?\n                if (y >= 2 * SCALE) {\n                    // Add the 2^(-m) factor to the logarithm.\n                    result += delta;\n\n                    // Corresponds to z/2 on Wikipedia.\n                    y >>= 1;\n                }\n            }\n            result *= sign;\n        }\n    }\n\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\n    /// fixed-point number.\n    ///\n    /// @dev Variant of \"mulDiv\" that works with signed numbers and employs constant folding, i.e. the denominator is\n    /// always 1e18.\n    ///\n    /// Requirements:\n    /// - All from \"PRBMath.mulDivFixedPoint\".\n    /// - None of the inputs can be MIN_SD59x18\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    ///\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\n            revert PRBMathSD59x18__MulInputTooSmall();\n        }\n\n        unchecked {\n            uint256 ax;\n            uint256 ay;\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\n            if (rAbs > uint256(MAX_SD59x18)) {\n                revert PRBMathSD59x18__MulOverflow(rAbs);\n            }\n\n            uint256 sx;\n            uint256 sy;\n            assembly {\n                sx := sgt(x, sub(0, 1))\n                sy := sgt(y, sub(0, 1))\n            }\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\n        }\n    }\n\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\n    function pi() internal pure returns (int256 result) {\n        result = 3_141592653589793238;\n    }\n\n    /// @notice Raises x to the power of y.\n    ///\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\n    ///\n    /// Requirements:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - z cannot be zero.\n    ///\n    /// Caveats:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == 0) {\n            result = y == 0 ? SCALE : int256(0);\n        } else {\n            result = exp2(mul(log2(x), y));\n        }\n    }\n\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\n    /// famous algorithm \"exponentiation by squaring\".\n    ///\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    ///\n    /// Requirements:\n    /// - All from \"abs\" and \"PRBMath.mulDivFixedPoint\".\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - All from \"PRBMath.mulDivFixedPoint\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\n    /// @param y The exponent as an uint256.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\n        uint256 xAbs = uint256(abs(x));\n\n        // Calculate the first iteration of the loop in advance.\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\n\n        // Equivalent to \"for(y /= 2; y > 0; y /= 2)\" but faster.\n        uint256 yAux = y;\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\n\n            // Equivalent to \"y % 2 == 1\" but faster.\n            if (yAux & 1 > 0) {\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\n            }\n        }\n\n        // The result must fit within the 59.18-decimal fixed-point representation.\n        if (rAbs > uint256(MAX_SD59x18)) {\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\n        }\n\n        // Is the base negative and the exponent an odd number?\n        bool isNegative = x < 0 && y & 1 == 1;\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\n    function scale() internal pure returns (int256 result) {\n        result = SCALE;\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Requirements:\n    /// - x cannot be negative.\n    /// - x must be less than MAX_SD59x18 / SCALE.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\n    /// @return result The result as a signed 59.18-decimal fixed-point .\n    function sqrt(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            if (x < 0) {\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\n            }\n            if (x > MAX_SD59x18 / SCALE) {\n                revert PRBMathSD59x18__SqrtOverflow(x);\n            }\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\n        }\n    }\n\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\n    /// @return result The same number in basic integer form.\n    function toInt(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            result = x / SCALE;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "prb-math/contracts/PRBMath.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\n\n/// @notice Emitted when one of the inputs is type(int256).min.\nerror PRBMath__MulDivSignedInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows int256.\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is MIN_SD59x18.\nerror PRBMathSD59x18__AbsInputTooSmall();\n\n/// @notice Emitted when ceiling a number overflows SD59x18.\nerror PRBMathSD59x18__CeilOverflow(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__DivInputTooSmall();\n\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\n\n/// @notice Emitted when flooring a number underflows SD59x18.\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\n\n/// @notice Emitted when the product of the inputs is negative.\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\n\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\n\n/// @notice Emitted when the input is less than or equal to zero.\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__MulInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is negative.\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\n\n/// @notice Emitted when the calculating the square root overflows SD59x18.\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\n\n/// @notice Emitted when addition overflows UD60x18.\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when ceiling a number overflows UD60x18.\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\n\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when the input is less than 1.\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\n\n/// @notice Emitted when the calculating the square root overflows UD60x18.\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\n\n/// @notice Emitted when subtraction underflows UD60x18.\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\n\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\nlibrary PRBMath {\n    /// STRUCTS ///\n\n    struct SD59x18 {\n        int256 value;\n    }\n\n    struct UD60x18 {\n        uint256 value;\n    }\n\n    /// STORAGE ///\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @dev Largest power of two divisor of SCALE.\n    uint256 internal constant SCALE_LPOTD = 262144;\n\n    /// @dev SCALE inverted mod 2^256.\n    uint256 internal constant SCALE_INVERSE =\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\n\n    /// FUNCTIONS ///\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    /// @dev Has to use 192.64-bit fixed-point numbers.\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // Start from 0.5 in the 192.64-bit fixed-point format.\n            result = 0x800000000000000000000000000000000000000000000000;\n\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\n            if (x & 0x8000000000000000 > 0) {\n                result = (result * 0x16A09E667F3BCC909) >> 64;\n            }\n            if (x & 0x4000000000000000 > 0) {\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\n            }\n            if (x & 0x2000000000000000 > 0) {\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\n            }\n            if (x & 0x1000000000000000 > 0) {\n                result = (result * 0x10B5586CF9890F62A) >> 64;\n            }\n            if (x & 0x800000000000000 > 0) {\n                result = (result * 0x1059B0D31585743AE) >> 64;\n            }\n            if (x & 0x400000000000000 > 0) {\n                result = (result * 0x102C9A3E778060EE7) >> 64;\n            }\n            if (x & 0x200000000000000 > 0) {\n                result = (result * 0x10163DA9FB33356D8) >> 64;\n            }\n            if (x & 0x100000000000000 > 0) {\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\n            }\n            if (x & 0x80000000000000 > 0) {\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\n            }\n            if (x & 0x40000000000000 > 0) {\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\n            }\n            if (x & 0x20000000000000 > 0) {\n                result = (result * 0x100162F3904051FA1) >> 64;\n            }\n            if (x & 0x10000000000000 > 0) {\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\n            }\n            if (x & 0x8000000000000 > 0) {\n                result = (result * 0x100058BA01FB9F96D) >> 64;\n            }\n            if (x & 0x4000000000000 > 0) {\n                result = (result * 0x10002C5CC37DA9492) >> 64;\n            }\n            if (x & 0x2000000000000 > 0) {\n                result = (result * 0x1000162E525EE0547) >> 64;\n            }\n            if (x & 0x1000000000000 > 0) {\n                result = (result * 0x10000B17255775C04) >> 64;\n            }\n            if (x & 0x800000000000 > 0) {\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\n            }\n            if (x & 0x400000000000 > 0) {\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\n            }\n            if (x & 0x200000000000 > 0) {\n                result = (result * 0x10000162E43F4F831) >> 64;\n            }\n            if (x & 0x100000000000 > 0) {\n                result = (result * 0x100000B1721BCFC9A) >> 64;\n            }\n            if (x & 0x80000000000 > 0) {\n                result = (result * 0x10000058B90CF1E6E) >> 64;\n            }\n            if (x & 0x40000000000 > 0) {\n                result = (result * 0x1000002C5C863B73F) >> 64;\n            }\n            if (x & 0x20000000000 > 0) {\n                result = (result * 0x100000162E430E5A2) >> 64;\n            }\n            if (x & 0x10000000000 > 0) {\n                result = (result * 0x1000000B172183551) >> 64;\n            }\n            if (x & 0x8000000000 > 0) {\n                result = (result * 0x100000058B90C0B49) >> 64;\n            }\n            if (x & 0x4000000000 > 0) {\n                result = (result * 0x10000002C5C8601CC) >> 64;\n            }\n            if (x & 0x2000000000 > 0) {\n                result = (result * 0x1000000162E42FFF0) >> 64;\n            }\n            if (x & 0x1000000000 > 0) {\n                result = (result * 0x10000000B17217FBB) >> 64;\n            }\n            if (x & 0x800000000 > 0) {\n                result = (result * 0x1000000058B90BFCE) >> 64;\n            }\n            if (x & 0x400000000 > 0) {\n                result = (result * 0x100000002C5C85FE3) >> 64;\n            }\n            if (x & 0x200000000 > 0) {\n                result = (result * 0x10000000162E42FF1) >> 64;\n            }\n            if (x & 0x100000000 > 0) {\n                result = (result * 0x100000000B17217F8) >> 64;\n            }\n            if (x & 0x80000000 > 0) {\n                result = (result * 0x10000000058B90BFC) >> 64;\n            }\n            if (x & 0x40000000 > 0) {\n                result = (result * 0x1000000002C5C85FE) >> 64;\n            }\n            if (x & 0x20000000 > 0) {\n                result = (result * 0x100000000162E42FF) >> 64;\n            }\n            if (x & 0x10000000 > 0) {\n                result = (result * 0x1000000000B17217F) >> 64;\n            }\n            if (x & 0x8000000 > 0) {\n                result = (result * 0x100000000058B90C0) >> 64;\n            }\n            if (x & 0x4000000 > 0) {\n                result = (result * 0x10000000002C5C860) >> 64;\n            }\n            if (x & 0x2000000 > 0) {\n                result = (result * 0x1000000000162E430) >> 64;\n            }\n            if (x & 0x1000000 > 0) {\n                result = (result * 0x10000000000B17218) >> 64;\n            }\n            if (x & 0x800000 > 0) {\n                result = (result * 0x1000000000058B90C) >> 64;\n            }\n            if (x & 0x400000 > 0) {\n                result = (result * 0x100000000002C5C86) >> 64;\n            }\n            if (x & 0x200000 > 0) {\n                result = (result * 0x10000000000162E43) >> 64;\n            }\n            if (x & 0x100000 > 0) {\n                result = (result * 0x100000000000B1721) >> 64;\n            }\n            if (x & 0x80000 > 0) {\n                result = (result * 0x10000000000058B91) >> 64;\n            }\n            if (x & 0x40000 > 0) {\n                result = (result * 0x1000000000002C5C8) >> 64;\n            }\n            if (x & 0x20000 > 0) {\n                result = (result * 0x100000000000162E4) >> 64;\n            }\n            if (x & 0x10000 > 0) {\n                result = (result * 0x1000000000000B172) >> 64;\n            }\n            if (x & 0x8000 > 0) {\n                result = (result * 0x100000000000058B9) >> 64;\n            }\n            if (x & 0x4000 > 0) {\n                result = (result * 0x10000000000002C5D) >> 64;\n            }\n            if (x & 0x2000 > 0) {\n                result = (result * 0x1000000000000162E) >> 64;\n            }\n            if (x & 0x1000 > 0) {\n                result = (result * 0x10000000000000B17) >> 64;\n            }\n            if (x & 0x800 > 0) {\n                result = (result * 0x1000000000000058C) >> 64;\n            }\n            if (x & 0x400 > 0) {\n                result = (result * 0x100000000000002C6) >> 64;\n            }\n            if (x & 0x200 > 0) {\n                result = (result * 0x10000000000000163) >> 64;\n            }\n            if (x & 0x100 > 0) {\n                result = (result * 0x100000000000000B1) >> 64;\n            }\n            if (x & 0x80 > 0) {\n                result = (result * 0x10000000000000059) >> 64;\n            }\n            if (x & 0x40 > 0) {\n                result = (result * 0x1000000000000002C) >> 64;\n            }\n            if (x & 0x20 > 0) {\n                result = (result * 0x10000000000000016) >> 64;\n            }\n            if (x & 0x10 > 0) {\n                result = (result * 0x1000000000000000B) >> 64;\n            }\n            if (x & 0x8 > 0) {\n                result = (result * 0x10000000000000006) >> 64;\n            }\n            if (x & 0x4 > 0) {\n                result = (result * 0x10000000000000003) >> 64;\n            }\n            if (x & 0x2 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n            if (x & 0x1 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n\n            // We're doing two things at the same time:\n            //\n            //   1. Multiply the result by 2^n + 1, where \"2^n\" is the integer part and the one is added to account for\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\n            //      rather than 192.\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\n            //\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \"ip\" is the integer part \"2^n\".\n            result *= SCALE;\n            result >>= (191 - (x >> 64));\n        }\n    }\n\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\n    /// @dev See the note on msb in the \"Find First Set\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\n    /// @param x The uint256 number for which to find the index of the most significant bit.\n    /// @return msb The index of the most significant bit as an uint256.\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        if (x >= 2**128) {\n            x >>= 128;\n            msb += 128;\n        }\n        if (x >= 2**64) {\n            x >>= 64;\n            msb += 64;\n        }\n        if (x >= 2**32) {\n            x >>= 32;\n            msb += 32;\n        }\n        if (x >= 2**16) {\n            x >>= 16;\n            msb += 16;\n        }\n        if (x >= 2**8) {\n            x >>= 8;\n            msb += 8;\n        }\n        if (x >= 2**4) {\n            x >>= 4;\n            msb += 4;\n        }\n        if (x >= 2**2) {\n            x >>= 2;\n            msb += 2;\n        }\n        if (x >= 2**1) {\n            // No need to shift x any more.\n            msb += 1;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The multiplicand as an uint256.\n    /// @param y The multiplier as an uint256.\n    /// @param denominator The divisor as an uint256.\n    /// @return result The result as an uint256.\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            unchecked {\n                result = prod0 / denominator;\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        if (prod1 >= denominator) {\n            revert PRBMath__MulDivOverflow(prod1, denominator);\n        }\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        unchecked {\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 lpotdod = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by lpotdod.\n                denominator := div(denominator, lpotdod)\n\n                // Divide [prod1 prod0] by lpotdod.\n                prod0 := div(prod0, lpotdod)\n\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * lpotdod;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷1e18) with full precision.\n    ///\n    /// @dev Variant of \"mulDiv\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\n    /// being rounded to 1e-18.  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717.\n    ///\n    /// Requirements:\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\n    ///     1. x * y = type(uint256).max * SCALE\n    ///     2. (x * y) % SCALE >= SCALE / 2\n    ///\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        uint256 prod0;\n        uint256 prod1;\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        if (prod1 >= SCALE) {\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\n        }\n\n        uint256 remainder;\n        uint256 roundUpUnit;\n        assembly {\n            remainder := mulmod(x, y, SCALE)\n            roundUpUnit := gt(remainder, 499999999999999999)\n        }\n\n        if (prod1 == 0) {\n            unchecked {\n                result = (prod0 / SCALE) + roundUpUnit;\n                return result;\n            }\n        }\n\n        assembly {\n            result := add(\n                mul(\n                    or(\n                        div(sub(prod0, remainder), SCALE_LPOTD),\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\n                    ),\n                    SCALE_INVERSE\n                ),\n                roundUpUnit\n            )\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev An extension of \"mulDiv\" for signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - None of the inputs can be type(int256).min.\n    /// - The result must fit within int256.\n    ///\n    /// @param x The multiplicand as an int256.\n    /// @param y The multiplier as an int256.\n    /// @param denominator The divisor as an int256.\n    /// @return result The result as an int256.\n    function mulDivSigned(\n        int256 x,\n        int256 y,\n        int256 denominator\n    ) internal pure returns (int256 result) {\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\n            revert PRBMath__MulDivSignedInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x, y and the denominator.\n        uint256 ax;\n        uint256 ay;\n        uint256 ad;\n        unchecked {\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\n        }\n\n        // Compute the absolute value of (x*y)÷denominator. The result must fit within int256.\n        uint256 rAbs = mulDiv(ax, ay, ad);\n        if (rAbs > uint256(type(int256).max)) {\n            revert PRBMath__MulDivSignedOverflow(rAbs);\n        }\n\n        // Get the signs of x, y and the denominator.\n        uint256 sx;\n        uint256 sy;\n        uint256 sd;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n            sd := sgt(denominator, sub(0, 1))\n        }\n\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\n        // If yes, the result should be negative.\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The uint256 number for which to calculate the square root.\n    /// @return result The result as an uint256.\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        // Set the initial guess to the closest power of two that is higher than x.\n        uint256 xAux = uint256(x);\n        result = 1;\n        if (xAux >= 0x100000000000000000000000000000000) {\n            xAux >>= 128;\n            result <<= 64;\n        }\n        if (xAux >= 0x10000000000000000) {\n            xAux >>= 64;\n            result <<= 32;\n        }\n        if (xAux >= 0x100000000) {\n            xAux >>= 32;\n            result <<= 16;\n        }\n        if (xAux >= 0x10000) {\n            xAux >>= 16;\n            result <<= 8;\n        }\n        if (xAux >= 0x100) {\n            xAux >>= 8;\n            result <<= 4;\n        }\n        if (xAux >= 0x10) {\n            xAux >>= 4;\n            result <<= 2;\n        }\n        if (xAux >= 0x8) {\n            result <<= 1;\n        }\n\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\n        unchecked {\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1; // Seven iterations should be enough\n            uint256 roundedDownResult = x / result;\n            return result >= roundedDownResult ? roundedDownResult : result;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IVirtualToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// interfaces\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IVirtualToken is IERC20, IERC20Metadata {\n    /* ****************** */\n    /*  State modifying   */\n    /* ****************** */\n\n    function mint(uint256 amount) external;\n\n    function burn(uint256 amount) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/Vault.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// contracts\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {PRBMathSD59x18} from \"prb-math/contracts/PRBMathSD59x18.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IncreOwnable} from \"./utils/IncreOwnable.sol\";\n\n// interfaces\nimport {IInsurance} from \"./interfaces/IInsurance.sol\";\nimport {IVault} from \"./interfaces/IVault.sol\";\nimport {IERC20Decimals} from \"./interfaces/IERC20Decimals.sol\";\nimport {IClearingHouse} from \"./interfaces/IClearingHouse.sol\";\n\n// libraries\nimport {LibReserve} from \"./lib/LibReserve.sol\";\nimport {LibMath} from \"./lib/LibMath.sol\";\n\nimport \"hardhat/console.sol\";\n\n/// @notice Keeps track of all token reserves for all market\n/// @dev Vault must be called right after Perpetual is deployed to set Perpetual as the owner of the contract\ncontract Vault is IVault, IncreOwnable {\n    using SafeERC20 for IERC20;\n    using LibMath for uint256;\n    using LibMath for int256;\n\n    // constants\n    uint256 internal constant MAX_DECIMALS = 18;\n    uint256 internal immutable reserveTokenDecimals;\n\n    // parameterization\n    int256 internal constant MIN_DEPOSIT_AMOUNT = 10e18; // min deposit of 10\n\n    // dependencies\n    IERC20 public immutable override reserveToken;\n    IClearingHouse public override clearingHouse;\n    IInsurance public override insurance;\n\n    // global state\n    uint256 internal badDebt;\n    uint256 internal maxTVL;\n    uint256 internal totalReserveToken;\n\n    // user state\n\n    /* Balances of users and liquidity providers\n\n    We follow a strict separate margin design where have to deposit collateral for any market\n\n    There exists two balances with a special type of meaning:\n\n    traderBalances[0][clearingHouse.address] := insurance reserve of the protocol\n    traderBalances[1][clearingHouse.address] := profit earned by governance from selling dust\n\n            market     =>      trader  => balance\n    */\n    mapping(uint256 => mapping(address => int256)) private traderBalances;\n    mapping(uint256 => mapping(address => int256)) private lpBalances;\n\n    constructor(IERC20 _reserveToken) {\n        require(address(_reserveToken) != address(0), \"Token can not be zero address\");\n        require(\n            IERC20Decimals(address(_reserveToken)).decimals() <= MAX_DECIMALS,\n            \"Has to have not more than 18 decimals\"\n        );\n\n        // set contract addresses\n        reserveToken = _reserveToken;\n\n        // set other parameters\n        reserveTokenDecimals = IERC20Decimals(address(_reserveToken)).decimals();\n    }\n\n    modifier onlyClearingHouse() {\n        require(msg.sender == address(clearingHouse), \"NO CLEARINGHOUSE\");\n        _;\n    }\n\n    /* ****************** */\n    /*     User flow      */\n    /* ****************** */\n\n    /// @notice Deposit reserveTokens to account\n    /// @param idx Index of the perpetual market\n    /// @param user Account to deposit to\n    /// @param tokenAmount Amount to be used as the collateral of the position. Might not be 18 decimals\n    /// @param depositToken Token to be used for the collateral of the position\n    /// @param isTrader True if the user is a trader, False if the user is a liquidity provider\n    /// @return Deposited Amount. 18 decimals\n    function deposit(\n        uint256 idx,\n        address user,\n        uint256 tokenAmount,\n        IERC20 depositToken,\n        bool isTrader\n    ) external override onlyClearingHouse returns (uint256) {\n        require(depositToken == reserveToken, \"Wrong token\");\n\n        uint256 wadAmount = LibReserve.tokenToWad(reserveTokenDecimals, tokenAmount);\n\n        // deposit must exceed 10\n        require(wadAmount.toInt256() >= MIN_DEPOSIT_AMOUNT, \"MIN_DEPOSIT_AMOUNT\");\n\n        // increment balance\n        _changeBalance(idx, user, wadAmount.toInt256(), isTrader);\n        totalReserveToken += wadAmount;\n\n        require(totalReserveToken <= maxTVL, \"MAX_TVL\");\n\n        // deposit reserveTokens to contract\n        IERC20(depositToken).safeTransferFrom(user, address(this), tokenAmount);\n\n        emit ValueLockedChanged(totalReserveToken);\n\n        return wadAmount;\n    }\n\n    /// @notice Withdraw all tokens from account\n    /// @param idx Index of the perpetual market\n    /// @param user Account to withdraw from\n    /// @param withdrawToken Token to be withdrawn from the vault\n    /// @param isTrader True if the user is a trader, False if the user is a liquidity provider\n    /// @return Withdrawn Amount. Might not be 18 decimals\n    function withdrawAll(\n        uint256 idx,\n        address user,\n        IERC20 withdrawToken,\n        bool isTrader\n    ) external override onlyClearingHouse returns (uint256) {\n        int256 fullAmount = isTrader ? traderBalances[idx][user] : lpBalances[idx][user];\n        return withdraw(idx, user, fullAmount.toUint256(), withdrawToken, isTrader);\n    }\n\n    /// @notice Withdraw share of tokens from account\n    /// @param idx Index of the perpetual market\n    /// @param user Account to withdraw from\n    /// @param withdrawToken Token to be withdrawn from the vault\n    /// @param reductionRatio Share of collateral to be withdrawn. Min: 0. Max: 1e18\n    /// @param isTrader True if the user is a trader, False if the user is a liquidity provider\n    /// @return Withdrawn Amount. Might not be 18 decimals\n    function withdrawPartial(\n        uint256 idx,\n        address user,\n        IERC20 withdrawToken,\n        uint256 reductionRatio,\n        bool isTrader\n    ) external override onlyClearingHouse returns (uint256) {\n        require(reductionRatio <= 1e18, \"ReductionRatio must smaller than 1e18\");\n        int256 fullAmount = isTrader ? traderBalances[idx][user] : lpBalances[idx][user];\n        int256 partialAmount = fullAmount.wadMul(reductionRatio.toInt256());\n        return withdraw(idx, user, partialAmount.toUint256(), withdrawToken, isTrader);\n    }\n\n    /// @notice Withdraw tokens from account\n    /// @param idx Index of the perpetual market\n    /// @param user Account to withdraw from\n    /// @param wadAmount Amount to withdraw from the vault. 18 decimals\n    /// @param withdrawToken Token to be withdrawn from the vault\n    /// @param isTrader True if the user is a trader, False if the user is a liquidity provider\n    /// @return Withdrawn Amount. Might not be 18 decimals\n    function withdraw(\n        uint256 idx,\n        address user,\n        uint256 wadAmount,\n        IERC20 withdrawToken,\n        bool isTrader\n    ) public override onlyClearingHouse returns (uint256) {\n        int256 balance = isTrader ? traderBalances[idx][user] : lpBalances[idx][user];\n        require(wadAmount.toInt256() <= balance, \"Not enough balance\");\n        require(withdrawToken == reserveToken, \"Wrong token address\");\n\n        // decrement balance\n        _changeBalance(idx, user, -wadAmount.toInt256(), isTrader);\n\n        // Safemath will throw if tvl < wadAmount\n        totalReserveToken -= wadAmount;\n\n        // perform transfer\n        uint256 tokenAmount = LibReserve.wadToToken(reserveTokenDecimals, wadAmount);\n        if (withdrawToken.balanceOf(address(this)) < tokenAmount) {\n            uint256 borrowedAmount = tokenAmount - withdrawToken.balanceOf(address(this));\n            insurance.settleDebt(borrowedAmount);\n            badDebt += borrowedAmount;\n            emit BadDebtGenerated(idx, user, borrowedAmount);\n        }\n        IERC20(withdrawToken).safeTransfer(user, tokenAmount);\n\n        // deposit must exceed 10\n        int256 balanceAfter = isTrader ? traderBalances[idx][user] : lpBalances[idx][user];\n        if (balanceAfter != 0) {\n            require(balanceAfter >= MIN_DEPOSIT_AMOUNT, \"MIN_DEPOSIT_AMOUNT\");\n        }\n\n        emit ValueLockedChanged(totalReserveToken);\n\n        return tokenAmount;\n    }\n\n    /// @notice Withdraw tokens from account\n    /// @param idx Index of the perpetual market\n    /// @param user Account to withdraw from\n    /// @param wadAmount Amount to withdraw from the vault. 18 decimals\n    /// @param isTrader True if the user is a trader, False if the user is a liquidity provider\n    function settleProfit(\n        uint256 idx,\n        address user,\n        int256 wadAmount,\n        bool isTrader\n    ) external override onlyClearingHouse {\n        int256 settlement = wadAmount.wadDiv(_getAssetPrice());\n        _changeBalance(idx, user, settlement, isTrader);\n    }\n\n    /* ****************** */\n    /*     Governance     */\n    /* ****************** */\n\n    // TODO: Only set once\n    function setClearingHouse(IClearingHouse newClearingHouse) external onlyOwner {\n        require(address(newClearingHouse) != address(0), \"ClearingHouse can not be zero address\");\n        clearingHouse = newClearingHouse;\n        emit ClearingHouseChanged(newClearingHouse);\n    }\n\n    function setInsurance(IInsurance newInsurance) external onlyOwner {\n        require(address(newInsurance) != address(0), \"Insurance can not be zero address\");\n        insurance = newInsurance;\n        emit InsuranceChanged(newInsurance);\n    }\n\n    function setMaxTVL(uint256 newMaxTVL) external onlyOwner {\n        require(newMaxTVL > 0, \"MaxTVL must be greater than 0\");\n        maxTVL = newMaxTVL;\n        emit MaxTVLChanged(newMaxTVL);\n    }\n\n    /* ****************** */\n    /*   User getter      */\n    /* ****************** */\n\n    /// @notice Get the balance of a trader, accounted for in USD. 18 decimals\n    /// @param idx Perpetual market index\n    /// @param user Trader address\n    /// @return Trader balance in USDC\n    function getTraderBalance(uint256 idx, address user) external view override returns (int256) {\n        return traderBalances[idx][user];\n    }\n\n    /// @notice Get the balance of a liquidity provider,  accounted for in USD. 18 decimals\n    /// @param idx Perpetual market index\n    /// @return LP balance in USDC\n    function getLpBalance(uint256 idx, address user) external view override returns (int256) {\n        return lpBalances[idx][user];\n    }\n\n    /// @notice Get the collateral value of a trader, accounted for in USD. 18 decimals\n    /// @param idx Perpetual market index\n    /// @param account Trader address\n    /// @return Trader balance in USD\n\n    function getTraderReserveValue(uint256 idx, address account) external view override returns (int256) {\n        return traderBalances[idx][account].wadMul(_getAssetPrice());\n    }\n\n    /// @notice Get the collateral value of a liquidity provider, accounted for in USD. 18 decimals\n    /// @param idx Perpetual market index\n    /// @param account Lp address\n    /// @return Lp balance in USD\n    function getLpReserveValue(uint256 idx, address account) external view override returns (int256) {\n        return lpBalances[idx][account].wadMul(_getAssetPrice());\n    }\n\n    /* ****************** */\n    /*   Global getter    */\n    /* ****************** */\n\n    /// @notice Get the number of decimals of the ERC20 token used in the vault\n    /// @return Number of decimals of the ERC20 token used in the vault\n    function getReserveTokenDecimals() external view override returns (uint256) {\n        return reserveTokenDecimals;\n    }\n\n    /// @notice Get the amount of tokens borrowed by insurance (bad debt)\n    /// @return Amount of tokens borrowed by insurance. 18 decimals\n    function getBadDebt() external view override returns (uint256) {\n        return badDebt;\n    }\n\n    /// @notice Get the total amount of tokens in the vault\n    /// @return Total amount of USDC deposited. 18 decimals\n    function getTotalReserveToken() external view override returns (uint256) {\n        return totalReserveToken;\n    }\n\n    /// @notice Get the maximum TVL set for the vault\n    /// @return Maximum TVL set. 18 decimals\n    function getMaxTVL() external view override returns (uint256) {\n        return maxTVL;\n    }\n\n    /* ****************** */\n    /*   Internal Fcts    */\n    /* ****************** */\n\n    /// @notice get the price of an asset\n    function _getAssetPrice() internal pure returns (int256) {\n        return 1e18;\n    }\n\n    function _changeBalance(\n        uint256 idx,\n        address user,\n        int256 amount,\n        bool isTrader\n    ) internal {\n        if (isTrader) {\n            traderBalances[idx][user] += amount;\n        } else {\n            lpBalances[idx][user] += amount;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IERC20Decimals.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\ninterface IERC20Decimals {\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/test/TestLibMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// libraries\nimport \"../lib/LibMath.sol\";\n\ncontract TestLibMath {\n    function toInt256(uint256 x) internal pure returns (int256) {\n        return LibMath.toInt256(x);\n    }\n}\n"
    },
    "contracts/Perpetual.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// contracts\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// interfaces\nimport {IPerpetual} from \"./interfaces/IPerpetual.sol\";\nimport {IVBase} from \"./interfaces/IVBase.sol\";\nimport {IVQuote} from \"./interfaces/IVQuote.sol\";\nimport {ICryptoSwap} from \"./interfaces/ICryptoSwap.sol\";\nimport {IClearingHouse} from \"./interfaces/IClearingHouse.sol\";\n\n// libraries\nimport {LibMath} from \"./lib/LibMath.sol\";\nimport {LibPerpetual} from \"./lib/LibPerpetual.sol\";\n\nimport \"hardhat/console.sol\";\n\n/// @notice Handles all the trading logic. Interact with the CryptoSwap pool\ncontract Perpetual is IPerpetual {\n    using LibMath for int256;\n    using LibMath for uint256;\n\n    // parameterization\n    uint256 internal constant VQUOTE_INDEX = 0;\n    uint256 internal constant VBASE_INDEX = 1;\n    uint256 internal constant TWAP_FREQUENCY = 15 minutes; // time after which funding rate CAN be calculated\n    int256 internal constant SENSITIVITY = 1e18; // funding rate sensitivity to price deviations\n    int256 internal constant MAX_PRICE_DEVIATION = 5e16; // max price change per block\n\n    // dependencies\n\n    /// @notice vBase token (traded on CryptoSwap pool)\n    IVBase public override vBase;\n\n    /// @notice vQuote token (traded on CryptoSwap pool)\n    IVQuote public override vQuote;\n\n    /// @notice Clearing House contract\n    IClearingHouse public override clearingHouse;\n\n    /// @notice Curve CryptoSwap pool\n    ICryptoSwap public override market;\n\n    // global state\n    LibPerpetual.GlobalPosition internal globalPosition;\n\n    int256 internal oracleCumulativeAmount;\n    int256 internal oracleCumulativeAmountAtBeginningOfPeriod;\n    int256 internal oracleTwap;\n\n    int256 internal marketCumulativeAmount;\n    // slither-disable-next-line similar-names\n    int256 internal marketCumulativeAmountAtBeginningOfPeriod;\n    int256 internal marketTwap;\n\n    // user state\n    mapping(address => LibPerpetual.UserPosition) internal traderPosition;\n    mapping(address => LibPerpetual.UserPosition) internal lpPosition;\n\n    /* ****************** */\n    /*     Events         */\n    /* ****************** */\n\n    /// @notice Emitted when twap is updated\n    /// @param newOracleTwap Latest oracle Time-weighted-average-price\n    /// @param newMarketTwap Latest market Time-weighted-average-price\n    event TwapUpdated(int256 newOracleTwap, int256 newMarketTwap);\n\n    /// @notice Emitted when funding rate is updated\n    /// @param cumulativeFundingRate Cumulative sum of all funding rate updates\n    /// @param fundingRate Latest fundingRate update\n    event FundingRateUpdated(int256 cumulativeFundingRate, int256 fundingRate);\n\n    /// @notice Emitted when swap with cryptoswap pool fails\n    /// @param errorMessage Return error message\n    event Log(string errorMessage);\n\n    /// @notice Emitted when (base) dust is generated\n    /// @param vBaseAmount Amount of dust\n    event DustGenerated(uint256 vBaseAmount);\n\n    constructor(\n        IVBase _vBase,\n        IVQuote _vQuote,\n        ICryptoSwap _market,\n        IClearingHouse _clearingHouse\n    ) {\n        require(address(_vBase) != address(0), \"vBase cannot be 0\");\n        require(address(_vQuote) != address(0), \"vQuote cannot be 0\");\n        require(address(_market) != address(0), \"market cannot be 0\");\n        require(address(_clearingHouse) != address(0), \"ClearingHouse cannot be 0\");\n\n        vBase = _vBase;\n        vQuote = _vQuote;\n        market = _market;\n        clearingHouse = _clearingHouse;\n\n        // approve all future transfers between Perpetual and market (curve pool)\n        require(vBase.approve(address(market), type(uint256).max), \"NO APPROVAL. TODO: PLZ CHANGE THIS TO DURING CALL\");\n        require(vQuote.approve(address(market), type(uint256).max), \"NO APPROVAL\");\n\n        // initialize global state\n        _initGlobalState(IVBase(_vBase).getIndexPrice(), ICryptoSwap(_market).last_prices().toInt256());\n    }\n\n    modifier onlyClearingHouse() {\n        require(msg.sender == address(clearingHouse), \"Only clearing house can call this function\");\n        _;\n    }\n\n    /* ****************** */\n    /*   Trader flow      */\n    /* ****************** */\n\n    /// @notice Open or increase a position, either long or short\n    /// @param account Address of the trader\n    /// @param amount to be sold, in vQuote (if long) or vBase (if short)\n    /// @param direction Long or Short\n    /// @param minAmount Minimum amount received back, in vBase (if long) or vQuote (if short)\n    /// @return openNotional Additional quote asset / liabilities accrued\n    /// @return positionSize Additional base asset / liabilities accrued\n    /// @return fundingPayments Settled funding payments\n    /// @dev No number for the leverage is given but the amount in the vault must be bigger than MIN_MARGIN_AT_CREATION\n    /// @dev No checks are done if bought amount exceeds allowance\n    function extendPosition(\n        address account,\n        uint256 amount,\n        LibPerpetual.Side direction,\n        uint256 minAmount\n    )\n        external\n        override\n        onlyClearingHouse\n        returns (\n            int256 openNotional,\n            int256 positionSize,\n            int256 fundingPayments\n        )\n    {\n        /*\n            if direction = LONG\n\n                trader goes long EUR\n                trader accrues openNotional debt\n                trader receives positionSize assets\n\n                openNotional = vQuote traded   to market   ( < 0)\n                positionSize = vBase received from market ( > 0)\n\n            else direction = SHORT\n\n                trader goes short EUR\n                trader receives openNotional assets\n                trader accrues positionSize debt\n\n                openNotional = vQuote received from market ( > 0)\n                positionSize = vBase traded   to market   ( < 0)\n\n        */\n        LibPerpetual.UserPosition storage trader = traderPosition[account];\n        LibPerpetual.GlobalPosition storage global = globalPosition;\n\n        bool isLong = direction == LibPerpetual.Side.Long ? true : false;\n\n        // make sure trader doesn't try to use `extendPosition` to reduce a position\n        // to skip the settlement of due funding payments\n        if (isLong) {\n            require(\n                traderPosition[account].positionSize >= 0,\n                \"Cannot reduce/close a SHORT position by opening a LONG position\"\n            );\n        } else {\n            require(\n                traderPosition[account].positionSize <= 0,\n                \"Cannot reduce/close a LONG position by opening a SHORT position\"\n            );\n        }\n\n        // update state\n        updateTwapAndFundingRate();\n\n        // open position\n        (openNotional, positionSize) = _extendPosition(amount, isLong, minAmount);\n\n        // check max deviation\n        require(\n            _checkPriceDeviation(marketPrice().toInt256(), globalPosition.blockStartPrice),\n            \"Price impact too large\"\n        );\n\n        // update position\n        fundingPayments = _settleFundingRate(trader, global);\n        trader.openNotional += openNotional;\n        trader.positionSize += positionSize;\n\n        return (openNotional, positionSize, fundingPayments);\n    }\n\n    /// @notice Closes position from account holder\n    /// @param account Trader account to close position for.\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\n    /// @param minAmount Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\n    /// @return vQuoteProceeds Realized quote proceeds from closing the position\n    /// @return vBaseAmount Position size reduction\n    /// @return profit Profit realized\n    function reducePosition(\n        address account,\n        uint256 proposedAmount,\n        uint256 minAmount\n    )\n        external\n        override\n        onlyClearingHouse\n        returns (\n            int256 vQuoteProceeds,\n            int256 vBaseAmount,\n            int256 profit\n        )\n    {\n        /*\n        after opening the position:\n\n            trader has long position:\n                openNotional = vQuote traded   to market   ( < 0)\n                positionSize = vBase  received from market ( > 0)\n            trader has short position\n                openNotional = vQuote received from market ( > 0)\n                positionSize = vBase  traded   to market   ( < 0)\n\n        to close the position:\n\n            trader has long position:\n                @proposedAmount := amount of vBase used to reduce the position (an arbitrary amount, must be below user.positionSize)\n                => User trades the vBase tokens with the curve pool for vQuote tokens\n\n            trader has short position:\n                @proposedAmount := amount of vQuote required to repay the vBase debt (an arbitrary amount)\n                => User incurred vBase debt when opening a position and must now trade enough\n                  vQuote with the curve pool to repay his vQuote debt in full.\n                => Remaining balances can be traded with the market for vQuote.\n\n                @audit Note that this mechanism can be exploited by inserting a large value here, since traders\n                will have to pay transaction fees anyways (on the curve pool).\n        */\n        LibPerpetual.UserPosition storage trader = traderPosition[account];\n        LibPerpetual.GlobalPosition storage global = globalPosition;\n\n        require(trader.openNotional != 0 || trader.positionSize != 0, \"No position currently opened in this market\");\n\n        // update state\n        updateTwapAndFundingRate();\n\n        int256 pnl;\n        (vBaseAmount, vQuoteProceeds, pnl) = _reducePosition(trader, proposedAmount, minAmount);\n\n        // check max deviation\n        require(\n            _checkPriceDeviation(marketPrice().toInt256(), globalPosition.blockStartPrice),\n            \"Price impact too large\"\n        );\n\n        // adjust trader position\n        profit = pnl + _settleFundingRate(trader, global); // pnl + fundingPayments\n        trader.openNotional += vQuoteProceeds;\n        trader.positionSize += vBaseAmount;\n\n        // if position has been closed entirely, delete it from the state\n        if (trader.positionSize == 0) {\n            delete traderPosition[account];\n        }\n\n        return (vQuoteProceeds, vBaseAmount, profit);\n    }\n\n    /* ******************************/\n    /*     Liquidity provider flow  */\n    /* ******************************/\n\n    /// @notice Provide liquidity to the pool\n    /// @param account Liquidity provider\n    /// @param  wadAmount Amount of vQuote provided. 18 decimals\n    /// @param  minLpAmount Minimum amount of Lp tokens minted. 18 decimals\n    /// @return baseAmount Amount of vBase provided. 18 decimals\n    /// @return fundingPayments Settled funding payments\n    function provideLiquidity(\n        address account,\n        uint256 wadAmount,\n        uint256 minLpAmount\n    ) external override onlyClearingHouse returns (uint256 baseAmount, int256 fundingPayments) {\n        updateTwapAndFundingRate();\n\n        // reflect the added liquidity on the LP position\n        LibPerpetual.UserPosition storage lp = lpPosition[account];\n\n        fundingPayments = 0;\n        if (lp.cumFundingRate != globalPosition.cumFundingRate && lp.cumFundingRate != 0) {\n            bool isLong = _getPositionDirection(lp);\n\n            fundingPayments = _getFundingPayments(\n                isLong,\n                lp.cumFundingRate,\n                globalPosition.cumFundingRate,\n                lp.positionSize.abs()\n            );\n        }\n\n        uint256 basePrice;\n        if (getTotalLiquidityProvided() == 0) {\n            basePrice = marketPrice();\n        } else {\n            basePrice = market.balances(0).wadDiv(market.balances(1));\n        }\n        baseAmount = wadAmount.wadDiv(basePrice); // vQuote / vBase/vQuote  <=> 1 / 1.2 = 0.83\n\n        // supply liquidity to curve pool\n        vQuote.mint(wadAmount);\n        vBase.mint(baseAmount);\n        //uint256 min_mint_amount = 0; // set to zero for now\n        uint256 liquidity = market.add_liquidity([wadAmount, baseAmount], minLpAmount); //  first token in curve pool is vQuote & second token is vBase\n\n        lp.openNotional -= wadAmount.toInt256();\n        lp.positionSize -= baseAmount.toInt256();\n        lp.cumFundingRate = globalPosition.cumFundingRate;\n        lp.liquidityBalance += liquidity;\n\n        return (baseAmount, fundingPayments);\n    }\n\n    /// @notice Remove liquidity from the pool\n    /// @param account Account of the LP to remove liquidity from\n    /// @param liquidityAmountToRemove Amount of liquidity to be removed from the pool. 18 decimals\n    /// @param minVTokenAmounts Minimum amount of virtual tokens [vQuote, vBase] withdrawn from the curve pool. 18 decimals\n    /// @return quoteAmount Quote tokens withdrawn\n    /// @return baseAmount Base tokens withdrawn\n    /// @return fundingPayments Funding realized\n    function removeLiquidity(\n        address account,\n        uint256 liquidityAmountToRemove,\n        uint256[2] calldata minVTokenAmounts\n    )\n        external\n        override\n        onlyClearingHouse\n        returns (\n            uint256 quoteAmount,\n            uint256 baseAmount,\n            int256 fundingPayments\n        )\n    {\n        LibPerpetual.UserPosition storage lp = lpPosition[account];\n        LibPerpetual.GlobalPosition storage global = globalPosition;\n\n        updateTwapAndFundingRate();\n\n        // slither-disable-next-line incorrect-equality\n        require(liquidityAmountToRemove <= lp.liquidityBalance, \"Cannot remove more liquidity than LP provided\");\n\n        fundingPayments = _settleLpFundingRate(lp, global);\n\n        // lower balances\n        lp.liquidityBalance -= liquidityAmountToRemove;\n\n        // remove liquidity from curve pool\n        {\n            // to avoid stack too deep errors\n            uint256 vQuoteBalanceBefore = vQuote.balanceOf(address(this)); // can we just assume 0 here? NO!\n            uint256 vBaseBalanceBefore = vBase.balanceOf(address(this));\n\n            market.remove_liquidity(liquidityAmountToRemove, minVTokenAmounts);\n\n            require(vQuote.balanceOf(address(market)) > 0, \"You broke the market\");\n            require(vBase.balanceOf(address(market)) > 0, \"You broke the market\");\n\n            uint256 vQuoteBalanceAfter = vQuote.balanceOf(address(this));\n            uint256 vBaseBalanceAfter = vBase.balanceOf(address(this));\n\n            quoteAmount = vQuoteBalanceAfter - vQuoteBalanceBefore;\n            baseAmount = vBaseBalanceAfter - vBaseBalanceBefore;\n\n            vQuote.burn(quoteAmount);\n            vBase.burn(baseAmount);\n        }\n\n        // add the amounts received from the pool\n        lp.openNotional += quoteAmount.toInt256();\n        lp.positionSize += baseAmount.toInt256();\n\n        // if position has been closed entirely, delete it from the state\n        // slither-disable-next-line incorrect-equality\n        if (lp.positionSize == 0 && lp.liquidityBalance == 0 && lp.openNotional == 0) {\n            delete lpPosition[account];\n        }\n    }\n\n    function settleLiquidityProvider(\n        address account,\n        uint256 proposedAmount,\n        uint256 minAmount\n    )\n        external\n        override\n        onlyClearingHouse\n        returns (\n            int256 vQuoteProceeds,\n            int256 vBaseAmount,\n            int256 profit\n        )\n    {\n        LibPerpetual.UserPosition storage lp = lpPosition[account];\n        LibPerpetual.GlobalPosition storage global = globalPosition;\n\n        // update state\n        updateTwapAndFundingRate();\n\n        int256 pnl;\n        (vBaseAmount, vQuoteProceeds, pnl) = _reducePosition(lp, proposedAmount, minAmount);\n\n        // check max deviation\n        require(\n            _checkPriceDeviation(marketPrice().toInt256(), globalPosition.blockStartPrice),\n            \"Price impact too large\"\n        );\n\n        // adjust trader position\n        profit = pnl + _settleFundingRate(lp, global); // pnl + fundingPayments\n        lp.openNotional += vQuoteProceeds;\n        lp.positionSize += vBaseAmount;\n\n        // if position has been closed entirely, delete it from the state\n        if (lp.positionSize == 0) {\n            delete lpPosition[account];\n        }\n\n        return (vQuoteProceeds, vBaseAmount, profit);\n    }\n\n    ///// COMMON OPERATIONS \\\\\\\\\\\n\n    function updateTwapAndFundingRate() public override {\n        LibPerpetual.GlobalPosition storage global = globalPosition;\n        uint256 currentTime = block.timestamp;\n        uint256 timeOfLastTrade = uint256(global.timeOfLastTrade);\n\n        // Don't update the state more than once per block\n        // slither-disable-next-line timestamp\n        if (currentTime > timeOfLastTrade) {\n            _recordMarketPrice();\n            _updateTwap();\n            _updateFundingRate();\n        }\n    }\n\n    /* ****************** */\n    /*   Global getter    */\n    /* ****************** */\n\n    /// @notice Get global market position\n    /// @return Global position\n    function getGlobalPosition() external view override returns (LibPerpetual.GlobalPosition memory) {\n        return globalPosition;\n    }\n\n    /// @notice Return the current off-chain exchange rate for vBase/vQuote\n    /// @return Index price\n    function indexPrice() public view override returns (int256) {\n        return vBase.getIndexPrice();\n    }\n\n    /// @notice Return the last traded price (used for TWAP)\n    /// @return lastPrice Last traded price\n    function marketPrice() public view override returns (uint256 lastPrice) {\n        return market.last_prices();\n    }\n\n    /// @notice Get the oracle Time-weighted-average-price\n    /// @return oracle twap. 18 decimals\n    function getOracleTwap() public view override returns (int256) {\n        return oracleTwap;\n    }\n\n    /// @notice Get the market Time-weighted-average-price\n    /// @return market twap. 18 decimals\n    function getMarketTwap() public view override returns (int256) {\n        return marketTwap;\n    }\n\n    /// @notice Get the market Total Liquidity provided to the Crypto Swap pool\n    /// @return market twap. 18 decimals\n    function getTotalLiquidityProvided() public view override returns (uint256) {\n        return IERC20(market.token()).totalSupply();\n    }\n\n    /* ****************** */\n    /*   User getter      */\n    /* ****************** */\n\n    /// @notice Get the missed funding payments for a trader\n    /// @param account Trader\n    /// @return upcomingFundingPayment Funding payment. 18 decimals\n    function getFundingPayments(address account) external view override returns (int256 upcomingFundingPayment) {\n        LibPerpetual.UserPosition memory user = traderPosition[account];\n        LibPerpetual.GlobalPosition memory global = globalPosition;\n        bool isLong = _getPositionDirection(user);\n\n        return _getFundingPayments(isLong, user.cumFundingRate, global.cumFundingRate, user.positionSize.abs());\n    }\n\n    function getUnrealizedPnL(address account) external view override returns (int256) {\n        LibPerpetual.UserPosition memory trader = traderPosition[account];\n        int256 poolEURUSDTWAP = getMarketTwap();\n        int256 vQuoteVirtualProceeds = trader.positionSize.wadMul(poolEURUSDTWAP);\n\n        // in the case of a LONG, trader.openNotional is negative but vQuoteVirtualProceeds is positive\n        // in the case of a SHORT, trader.openNotional is positive while vQuoteVirtualProceeds is negative\n        return trader.openNotional + vQuoteVirtualProceeds;\n    }\n\n    /// @notice Get the position of a trader\n    /// @param account Address to get the trading position from\n    /// @return Trader position\n    function getTraderPosition(address account) external view override returns (LibPerpetual.UserPosition memory) {\n        return traderPosition[account];\n    }\n\n    /// @notice Get the position of a liquidity provider\n    /// @param account Address to get the LP position from\n    /// @return Liquidity Provider position\n    function getLpPosition(address account) external view override returns (LibPerpetual.UserPosition memory) {\n        return lpPosition[account];\n    }\n\n    /* ****************** */\n    /*   Internal (Gov)   */\n    /* ****************** */\n\n    function _initGlobalState(int256 lastChainlinkPrice, int256 lastMarketPrice) internal {\n        // initialize twap\n        oracleTwap = lastChainlinkPrice;\n        marketTwap = lastMarketPrice;\n\n        // initialize funding\n        globalPosition = LibPerpetual.GlobalPosition({\n            timeOfLastTrade: uint128(block.timestamp),\n            timeOfLastTwapUpdate: uint128(block.timestamp),\n            cumFundingRate: 0,\n            blockStartPrice: lastMarketPrice\n        });\n    }\n\n    /* ****************** */\n    /*  Internal (Market) */\n    /* ****************** */\n\n    function _extendPosition(\n        uint256 amount,\n        bool isLong,\n        uint256 minAmount\n    ) internal returns (int256 openNotional, int256 positionSize) {\n        /*  if long:\n                openNotional = vQuote traded   to market   (or \"- vQuote\")\n                positionSize = vBase  received from market (or \"+ vBase\")\n            if short:\n                openNotional = vQuote received from market (or \"+ vQuote\")\n                positionSize = vBase  traded   to market   (or \"- vBase\")\n        */\n\n        if (isLong) {\n            openNotional = -amount.toInt256();\n            positionSize = _quoteForBase(amount, minAmount).toInt256();\n        } else {\n            openNotional = _baseForQuote(amount, minAmount).toInt256();\n            positionSize = -amount.toInt256();\n        }\n    }\n\n    /// @dev Used both by traders closing their own positions and liquidators liquidating other people's positions\n    /// @notice Profit is the sum of funding payments and the position PnL\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\n    /// @param minAmount Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\n    function _reducePosition(\n        LibPerpetual.UserPosition memory user,\n        uint256 proposedAmount,\n        uint256 minAmount\n    )\n        internal\n        returns (\n            int256 vBaseAmount,\n            int256 vQuoteProceeds,\n            int256 pnl\n        )\n    {\n        bool isLong = _getPositionDirection(user);\n\n        require(\n            _checkProposedAmount(isLong, user.positionSize, proposedAmount),\n            \"Amount submitted too far from the market price of the position or exceeds the position size\"\n        );\n\n        // PnL of the position\n        uint256 realizedReductionRatio;\n        (vBaseAmount, vQuoteProceeds, realizedReductionRatio) = _reducePositionOnMarket(\n            isLong,\n            user.positionSize,\n            proposedAmount,\n            minAmount\n        );\n\n        //console.log(\"realizedReductionRatio\");\n        //console.log(realizedReductionRatio);\n\n        // take the realized reduction ratio when calculating the pnl\n        int256 openNotionalToReduce = user.openNotional.wadMul(realizedReductionRatio.toInt256());\n\n        //console.log(\"vQuoteProceeds\");\n        //console.logInt(vQuoteProceeds);\n\n        //console.log(\"openNotionalToReduce\");\n        //console.logInt(openNotionalToReduce);\n\n        pnl = vQuoteProceeds + openNotionalToReduce;\n    }\n\n    /// @notice Returns vBaseAmount and vQuoteProceeds to reflect how much the position has been reduced\n    function _reducePositionOnMarket(\n        bool isLong,\n        int256 positionSize,\n        uint256 proposedAmount,\n        uint256 minAmount\n    )\n        internal\n        returns (\n            int256 vBaseAmount,\n            int256 vQuoteProceeds,\n            uint256 realizedReductionRatio\n        )\n    {\n        if (isLong) {\n            uint256 amount = _baseForQuote(proposedAmount, minAmount);\n            vQuoteProceeds = amount.toInt256();\n            vBaseAmount = -(proposedAmount.toInt256());\n\n            //console.log(\"isLong\");\n            realizedReductionRatio = proposedAmount.wadDiv(positionSize.abs().toUint256()); //  abs() in case of partial removing liquidity\n        } else {\n            //console.log(\"isShort\");\n\n            uint256 positivePositionSize = (-positionSize).toUint256();\n            uint256 vBaseProceeds = _quoteForBase(proposedAmount, minAmount);\n\n            //console.log(\"positivePositionSize\", positivePositionSize);\n            //console.log(\"vBaseProceeds\", vBaseProceeds);\n\n            /*\n            Question: Why do we make up to two swap when closing a short position?\n            Answer: We have to calculate the amount of quoteTokens needed\n                    to close the position off-chain. (No exact-output-swap function).\n                    Results can deviate from the expected amount.\n\n            Example:\n                pay back 100 base debt (positionSize = -100)\n\n            1) calculate how much quote you have to sell to pay back 100 base debt (positionSize = -100)\n                i.e. proposedAmount ~ 100 * EUR_USD ~ 110\n\n\n            2) Swap 'proposedAmount' for 'baseTokensReceived' base tokens\n\n                Case I) baseTokensReceived > positionSize\n\n                    swap (baseTokensReceived - positionSize) for quoteTokens\n\n                        swap successful?\n\n                            Case I) yes, continue\n\n                            Case 2) no, donate (baseTokenReceived - positionSize)\n\n                Case II) baseTokensReceived < positionSize\n\n                    fail\n\n            */\n            uint256 additionalProceeds = 0;\n            uint256 baseRemaining = 0;\n            if (vBaseProceeds > positivePositionSize) {\n                baseRemaining = vBaseProceeds - positivePositionSize;\n                if (_canSellBase(baseRemaining)) {\n                    // sell vBase tokens bought in excess\n                    additionalProceeds = _baseForQuote(baseRemaining, 0);\n                } else {\n                    // dust vBase balance can not be sold\n                    emit DustGenerated(baseRemaining);\n                    _donate(baseRemaining);\n                }\n            }\n\n            vQuoteProceeds = -proposedAmount.toInt256() + additionalProceeds.toInt256();\n            // baseRemaining will be 0 if proposedAmount not more than what's needed to fully buy back short position\n            vBaseAmount = (vBaseProceeds - baseRemaining).toInt256();\n            realizedReductionRatio = vBaseAmount.toUint256().wadDiv(positivePositionSize);\n        }\n    }\n\n    function _quoteForBase(uint256 quoteAmount, uint256 minAmount) internal returns (uint256 vBaseReceived) {\n        // slither-disable-next-line unused-return\n        vQuote.mint(quoteAmount);\n        vBaseReceived = market.exchange(VQUOTE_INDEX, VBASE_INDEX, quoteAmount, minAmount);\n        vBase.burn(vBaseReceived);\n    }\n\n    function _baseForQuote(uint256 baseAmount, uint256 minAmount) internal returns (uint256 vQuoteReceived) {\n        // slither-disable-next-line unused-return\n        vBase.mint(baseAmount);\n        vQuoteReceived = market.exchange(VBASE_INDEX, VQUOTE_INDEX, baseAmount, minAmount);\n        vQuote.burn(vQuoteReceived);\n    }\n\n    // @notice Donate base tokens (\"dust\") to governance\n    function _donate(uint256 baseAmount) internal {\n        traderPosition[address(clearingHouse)].positionSize += baseAmount.toInt256();\n    }\n\n    function _settleFundingRate(LibPerpetual.UserPosition storage user, LibPerpetual.GlobalPosition storage global)\n        internal\n        returns (int256 fundingPayments)\n    {\n        // apply funding rate on existing positionSize\n        fundingPayments = 0;\n        if (user.positionSize != 0) {\n            // settle trader funding rate\n            fundingPayments = _getFundingPayments(\n                user.positionSize > 0,\n                user.cumFundingRate,\n                global.cumFundingRate,\n                user.positionSize.abs()\n            );\n        }\n\n        user.cumFundingRate = global.cumFundingRate;\n\n        return fundingPayments;\n    }\n\n    function _settleLpFundingRate(LibPerpetual.UserPosition storage lp, LibPerpetual.GlobalPosition storage global)\n        internal\n        returns (int256 fundingPayments)\n    {\n        // settle lp funding rate\n        int256 virtualPositionSize = _getVBasePositionAfterVirtualWithdrawal(lp);\n        fundingPayments = _getFundingPayments(\n            virtualPositionSize > 0,\n            lp.cumFundingRate,\n            global.cumFundingRate,\n            virtualPositionSize.abs()\n        );\n        lp.cumFundingRate = global.cumFundingRate;\n\n        return fundingPayments;\n    }\n\n    /**************** TWAP ****************/\n    function _updateFundingRate() internal {\n        LibPerpetual.GlobalPosition storage global = globalPosition;\n        uint256 currentTime = block.timestamp;\n\n        int256 marketTWAP = getMarketTwap();\n        int256 indexTWAP = getOracleTwap();\n\n        int256 currentTraderPremium = (marketTWAP - indexTWAP).wadDiv(indexTWAP);\n        int256 timePassedSinceLastTrade = (currentTime - global.timeOfLastTrade).toInt256();\n\n        int256 fundingRate = (SENSITIVITY.wadMul(currentTraderPremium) * timePassedSinceLastTrade) / 1 days;\n\n        global.cumFundingRate += fundingRate;\n        global.timeOfLastTrade = uint128(currentTime);\n\n        emit FundingRateUpdated(global.cumFundingRate, fundingRate);\n    }\n\n    function _recordMarketPrice() internal {\n        globalPosition.blockStartPrice = marketPrice().toInt256();\n    }\n\n    function _updateTwap() internal {\n        uint256 currentTime = block.timestamp;\n        int256 timeElapsed = (currentTime - globalPosition.timeOfLastTrade).toInt256();\n\n        /*\n            priceCumulative1 = priceCumulative0 + price1 * timeElapsed\n        */\n\n        // will overflow in ~3000 years\n        // update cumulative chainlink price feed\n        int256 latestChainlinkPrice = indexPrice();\n        oracleCumulativeAmount += latestChainlinkPrice * timeElapsed;\n\n        // update cumulative market price feed\n        int256 latestMarketPrice = marketPrice().toInt256();\n        marketCumulativeAmount += latestMarketPrice * timeElapsed;\n\n        uint256 timeElapsedSinceBeginningOfPeriod = block.timestamp - globalPosition.timeOfLastTwapUpdate;\n\n        // slither-disable-next-line timestamp\n        if (timeElapsedSinceBeginningOfPeriod >= TWAP_FREQUENCY) {\n            /*\n                TWAP = (priceCumulative1 - priceCumulative0) / timeElapsed\n            */\n\n            // calculate chainlink twap\n            oracleTwap =\n                (oracleCumulativeAmount - oracleCumulativeAmountAtBeginningOfPeriod) /\n                timeElapsedSinceBeginningOfPeriod.toInt256();\n\n            // calculate market twap\n            marketTwap =\n                (marketCumulativeAmount - marketCumulativeAmountAtBeginningOfPeriod) /\n                timeElapsedSinceBeginningOfPeriod.toInt256();\n\n            // reset cumulative amount and timestamp\n            oracleCumulativeAmountAtBeginningOfPeriod = oracleCumulativeAmount;\n            marketCumulativeAmountAtBeginningOfPeriod = marketCumulativeAmount;\n            globalPosition.timeOfLastTwapUpdate = uint128(block.timestamp);\n\n            emit TwapUpdated(oracleTwap, marketTwap);\n        }\n    }\n\n    /************************** */\n    /* Internal Viewer (Market) */\n    /************************** */\n\n    function _checkProposedAmount(\n        bool isLong,\n        int256 positionSize,\n        uint256 proposedAmount\n    ) internal view returns (bool isValid) {\n        /*\n        Question: Why do we have to make use the proposedAmount parameters in our function?\n        Answer: There is no equivalent to an swapForExact function in the CryptoSwap contract.\n                https://docs.uniswap.org/protocol/guides/swaps/single-swaps#exact-output-swaps\n                This means we in case of someone closing a short position (positionSize < 0)\n                we can not calculate in our contract how many quoteTokens we have to swap with\n                the curve Pool to pay pack the debt. Instead this is done outside of the contract.\n                (see: TEST_get_exactOutputSwap() for an typescript implementation of a binary search\n                to find the correct input amount).\n                We only verify inside of the contract that our proposed amount is close enough\n                to the initial estimate. All base tokens exceeding the positionSize are either swapped\n                back for quoteTokens (dust is donated to the protocol)\n                See: _reducePositionOnMarket for reference\n        */\n\n        if (isLong) {\n            // proposedAmount is a vBase denominated amount\n            // positionSize needs to be positive to allow LP positions looking like longs to be partially sold\n            return proposedAmount <= positionSize.abs().toUint256();\n        } else {\n            // Check that `proposedAmount` isn't too far from the value in the market\n            // to avoid creating large swings in the market (even though these swings would be cancelled out\n            // by the fact that we sell any extra vBase bought)\n\n            // USD_amount = EUR_USD * EUR_amount\n            int256 positivePositionSize = -positionSize;\n            int256 maxVQuoteAmount = (marketTwap + marketTwap / 2).wadMul(positivePositionSize); // 50% above the TWAP\n\n            // Allow for a 50% deviation premium from the market vQuote TWAP price to close this position\n            return proposedAmount.toInt256() <= maxVQuoteAmount;\n        }\n    }\n\n    function _canSellBase(uint256 sellAmount) internal returns (bool) {\n        // slither-disable-next-line unused-return\n        try market.get_dy(VBASE_INDEX, VQUOTE_INDEX, sellAmount) {\n            return true;\n        } catch {\n            emit Log(\"Swap impossible\");\n\n            return false;\n        }\n    }\n\n    /// @notice Calculate missed funding payments\n    // slither-disable-next-line timestamp\n    function _getFundingPayments(\n        bool isLong,\n        int256 userCumFundingRate,\n        int256 globalCumFundingRate,\n        int256 vBaseAmountToSettle\n    ) internal pure returns (int256 upcomingFundingPayment) {\n        /* Funding rates (as defined in our protocol) are paid from longs to shorts\n\n            case 1: user is long  => has missed making funding payments (positive or negative)\n            case 2: user is short => has missed receiving funding payments (positive or negative)\n\n            comment: Making an negative funding payment is equivalent to receiving a positive one.\n        */\n        if (userCumFundingRate != globalCumFundingRate) {\n            int256 upcomingFundingRate = isLong\n                ? userCumFundingRate - globalCumFundingRate\n                : globalCumFundingRate - userCumFundingRate;\n\n            // fundingPayments = fundingRate * vBaseAmountToSettle\n            upcomingFundingPayment = upcomingFundingRate.wadMul(vBaseAmountToSettle);\n        }\n    }\n\n    function _checkPriceDeviation(int256 currentPrice, int256 startBlockPrice) internal pure returns (bool) {\n        // check if market price has changed more than by 2% in this block\n\n        // price deviations of a given block does not exceed 2%\n        // <=> 2% > (currentPrice - startBlockPrice) / currentPrice\n        // 2 * currentPrice > (currentPrice - startBlockPrice) * 100\n\n        // slither-disable-next-line incorrect-equality\n        return (MAX_PRICE_DEVIATION * currentPrice > (currentPrice - startBlockPrice).abs() * 1e18);\n    }\n\n    function _getPositionDirection(LibPerpetual.UserPosition memory user) internal view returns (bool _isLong) {\n        // slither-disable-next-line incorrect-equality\n        if (user.liquidityBalance == 0) {\n            // trader position\n            return user.positionSize > 0;\n        } else {\n            return _getVBasePositionAfterVirtualWithdrawal(user) > 0;\n        }\n    }\n\n    function _getVBasePositionAfterVirtualWithdrawal(LibPerpetual.UserPosition memory user)\n        internal\n        view\n        returns (int256 vBasePositionAfterVirtualWithdrawal)\n    {\n        // LP position\n        // determine if current position looks like a LONG or a SHORT by simulating a sell-off of the position\n        vBasePositionAfterVirtualWithdrawal =\n            user.positionSize +\n            ((market.balances(VBASE_INDEX) * user.liquidityBalance) / getTotalLiquidityProvided()).toInt256() -\n            1;\n    }\n}\n"
    },
    "contracts/test/TestPerpetual.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// contracts\nimport {Perpetual} from \"../Perpetual.sol\";\n\n// interfaces\nimport {ICryptoSwap} from \"../interfaces/ICryptoSwap.sol\";\nimport {IVBase} from \"../interfaces/IVBase.sol\";\nimport {IVQuote} from \"../interfaces/IVQuote.sol\";\nimport {IClearingHouse} from \"../interfaces/IClearingHouse.sol\";\n\n// libraries\nimport {LibPerpetual} from \"../lib/LibPerpetual.sol\";\n\nimport \"hardhat/console.sol\";\n\n/*\n * TestPerpetual includes some setter functions to edit part of\n * the internal state of Perpetual which aren't exposed otherwise.\n */\ncontract TestPerpetual is Perpetual {\n    constructor(\n        IVBase _vBase,\n        IVQuote _vQuote,\n        ICryptoSwap _curvePool,\n        IClearingHouse _clearingHouse\n    ) Perpetual(_vBase, _vQuote, _curvePool, _clearingHouse) {}\n\n    // simplified setter\n    function __TestPerpetual_setGlobalPosition(uint128 timeOfLastTrade, int256 cumFundingRate) external {\n        globalPosition = LibPerpetual.GlobalPosition({\n            timeOfLastTrade: timeOfLastTrade,\n            cumFundingRate: cumFundingRate,\n            timeOfLastTwapUpdate: globalPosition.timeOfLastTwapUpdate,\n            blockStartPrice: globalPosition.blockStartPrice\n        });\n    }\n\n    function __TestPerpetual_setTraderPosition(\n        address trader,\n        int256 openNotional,\n        int256 positionSize,\n        int256 cumFundingRate\n    ) external {\n        traderPosition[trader] = LibPerpetual.UserPosition({\n            openNotional: openNotional,\n            positionSize: positionSize,\n            cumFundingRate: cumFundingRate,\n            liquidityBalance: 0\n        });\n    }\n\n    function __TestPerpetual_manipulate_market(\n        uint256 tokenToSell,\n        uint256 tokenToBuy,\n        uint256 amountToSell\n    ) external returns (uint256) {\n        require(tokenToSell < 2, \"Index of tokenToSell invalid\");\n        require(tokenToBuy < 2, \"Index of tokenToBuy invalid\");\n\n        if (tokenToSell == VQUOTE_INDEX) {\n            vQuote.mint(amountToSell);\n        } else {\n            vBase.mint(amountToSell);\n        }\n\n        return market.exchange(tokenToSell, tokenToBuy, amountToSell, 0);\n    }\n\n    function __TestPerpetual_updateFunding() external {\n        _updateFundingRate();\n    }\n\n    function __TestPerpetual_updateTwap() external {\n        _updateTwap();\n    }\n\n    function __TestPerpetual_setTWAP(int256 _marketTwap, int256 _oracleTwap) external {\n        marketTwap = _marketTwap;\n        oracleTwap = _oracleTwap;\n    }\n\n    function __TestPerpetual_setBlockStartPrice(uint256 blockStartPrice) external {\n        globalPosition.blockStartPrice = int256(blockStartPrice);\n    }\n\n    function __TEST__checkPriceDeviation(int256 _marketPrice, int256 _oraclePrice) external pure returns (bool) {\n        return _checkPriceDeviation(_marketPrice, _oraclePrice);\n    }\n\n    function getOracleCumulativeAmount() external view returns (int256) {\n        return oracleCumulativeAmount;\n    }\n\n    function getOracleCumulativeAmountAtBeginningOfPeriod() external view returns (int256) {\n        return oracleCumulativeAmountAtBeginningOfPeriod;\n    }\n\n    function getMarketCumulativeAmount() external view returns (int256) {\n        return marketCumulativeAmount;\n    }\n\n    function getMarketCumulativeAmountAtBeginningOfPeriod() external view returns (int256) {\n        return marketCumulativeAmountAtBeginningOfPeriod;\n    }\n}\n"
    },
    "contracts/interfaces/IClearingHouseViewer.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// interfaces\nimport {IClearingHouse} from \"./IClearingHouse.sol\";\nimport {IPerpetual} from \"./IPerpetual.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IVault} from \"./IVault.sol\";\nimport {ICryptoSwap} from \"./ICryptoSwap.sol\";\nimport {IInsurance} from \"./IInsurance.sol\";\n\n// libraries\nimport {LibPerpetual} from \"../lib/LibPerpetual.sol\";\n\ninterface IClearingHouseViewer {\n    // global getter\n    function getExpectedVBaseAmount(uint256 idx, uint256 vQuoteAmountToSpend) external view returns (uint256);\n\n    function getExpectedVQuoteAmount(uint256 idx, uint256 vBaseAmountToSpend) external view returns (uint256);\n\n    function marketPrice(uint256 idx) external view returns (uint256);\n\n    function indexPrice(uint256 idx) external view returns (int256);\n\n    function getGlobalPosition(uint256 idx) external view returns (LibPerpetual.GlobalPosition memory);\n\n    function getBaseDust(uint256 idx) external view returns (uint256);\n\n    // user getter\n    function getTraderPosition(uint256 idx, address account) external view returns (LibPerpetual.UserPosition memory);\n\n    function getLpPosition(uint256 idx, address account) external view returns (LibPerpetual.UserPosition memory);\n\n    function getTraderReserveValue(uint256 idx, address account) external view returns (int256);\n\n    function getLpReserveValue(uint256 idx, address account) external view returns (int256);\n\n    function getFundingPayments(uint256 idx, address account) external view returns (int256 upcomingFundingPayment);\n\n    function getUnrealizedPnL(uint256 idx, address account) external view returns (int256);\n\n    function getProposedAmount(\n        uint256 idx,\n        address trader,\n        uint256 iter\n    ) external view returns (uint256 amountIn, uint256 amountOut);\n}\n"
    },
    "contracts/Insurance.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// contracts\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IncreOwnable} from \"./utils/IncreOwnable.sol\";\n\n// interfaces\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IVault} from \"./interfaces/IVault.sol\";\nimport {IInsurance} from \"./interfaces/IInsurance.sol\";\n\n/// @notice Pays out Vault in case of default\ncontract Insurance is IInsurance, IncreOwnable {\n    using SafeERC20 for IERC20;\n\n    /// @notice Insurance token\n    IERC20 public token;\n\n    /// @notice Vault contract\n    IVault public vault;\n\n    constructor(IERC20 _token, IVault _vault) {\n        require(address(_token) != address(0), \"Token zero address\");\n        require(address(_vault) != address(0), \"Vault zero address\");\n        token = _token;\n        vault = _vault;\n    }\n\n    modifier onlyVault() {\n        require(msg.sender == address(vault));\n        _;\n    }\n\n    /// @notice Settle bad debt generated by the vault\n    /// @param amount Amount of tokens to settle\n    function settleDebt(uint256 amount) external override onlyVault {\n        address caller = msg.sender;\n        // only borrower\n\n        require(IERC20(token).balanceOf(address(this)) >= amount, \"Insufficient insurance balance\");\n\n        IERC20(token).safeTransfer(caller, amount);\n    }\n\n    /// @notice Remain remaining balance of the contract\n    /// @dev Only be called by the owner of the contract\n    function withdrawRemainder() external override onlyOwner {\n        uint256 remainingBalance = IERC20(token).balanceOf(address(this));\n        IERC20(token).safeTransfer(msg.sender, remainingBalance);\n\n        emit LiquidityWithdrawn(remainingBalance);\n    }\n}\n"
    },
    "contracts/tokens/BaseERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.4;\n\n// interfaces\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @notice Modern and gas efficient ERC20 implementation.\n/// @author Modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract BaseERC20 is IERC20, IERC20Metadata {\n    /*///////////////////////////////////////////////////////////////\n                             METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public override name;\n\n    string public override symbol;\n\n    uint8 public constant override decimals = 18;\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public override totalSupply;\n\n    mapping(address => uint256) public override balanceOf;\n\n    mapping(address => mapping(address => uint256)) public override allowance;\n\n    /*///////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "contracts/tokens/VirtualToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// contracts\nimport {BaseERC20} from \"./BaseERC20.sol\";\nimport {IncreOwnable} from \"../utils/IncreOwnable.sol\";\n\n// interfaces\nimport {IPerpetual} from \"../interfaces/IPerpetual.sol\";\nimport {IVirtualToken} from \"../interfaces/IVirtualToken.sol\";\n\n// toDO: Write optimized ERC20 implementation for trades\ncontract VirtualToken is IVirtualToken, BaseERC20, IncreOwnable {\n    constructor(string memory _name, string memory _symbol) BaseERC20(_name, _symbol) {}\n\n    function mint(uint256 amount) external override onlyOwner {\n        _mint(address(owner), amount);\n    }\n\n    function burn(uint256 amount) external override onlyOwner {\n        _burn(address(owner), amount);\n    }\n}\n"
    },
    "contracts/tokens/VQuote.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// interfaces\nimport {IVQuote} from \"../interfaces/IVQuote.sol\";\n\n// contracts\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {VirtualToken} from \"./VirtualToken.sol\";\n\n/// @notice ERC20 token traded on the CryptoSwap pool\n/// @dev VQuote must be called right after Perpetual is deployed to set Perpetual as the owner of the contract\ncontract VQuote is IVQuote, VirtualToken {\n    constructor(string memory _name, string memory _symbol) VirtualToken(_name, _symbol) {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/tokens/VBase.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// contracts\nimport {VirtualToken} from \"./VirtualToken.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// interfaces\nimport {IVBase} from \"../interfaces/IVBase.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n/// @notice ERC20 token traded on the CryptoSwap pool\n/// @dev VBase must be called right after Perpetual is deployed to set Perpetual as the owner of the contract\ncontract VBase is IVBase, VirtualToken {\n    uint8 constant PRECISION = 18;\n\n    AggregatorV3Interface public immutable aggregator;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        AggregatorV3Interface _aggregator\n    ) VirtualToken(_name, _symbol) {\n        require(AggregatorV3Interface(address(_aggregator)).decimals() <= PRECISION);\n        aggregator = _aggregator;\n    }\n\n    function getIndexPrice() external view override returns (int256) {\n        return chainlinkPrice(aggregator);\n    }\n\n    function chainlinkPrice(AggregatorV3Interface chainlinkInterface) internal view returns (int256) {\n        uint8 chainlinkDecimals = chainlinkInterface.decimals();\n        (, int256 price, , uint256 timeStamp, ) = chainlinkInterface.latestRoundData();\n        // If the round is not complete yet, timestamp is 0\n        require(timeStamp > 0, \"Round not complete\");\n        require(price > 0, \"Integer conversion failed\");\n        int256 scaledPrice = (price * int256(10**(PRECISION - chainlinkDecimals)));\n        return scaledPrice;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "contracts/ClearingHouseViewer.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// contracts\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\n// interfaces\nimport {IClearingHouse} from \"./interfaces/IClearingHouse.sol\";\nimport {IClearingHouseViewer} from \"./interfaces/IClearingHouseViewer.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// libraries\nimport {LibMath} from \"./lib/LibMath.sol\";\nimport {LibPerpetual} from \"./lib/LibPerpetual.sol\";\n\nimport \"hardhat/console.sol\";\n\n/// @title Clearing House Helper Contract\n/// @notice Access vault / perpetual / market getters through this contract\ncontract ClearingHouseViewer is IClearingHouseViewer {\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using LibMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // dependencies\n    IClearingHouse public clearingHouse;\n\n    uint256 private constant VQUOTE_INDEX = 0;\n    uint256 private constant VBASE_INDEX = 1;\n\n    constructor(IClearingHouse _clearingHouse) {\n        require(address(_clearingHouse) != address(0), \"ClearingHouse address cannot be 0\");\n        clearingHouse = _clearingHouse;\n    }\n\n    /// @notice Return amount for vBase one would receive for exchanging `vQuoteAmountToSpend` in a select market (excluding slippage)\n    /// @dev It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as `minAmount` in `extendPosition`\n    /// @dev TODO: store market address to avoid second call\n    /// @param idx Index of the perpetual market\n    /// @param vQuoteAmountToSpend Amount of vQuote to be exchanged against some vBase. 18 decimals\n    function getExpectedVBaseAmount(uint256 idx, uint256 vQuoteAmountToSpend) public view override returns (uint256) {\n        // slither-disable-next-line calls-loop\n        return clearingHouse.perpetuals(idx).market().get_dy(VQUOTE_INDEX, VBASE_INDEX, vQuoteAmountToSpend);\n    }\n\n    /// @notice Return amount for vQuote one would receive for exchanging `vBaseAmountToSpend` in a select market (excluding slippage)\n    /// @dev It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as `minAmount` in `extendPosition`\n    /// @dev TODO: store market address to avoid second call\n    /// @param idx Index of the perpetual market\n    /// @param vBaseAmountToSpend Amount of vBase to be exchanged against some vQuote. 18 decimals\n    function getExpectedVQuoteAmount(uint256 idx, uint256 vBaseAmountToSpend) public view override returns (uint256) {\n        return clearingHouse.perpetuals(idx).market().get_dy(VBASE_INDEX, VQUOTE_INDEX, vBaseAmountToSpend);\n    }\n\n    /// @notice Return the last traded price (used for TWAP)\n    /// @param idx Index of the perpetual market\n    function marketPrice(uint256 idx) public view override returns (uint256) {\n        return clearingHouse.perpetuals(idx).marketPrice();\n    }\n\n    /// @notice Return the current off-chain exchange rate for vBase/vQuote\n    /// @param idx Index of the perpetual market\n    function indexPrice(uint256 idx) external view override returns (int256) {\n        return clearingHouse.perpetuals(idx).indexPrice();\n    }\n\n    /// @param idx Index of the perpetual market\n    function getGlobalPosition(uint256 idx) external view override returns (LibPerpetual.GlobalPosition memory) {\n        return clearingHouse.perpetuals(idx).getGlobalPosition();\n    }\n\n    /* ****************** */\n    /*   User viewer      */\n    /* ****************** */\n\n    /// @notice Calculate missed funding payments\n    /// @param idx Index of the perpetual market\n    /// @param account Trader to get the funding payments\n    function getFundingPayments(uint256 idx, address account)\n        external\n        view\n        override\n        returns (int256 upcomingFundingPayment)\n    {\n        return clearingHouse.perpetuals(idx).getFundingPayments(account);\n    }\n\n    /// @param idx Index of the perpetual market\n    /// @param account Trader to get the unrealized PnL from\n    function getUnrealizedPnL(uint256 idx, address account) external view override returns (int256) {\n        return clearingHouse.perpetuals(idx).getUnrealizedPnL(account);\n    }\n\n    /// @notice Get the portfolio value of a trader\n    /// @param idx Index of the perpetual market\n    /// @param account Address to get the portfolio value from\n    function getTraderReserveValue(uint256 idx, address account) external view override returns (int256) {\n        return clearingHouse.vault().getTraderReserveValue(idx, account);\n    }\n\n    /// @notice Get the portfolio value of an Lp\n    /// @param idx Index of the perpetual market\n    /// @param account Address to get the portfolio value from\n    function getLpReserveValue(uint256 idx, address account) external view override returns (int256) {\n        return clearingHouse.vault().getLpReserveValue(idx, account);\n    }\n\n    /// @notice Get trader position\n    /// @param idx Index of the perpetual market\n    /// @param account Address to get the trading position from\n    function getTraderPosition(uint256 idx, address account)\n        public\n        view\n        override\n        returns (LibPerpetual.UserPosition memory)\n    {\n        return clearingHouse.perpetuals(idx).getTraderPosition(account);\n    }\n\n    /// @notice Get Lp position\n    /// @param idx Index of the perpetual market\n    /// @param account Address to get the LP position from\n    function getLpPosition(uint256 idx, address account)\n        external\n        view\n        override\n        returns (LibPerpetual.UserPosition memory)\n    {\n        return clearingHouse.perpetuals(idx).getLpPosition(account);\n    }\n\n    /// @notice Get the current (base) dust balance\n    /// @return Base balance of Governance. 18 decimals\n    function getBaseDust(uint256 idx) external view override returns (uint256) {\n        return clearingHouse.perpetuals(idx).getTraderPosition(address(clearingHouse)).positionSize.toUint256();\n    }\n\n    /// @notice Get the proposed amount needed to close a position\n    /// @dev Solidity implementation to minimize the node calls once has to make when finding proposed amount\n    /// @dev Should not be called from another contract\n    /// @dev TODO: use reductionRatio parameters\n    /// @param idx Index of the perpetual market\n    /// @param trader Account\n    /// @param iter Maximum iterations\n    function getProposedAmount(\n        uint256 idx,\n        address trader,\n        uint256 iter\n    ) external view override returns (uint256 amountIn, uint256 amountOut) {\n        int256 positionSize = getTraderPosition(idx, trader).positionSize;\n        if (positionSize > 0) {\n            amountIn = positionSize.toUint256();\n            amountOut = getExpectedVQuoteAmount(idx, amountIn);\n        } else {\n            uint256 position = (-positionSize).toUint256();\n            amountOut = 0;\n            amountIn = position.wadMul(marketPrice(idx));\n            // binary search in [marketPrice * 0.7, marketPrice * 1.3]\n            uint256 maxVal = (amountIn * 13) / 10;\n            uint256 minVal = (amountIn * 7) / 10;\n\n            for (uint256 i = 0; i < iter; i++) {\n                amountIn = (minVal + maxVal) / 2;\n                // slither-disable-next-line calls-loop\n                amountOut = getExpectedVBaseAmount(idx, amountIn);\n\n                if (amountOut == position) {\n                    break;\n                } else if (amountOut < position) {\n                    minVal = amountIn;\n                } else {\n                    maxVal = amountIn;\n                }\n            }\n\n            // take maxVal to make sure we are above the target\n            if (amountOut < position) {\n                amountIn = maxVal;\n                amountOut = getExpectedVBaseAmount(idx, amountIn);\n            }\n            return (amountIn, amountOut);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/mocks/MockStableSwap.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// contracts\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @notice Mock StableSwap market to test buying/selling of derivative toknens\n/// @dev Uses the well-known x * y = k formula\n\ncontract MockStableSwap is Ownable {\n    struct Pool {\n        uint256 vQuote;\n        uint256 vBase;\n        uint256 totalAssetReserve;\n        uint256 price; // 10 ** 18\n    }\n\n    uint256 constant DECIMALS = 10**18;\n    Pool public pool;\n\n    constructor(uint256 _vQuote, uint256 _vBase) Ownable() {\n        pool.vQuote = _vQuote;\n        pool.vBase = _vBase;\n        pool.totalAssetReserve = _vQuote * _vBase;\n        pool.price = (_vBase * DECIMALS) / _vQuote;\n    }\n\n    /************************* events *************************/\n    event NewReserves(uint256 vBase, uint256 vQuote, uint256 newPrice, uint256 blockNumber);\n\n    /************************* functions *************************/\n\n    /* mint vBase to go long euro */\n    function mintVBase(uint256 amount) external onlyOwner returns (uint256) {\n        uint256 vBasenew = pool.vBase + amount;\n        uint256 vQuoteNew = pool.totalAssetReserve / vBasenew; // x = k / y\n        uint256 buy = pool.vQuote - vQuoteNew;\n\n        _updateBalances(vBasenew, vQuoteNew);\n\n        return buy;\n    }\n\n    /* burn vBase to go short euro */\n    function burnVBase(uint256 amount) external onlyOwner returns (uint256) {\n        uint256 vBasenew = pool.vBase - amount;\n        uint256 vQuoteNew = pool.totalAssetReserve / vBasenew; // x = k / y\n        uint256 buy = vQuoteNew - pool.vQuote;\n        _updateBalances(vBasenew, vQuoteNew);\n\n        return buy;\n    }\n\n    /* mint vQuote to close long euro */\n    function mintVQuote(uint256 amount) external onlyOwner returns (uint256) {\n        uint256 vQuoteNew = pool.vQuote + amount;\n        uint256 vBasenew = pool.totalAssetReserve / vQuoteNew; // x = k / y\n        uint256 sell = pool.vBase - vBasenew;\n\n        _updateBalances(vBasenew, vQuoteNew);\n\n        return sell;\n    }\n\n    /* burn vQuote to close short euro */\n    function burnVQuote(uint256 amount) external onlyOwner returns (uint256) {\n        uint256 vQuoteNew = pool.vBase - amount;\n        uint256 vBasenew = pool.totalAssetReserve / vQuoteNew; // x = k / y\n        uint256 sell = vBasenew - pool.vBase;\n\n        _updateBalances(vBasenew, vQuoteNew);\n\n        return sell;\n    }\n\n    /* update reserve balances after buying/selling */\n    function _updateBalances(uint256 vBaseNew, uint256 vQuoteNew) internal {\n        uint256 newPrice = (vBaseNew * DECIMALS) / vQuoteNew;\n\n        pool.price = newPrice;\n        pool.vBase = vBaseNew;\n        pool.vQuote = vQuoteNew;\n\n        emit NewReserves(vBaseNew, vQuoteNew, newPrice, block.number);\n    }\n}\n"
    },
    "contracts/mocks/USDCmock.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// contracts\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport {IncreOwnable} from \"../utils/IncreOwnable.sol\";\n\ncontract USDCmock is ERC20, IncreOwnable {\n    uint8 public _decimals;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals_\n    ) ERC20(name, symbol) {\n        _decimals = decimals_;\n    }\n\n    function mint(address _to, uint256 _amount) public onlyOwner {\n        _mint(_to, _amount);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "contracts/test/TestVault.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// contracts\nimport {Vault} from \"../Vault.sol\";\n\n// interfaces\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/*\n * TestVault includes some setter functions to edit part of\n * the internal state of Vault which aren't exposed otherwise.\n */\ncontract TestVault is Vault {\n    constructor(IERC20 _reserveToken) Vault(_reserveToken) {}\n\n    function __TestVault_set_trader_balance(\n        uint256 idx,\n        address user,\n        int256 amount\n    ) external {\n        return _changeBalance(idx, user, amount, true);\n    }\n}\n"
    },
    "contracts/test/TestLibReserve.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.4;\n\n// libraries\nimport \"../lib/LibReserve.sol\";\n\ncontract TestLibReserve {\n    function tokenToWad(uint256 tokenDecimals, uint256 amount) external pure returns (uint256) {\n        return LibReserve.tokenToWad(tokenDecimals, amount);\n    }\n\n    function wadToToken(uint256 tokenDecimals, uint256 wadAmount) external pure returns (uint256) {\n        return LibReserve.wadToToken(tokenDecimals, wadAmount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}