{
  "address": "0x2DB303E9614b498a8823D1E2F38f50692b4c69A6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "_ua",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__MulInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAbs",
          "type": "uint256"
        }
      ],
      "name": "PRBMathSD59x18__MulOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_ClearingHouseZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_CollateralAlreadyWhiteListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_ExcessiveCollateralWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_InsufficientCollateralWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_InsuranceZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_MaxCollateralAmountExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_OracleZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_SenderNotClearingHouse",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_SenderNotClearingHouseNorInsurance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_UADebt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_UnsupportedCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_WithdrawExcessiveAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_WithdrawReductionRatioTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "paramIndex",
          "type": "uint8"
        }
      ],
      "name": "Vault_ZeroAddressConstructor",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IClearingHouse",
          "name": "newClearingHouse",
          "type": "address"
        }
      ],
      "name": "ClearingHouseChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Metadata",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        }
      ],
      "name": "CollateralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Metadata",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxAmount",
          "type": "uint256"
        }
      ],
      "name": "CollateralMaxAmountChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Metadata",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newWeight",
          "type": "uint256"
        }
      ],
      "name": "CollateralWeightChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IInsurance",
          "name": "newInsurance",
          "type": "address"
        }
      ],
      "name": "InsuranceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "OracleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TraderBadDebtGenerated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOVERNANCE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UA",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UA_IDX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        }
      ],
      "name": "addWhiteListedCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newMaxAmount",
          "type": "uint256"
        }
      ],
      "name": "changeCollateralMaxAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newWeight",
          "type": "uint256"
        }
      ],
      "name": "changeCollateralWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearingHouse",
      "outputs": [
        {
          "internalType": "contract IClearingHouse",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "depositToken",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenIdx",
          "type": "uint256"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenIdx",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "collateralBalance",
          "type": "int256"
        }
      ],
      "name": "getDiscountedCollateralUSDValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfCollaterals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDiscounted",
          "type": "bool"
        }
      ],
      "name": "getReserveValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalValueLocked",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "getWhiteListedCollateral",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20Metadata",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "currentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVault.Collateral",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insurance",
      "outputs": [
        {
          "internalType": "contract IInsurance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IClearingHouse",
          "name": "newClearingHouse",
          "type": "address"
        }
      ],
      "name": "setClearingHouse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IInsurance",
          "name": "newInsurance",
          "type": "address"
        }
      ],
      "name": "setInsurance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidatee",
          "type": "address"
        }
      ],
      "name": "settleLiquidationOnCollaterals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "settlePnL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenToCollateralIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferUa",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "withdrawToken",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "withdrawToken",
          "type": "address"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x757219ed30e0c6c8f54ce473d817ef0b6ae06f76263ea4ebac91860d499a961c",
  "receipt": {
    "to": null,
    "from": "0x69C7c048e7C286B0a8Bcf7cD7620E71Ef7569421",
    "contractAddress": "0x2DB303E9614b498a8823D1E2F38f50692b4c69A6",
    "transactionIndex": 17,
    "gasUsed": "2782810",
    "logsBloom": "0x00000004000000000a00000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000008000000000200000000000000000000000000000020000400000000000000800000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000400000002000000000000000000000000010000000000001000000000000000000000000000004000040880000000000000020001000100000000000020000000000000000000000000000000000000000000000000000000000000010000",
    "blockHash": "0x81b014f364fb5e423c9f17637f4c189152390477c90d799e5ebf4446e3b9f612",
    "transactionHash": "0x757219ed30e0c6c8f54ce473d817ef0b6ae06f76263ea4ebac91860d499a961c",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 11179350,
        "transactionHash": "0x757219ed30e0c6c8f54ce473d817ef0b6ae06f76263ea4ebac91860d499a961c",
        "address": "0x2DB303E9614b498a8823D1E2F38f50692b4c69A6",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771",
          "0x00000000000000000000000069c7c048e7c286b0a8bcf7cd7620e71ef7569421",
          "0x00000000000000000000000069c7c048e7c286b0a8bcf7cd7620e71ef7569421"
        ],
        "data": "0x",
        "logIndex": 47,
        "blockHash": "0x81b014f364fb5e423c9f17637f4c189152390477c90d799e5ebf4446e3b9f612"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 11179350,
        "transactionHash": "0x757219ed30e0c6c8f54ce473d817ef0b6ae06f76263ea4ebac91860d499a961c",
        "address": "0x2DB303E9614b498a8823D1E2F38f50692b4c69A6",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771"
        ],
        "data": "0x",
        "logIndex": 48,
        "blockHash": "0x81b014f364fb5e423c9f17637f4c189152390477c90d799e5ebf4446e3b9f612"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 11179350,
        "transactionHash": "0x757219ed30e0c6c8f54ce473d817ef0b6ae06f76263ea4ebac91860d499a961c",
        "address": "0x2DB303E9614b498a8823D1E2F38f50692b4c69A6",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c",
          "0x00000000000000000000000069c7c048e7c286b0a8bcf7cd7620e71ef7569421",
          "0x00000000000000000000000069c7c048e7c286b0a8bcf7cd7620e71ef7569421"
        ],
        "data": "0x",
        "logIndex": 49,
        "blockHash": "0x81b014f364fb5e423c9f17637f4c189152390477c90d799e5ebf4446e3b9f612"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 11179350,
        "transactionHash": "0x757219ed30e0c6c8f54ce473d817ef0b6ae06f76263ea4ebac91860d499a961c",
        "address": "0x2DB303E9614b498a8823D1E2F38f50692b4c69A6",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771"
        ],
        "data": "0x",
        "logIndex": 50,
        "blockHash": "0x81b014f364fb5e423c9f17637f4c189152390477c90d799e5ebf4446e3b9f612"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 11179350,
        "transactionHash": "0x757219ed30e0c6c8f54ce473d817ef0b6ae06f76263ea4ebac91860d499a961c",
        "address": "0x2DB303E9614b498a8823D1E2F38f50692b4c69A6",
        "topics": [
          "0x11f8990ac38271f23dea447d5728e9914fca7cea2edda43af6c43c415f8bc30b"
        ],
        "data": "0x000000000000000000000000865c437d081133cbaa6495add1bc7586022681a50000000000000000000000000000000000000000000000000de0b6b3a7640000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 51,
        "blockHash": "0x81b014f364fb5e423c9f17637f4c189152390477c90d799e5ebf4446e3b9f612"
      }
    ],
    "blockNumber": 11179350,
    "cumulativeGasUsed": "7774174",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x865C437d081133cbAa6495aDD1Bc7586022681A5"
  ],
  "numDeployments": 1,
  "solcInputHash": "e1cef607481b161ae69d7ea60025156b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_ua\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__MulInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\"}],\"name\":\"PRBMathSD59x18__MulOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_ClearingHouseZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_CollateralAlreadyWhiteListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_ExcessiveCollateralWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_InsufficientCollateralWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_InsuranceZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_MaxCollateralAmountExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_OracleZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_SenderNotClearingHouse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_SenderNotClearingHouseNorInsurance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_UADebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_UnsupportedCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_WithdrawExcessiveAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_WithdrawReductionRatioTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"paramIndex\",\"type\":\"uint8\"}],\"name\":\"Vault_ZeroAddressConstructor\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IClearingHouse\",\"name\":\"newClearingHouse\",\"type\":\"address\"}],\"name\":\"ClearingHouseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Metadata\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Metadata\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxAmount\",\"type\":\"uint256\"}],\"name\":\"CollateralMaxAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Metadata\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"CollateralWeightChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IInsurance\",\"name\":\"newInsurance\",\"type\":\"address\"}],\"name\":\"InsuranceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TraderBadDebtGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNANCE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UA\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UA_IDX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"addWhiteListedCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMaxAmount\",\"type\":\"uint256\"}],\"name\":\"changeCollateralMaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"changeCollateralWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearingHouse\",\"outputs\":[{\"internalType\":\"contract IClearingHouse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"depositToken\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdx\",\"type\":\"uint256\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIdx\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"collateralBalance\",\"type\":\"int256\"}],\"name\":\"getDiscountedCollateralUSDValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfCollaterals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDiscounted\",\"type\":\"bool\"}],\"name\":\"getReserveValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValueLocked\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getWhiteListedCollateral\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.Collateral\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurance\",\"outputs\":[{\"internalType\":\"contract IInsurance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClearingHouse\",\"name\":\"newClearingHouse\",\"type\":\"address\"}],\"name\":\"setClearingHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IInsurance\",\"name\":\"newInsurance\",\"type\":\"address\"}],\"name\":\"setInsurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidatee\",\"type\":\"address\"}],\"name\":\"settleLiquidationOnCollaterals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"settlePnL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToCollateralIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferUa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"withdrawToken\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"withdrawToken\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(address,uint256,address)\":{\"details\":\"No differentiated treatment of deposit in the UA token and other collaterals\",\"params\":{\"amount\":\"Amount to be used as the collateral of the position. Might not be 18 decimals\",\"depositToken\":\"Token to be used for the collateral of the position\",\"user\":\"Account to deposit to\"}},\"getNumberOfCollaterals()\":{\"returns\":{\"_0\":\"List of Collateral tokens\"}},\"getReserveValue(address,bool)\":{\"params\":{\"isDiscounted\":\"Whether or not the reserve value should be discounted by the weight of the collateral\",\"user\":\"User address\"},\"returns\":{\"_0\":\"reserveValue Value of collaterals in USD. 18 decimals\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTotalValueLocked()\":{\"returns\":{\"_0\":\"Total Value Locked (tvl) in USD. 18 decimals\"}},\"getWhiteListedCollateral(uint256)\":{\"returns\":{\"_0\":\"Collateral The collateral at the index provided\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"settleLiquidationOnCollaterals(address,address)\":{\"params\":{\"liquidatee\":\"Liquidatee\",\"liquidator\":\"Liquidator\"}},\"settlePnL(address,int256)\":{\"params\":{\"amount\":\"PnL amount in UA to apply. 18 decimals\",\"user\":\"Account to apply the PnL to\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferUa(address,uint256)\":{\"params\":{\"amount\":\"Amount of UA tokens to be withdrawn. 18 decimals\",\"user\":\"Account to withdraw UA tokens to\"}},\"withdraw(address,uint256,address)\":{\"details\":\"Unlike `deposit`, differentiated treatment of withdrawals in the UA token and other collaterals\",\"params\":{\"amount\":\"Amount to withdraw from the vault. Might not be 18 decimals (decimals of the token)\",\"user\":\"Account to withdraw from\",\"withdrawToken\":\"Token to be withdrawn from the vault\"}},\"withdrawAll(address,address)\":{\"params\":{\"user\":\"Account to withdraw from\",\"withdrawToken\":\"Token to be withdrawn from the vault\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMathSD59x18__MulInputTooSmall()\":[{\"notice\":\"Emitted when one of the inputs is MIN_SD59x18.\"}],\"PRBMathSD59x18__MulOverflow(uint256)\":[{\"notice\":\"Emitted when the intermediary absolute result overflows SD59x18.\"}],\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"Vault_ClearingHouseZeroAddress()\":[{\"notice\":\"Emitted when the proposed clearingHouse address is equal to the zero address\"}],\"Vault_CollateralAlreadyWhiteListed()\":[{\"notice\":\"Emitted when owner tries to whitelist a collateral already whitelisted\"}],\"Vault_ExcessiveCollateralWeight()\":[{\"notice\":\"Emitted when the proposed collateral weight is above the limit\"}],\"Vault_InsufficientBalance()\":[{\"notice\":\"Emitted when a user attempts to withdraw more collateral than available in vault\"}],\"Vault_InsufficientCollateralWeight()\":[{\"notice\":\"Emitted when the proposed collateral weight is under the limit\"}],\"Vault_InsuranceZeroAddress()\":[{\"notice\":\"Emitted when the proposed insurance address is equal to the zero address\"}],\"Vault_MaxCollateralAmountExceeded()\":[{\"notice\":\"Emitted when a user attempts to withdraw more collateral than available in vault\"}],\"Vault_OracleZeroAddress()\":[{\"notice\":\"Emitted when the proposed oracle address is equal to the zero address\"}],\"Vault_SenderNotClearingHouse()\":[{\"notice\":\"Emitted when the sender is not the clearing house\"}],\"Vault_SenderNotClearingHouseNorInsurance()\":[{\"notice\":\"Emitted when the sender is not the clearing house, nor the insurance\"}],\"Vault_UADebt()\":[{\"notice\":\"Emitted when user tries to withdraw collateral while having a UA debt\"}],\"Vault_UnsupportedCollateral()\":[{\"notice\":\"Emitted when a user attempts to use a token which is not whitelisted as collateral\"}],\"Vault_WithdrawExcessiveAmount()\":[{\"notice\":\"Emitted when a user attempts to withdraw more than their balance\"}],\"Vault_WithdrawReductionRatioTooHigh()\":[{\"notice\":\"Emitted when a user attempts to withdraw with a reduction ratio above 1e18\"}],\"Vault_ZeroAddressConstructor(uint8)\":[{\"notice\":\"Emitted when the zero address is provided as a parameter in the constructor\"}]},\"events\":{\"ClearingHouseChanged(address)\":{\"notice\":\"Emitted when a new ClearingHouse is connected to the vault\"},\"CollateralAdded(address,uint256,uint256)\":{\"notice\":\"Emitted when a new Oracle is connected to the vault\"},\"CollateralMaxAmountChanged(address,uint256)\":{\"notice\":\"Emitted when a collateral max amount changed\"},\"CollateralWeightChanged(address,uint256)\":{\"notice\":\"Emitted when a collateral weight changed\"},\"Deposit(address,address,uint256)\":{\"notice\":\"Emitted when collateral is deposited into the vault\"},\"InsuranceChanged(address)\":{\"notice\":\"Emitted when a new Insurance is connected to the vault\"},\"OracleChanged(address)\":{\"notice\":\"Emitted when a new Oracle is connected to the vault\"},\"TraderBadDebtGenerated(address,uint256)\":{\"notice\":\"Emitted when bad debt is settled for by the insurance reserve\"},\"Withdraw(address,address,uint256)\":{\"notice\":\"Emitted when collateral is withdrawn from the vault\"}},\"kind\":\"user\",\"methods\":{\"addWhiteListedCollateral(address,uint256,uint256)\":{\"notice\":\"Add a new token to the list of white listed ERC20 which can be used as collaterals\"},\"changeCollateralMaxAmount(address,uint256)\":{\"notice\":\"Change max amount of a white listed collateral         Useful as a risk mitigation measure in case one collateral drops in value\"},\"changeCollateralWeight(address,uint256)\":{\"notice\":\"Change weight of a white listed collateral         Useful as a risk mitigation measure in case one collateral drops in value\"},\"deposit(address,uint256,address)\":{\"notice\":\"Deposit reserveTokens to account\"},\"getNumberOfCollaterals()\":{\"notice\":\"Get all collateral tokens available for margin trading\"},\"getReserveValue(address,bool)\":{\"notice\":\"Get the balance of a trader, accounted for in USD. 18 decimals\"},\"getTotalValueLocked()\":{\"notice\":\"Get all value of all tokens deposited into the vault\"},\"getWhiteListedCollateral(uint256)\":{\"notice\":\"Get one collateral token available for margin trading\"},\"settleLiquidationOnCollaterals(address,address)\":{\"notice\":\"Allow liquidator to buy back collateral(s) of liquidated user at discounted price whereby settling his debt\"},\"settlePnL(address,int256)\":{\"notice\":\"Withdraw tokens from account\"},\"tokenToCollateralIdx(address)\":{\"notice\":\"Map white listed collateral tokens to their whiteListedCollaterals indexes\"},\"transferUa(address,uint256)\":{\"notice\":\"Transfer UA tokens from the vaultThe balance of the user from whom the UA tokens are been withdrawn must be updated (separately)\"},\"withdraw(address,uint256,address)\":{\"notice\":\"Withdraw tokens from account\"},\"withdrawAll(address,address)\":{\"notice\":\"Withdraw all tokens from account\"}},\"notice\":\"Keeps track of all token reserves for all market\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3ebde1c8d27576db912d87c3560dab14adfb9cd001be95890ec4ba035e652e7\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// contracts\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IncreAccessControl} from \\\"./utils/IncreAccessControl.sol\\\";\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IInsurance} from \\\"./interfaces/IInsurance.sol\\\";\\nimport {IOracle} from \\\"./interfaces/IOracle.sol\\\";\\nimport {IVault} from \\\"./interfaces/IVault.sol\\\";\\nimport {IClearingHouse} from \\\"./interfaces/IClearingHouse.sol\\\";\\n\\n// libraries\\nimport {LibReserve} from \\\"./lib/LibReserve.sol\\\";\\nimport {LibMath} from \\\"./lib/LibMath.sol\\\";\\n\\n/// @notice Keeps track of all token reserves for all market\\ncontract Vault is IVault, IncreAccessControl {\\n    using SafeERC20 for IERC20Metadata;\\n    using LibMath for uint256;\\n    using LibMath for int256;\\n\\n    // constants\\n    // slither-disable-next-line naming-convention\\n    IERC20Metadata public immutable override UA;\\n    uint256 public constant UA_IDX = 0;\\n\\n    // dependencies\\n    IClearingHouse public override clearingHouse;\\n    IInsurance public override insurance;\\n    IOracle public override oracle;\\n\\n    // global state\\n    Collateral[] internal whiteListedCollaterals;\\n    /// @notice Map white listed collateral tokens to their whiteListedCollaterals indexes\\n    mapping(IERC20Metadata => uint256) public override tokenToCollateralIdx;\\n\\n    // user state\\n\\n    /* Balances of users and liquidity providers\\n    We follow a strict separate margin design where have to deposit collateral for any market\\n\\n    */\\n    //       user  =>    collateralIdx => balance (might not be 18 decimals)\\n    mapping(address => mapping(uint256 => int256)) private balances;\\n\\n    constructor(IERC20Metadata _ua) {\\n        if (address(_ua) == address(0)) revert Vault_ZeroAddressConstructor(0);\\n\\n        UA = _ua;\\n        addWhiteListedCollateral(_ua, 1e18, type(uint256).max);\\n    }\\n\\n    modifier onlyClearingHouse() {\\n        if (msg.sender != address(clearingHouse)) revert Vault_SenderNotClearingHouse();\\n        _;\\n    }\\n\\n    modifier onlyClearingHouseOrInsurance() {\\n        if (msg.sender != address(clearingHouse) && msg.sender != address(insurance))\\n            revert Vault_SenderNotClearingHouseNorInsurance();\\n        _;\\n    }\\n\\n    /* ****************** */\\n    /*     User flow      */\\n    /* ****************** */\\n\\n    /// @notice Deposit reserveTokens to account\\n    /// @dev No differentiated treatment of deposit in the UA token and other collaterals\\n    /// @param user Account to deposit to\\n    /// @param amount Amount to be used as the collateral of the position. Might not be 18 decimals\\n    /// @param depositToken Token to be used for the collateral of the position\\n    function deposit(\\n        address user,\\n        uint256 amount,\\n        IERC20Metadata depositToken\\n    ) external override onlyClearingHouse {\\n        return _deposit(user, amount, depositToken);\\n    }\\n\\n    /// @notice Withdraw all tokens from account\\n    /// @param user Account to withdraw from\\n    /// @param withdrawToken Token to be withdrawn from the vault\\n    function withdrawAll(address user, IERC20Metadata withdrawToken) external override onlyClearingHouse {\\n        uint256 tokenIdx = tokenToCollateralIdx[withdrawToken];\\n        if (!((tokenIdx != 0) || (address(withdrawToken) == address(UA)))) revert Vault_UnsupportedCollateral();\\n\\n        int256 fullAmount = balances[user][tokenIdx];\\n\\n        return _withdraw(user, fullAmount.toUint256(), withdrawToken);\\n    }\\n\\n    /// @notice Withdraw tokens from account\\n    /// @dev Unlike `deposit`, differentiated treatment of withdrawals in the UA token and other collaterals\\n    /// @param user Account to withdraw from\\n    /// @param amount Amount to withdraw from the vault. Might not be 18 decimals (decimals of the token)\\n    /// @param withdrawToken Token to be withdrawn from the vault\\n    function withdraw(\\n        address user,\\n        uint256 amount,\\n        IERC20Metadata withdrawToken\\n    ) external override onlyClearingHouse {\\n        uint256 tokenIdx = tokenToCollateralIdx[withdrawToken];\\n        if (!((tokenIdx != 0) || (address(withdrawToken) == address(UA)))) revert Vault_UnsupportedCollateral();\\n\\n        uint256 tokenAmount = LibReserve.tokenToWad(whiteListedCollaterals[tokenIdx].decimals, amount);\\n        _withdraw(user, tokenAmount, withdrawToken);\\n    }\\n\\n    /// @notice Allow liquidator to buy back collateral(s) of liquidated user at discounted price whereby settling his debt\\n    /// @param liquidator Liquidator\\n    /// @param liquidatee Liquidatee\\n    function settleLiquidationOnCollaterals(address liquidator, address liquidatee)\\n        external\\n        override\\n        onlyClearingHouse\\n    {\\n        int256 balance = balances[liquidatee][UA_IDX];\\n\\n        uint256 debtSize = (-balance).toUint256();\\n\\n        Collateral[] storage collaterals = whiteListedCollaterals;\\n        int256 collateralBalance;\\n\\n        // we only liquidate users who have a UA debt\\n        for (uint256 i = 1; i < collaterals.length; i++) {\\n            collateralBalance = balances[liquidatee][i];\\n\\n            if (collateralBalance > 0) {\\n                // take the discounted value\\n                uint256 collateralLiquidationValue = (\\n                    _getUndiscountedCollateralUSDValue(collaterals[i].asset, collateralBalance).toUint256()\\n                ).wadMul(clearingHouse.liquidationDiscount());\\n\\n                if (collateralLiquidationValue < debtSize) {\\n                    // sell 100% of the collateral\\n                    debtSize -= _sellCollateral(\\n                        liquidator,\\n                        liquidatee,\\n                        collaterals[i],\\n                        collateralBalance.toUint256(),\\n                        collateralLiquidationValue // uaDebtSettled\\n                    );\\n                } else {\\n                    // sell only what is needed of the collateral to cover debtSize\\n                    uint256 collateralSellRatio = debtSize.wadDiv(collateralLiquidationValue);\\n                    uint256 collateralAmountToSell = (collateralBalance.wadMul(collateralSellRatio.toInt256()))\\n                        .toUint256();\\n\\n                    _sellCollateral(liquidator, liquidatee, collaterals[i], collateralAmountToSell, debtSize);\\n                    debtSize = 0;\\n\\n                    break;\\n                }\\n            }\\n        }\\n\\n        // if combined USD value of the liquidatee collaterals < his debtSize,\\n        // Insurance must step in to maintain solvency of the Vault\\n        if (debtSize > 0) {\\n            insurance.settleDebt(debtSize);\\n            _changeBalance(liquidatee, UA_IDX, debtSize.toInt256());\\n\\n            emit TraderBadDebtGenerated(liquidatee, debtSize);\\n        }\\n    }\\n\\n    /// @notice Withdraw tokens from account\\n    /// @param user Account to apply the PnL to\\n    /// @param amount PnL amount in UA to apply. 18 decimals\\n    function settlePnL(address user, int256 amount) external override onlyClearingHouse {\\n        _changeBalance(user, UA_IDX, amount);\\n    }\\n\\n    /// @notice Transfer UA tokens from the vault\\n    /// @notice The balance of the user from whom the UA tokens are been withdrawn must be updated (separately)\\n    /// @param user Account to withdraw UA tokens to\\n    /// @param amount Amount of UA tokens to be withdrawn. 18 decimals\\n    function transferUa(address user, uint256 amount) external override onlyClearingHouseOrInsurance {\\n        whiteListedCollaterals[UA_IDX].currentAmount -= amount;\\n        UA.safeTransfer(user, amount);\\n    }\\n\\n    /* ****************** */\\n    /*     Governance     */\\n    /* ****************** */\\n\\n    function setClearingHouse(IClearingHouse newClearingHouse) external override onlyRole(GOVERNANCE) {\\n        if (address(newClearingHouse) == address(0)) revert Vault_ClearingHouseZeroAddress();\\n        clearingHouse = newClearingHouse;\\n        emit ClearingHouseChanged(newClearingHouse);\\n    }\\n\\n    function setInsurance(IInsurance newInsurance) external override onlyRole(GOVERNANCE) {\\n        if (address(newInsurance) == address(0)) revert Vault_InsuranceZeroAddress();\\n        insurance = newInsurance;\\n        emit InsuranceChanged(newInsurance);\\n    }\\n\\n    function setOracle(IOracle newOracle) external override onlyRole(GOVERNANCE) {\\n        if (address(newOracle) == address(0)) revert Vault_OracleZeroAddress();\\n        oracle = newOracle;\\n        emit OracleChanged(newOracle);\\n    }\\n\\n    /// @notice Add a new token to the list of white listed ERC20 which can be used as collaterals\\n    function addWhiteListedCollateral(\\n        IERC20Metadata asset,\\n        uint256 weight,\\n        uint256 maxAmount\\n    ) public override onlyRole(GOVERNANCE) {\\n        if (weight < 1e16) revert Vault_InsufficientCollateralWeight();\\n        if (weight > 1e18) revert Vault_ExcessiveCollateralWeight();\\n\\n        for (uint256 i = 0; i < whiteListedCollaterals.length; i++) {\\n            if (whiteListedCollaterals[i].asset == asset) revert Vault_CollateralAlreadyWhiteListed();\\n        }\\n\\n        whiteListedCollaterals.push(\\n            Collateral({\\n                asset: asset,\\n                weight: weight,\\n                decimals: asset.decimals(),\\n                currentAmount: 0,\\n                maxAmount: maxAmount\\n            })\\n        );\\n        tokenToCollateralIdx[asset] = whiteListedCollaterals.length - 1;\\n\\n        emit CollateralAdded(asset, weight, maxAmount);\\n    }\\n\\n    /// @notice Change weight of a white listed collateral\\n    ///         Useful as a risk mitigation measure in case one collateral drops in value\\n    function changeCollateralWeight(IERC20Metadata asset, uint256 newWeight) external override onlyRole(GOVERNANCE) {\\n        uint256 tokenIdx = tokenToCollateralIdx[asset];\\n        if (!((tokenIdx != 0) || (address(asset) == address(UA)))) revert Vault_UnsupportedCollateral();\\n\\n        if (newWeight < 1e16) revert Vault_InsufficientCollateralWeight();\\n        if (newWeight > 1e18) revert Vault_ExcessiveCollateralWeight();\\n\\n        whiteListedCollaterals[tokenIdx].weight = newWeight;\\n\\n        emit CollateralWeightChanged(asset, newWeight);\\n    }\\n\\n    /// @notice Change max amount of a white listed collateral\\n    ///         Useful as a risk mitigation measure in case one collateral drops in value\\n    function changeCollateralMaxAmount(IERC20Metadata asset, uint256 newMaxAmount)\\n        external\\n        override\\n        onlyRole(GOVERNANCE)\\n    {\\n        uint256 tokenIdx = tokenToCollateralIdx[asset];\\n        if (!((tokenIdx != 0) || (address(asset) == address(UA)))) revert Vault_UnsupportedCollateral();\\n\\n        whiteListedCollaterals[tokenIdx].maxAmount = newMaxAmount;\\n\\n        emit CollateralMaxAmountChanged(asset, newMaxAmount);\\n    }\\n\\n    /* ****************** */\\n    /*   User getter      */\\n    /* ****************** */\\n\\n    /// @notice Get the balance of a trader, accounted for in USD. 18 decimals\\n    /// @param user User address\\n    /// @param isDiscounted Whether or not the reserve value should be discounted by the weight of the collateral\\n    /// @return reserveValue Value of collaterals in USD. 18 decimals\\n    function getReserveValue(address user, bool isDiscounted) external view override returns (int256) {\\n        return _getUserReserveValue(user, isDiscounted);\\n    }\\n\\n    function getBalance(address user, uint256 tokenIdx) external view override returns (int256) {\\n        return balances[user][tokenIdx];\\n    }\\n\\n    function getDiscountedCollateralUSDValue(uint256 tokenIdx, int256 collateralBalance)\\n        external\\n        view\\n        override\\n        returns (int256)\\n    {\\n        if (tokenIdx > whiteListedCollaterals.length - 1) revert Vault_UnsupportedCollateral();\\n\\n        return\\n            _getDiscountedCollateralUSDValue(\\n                whiteListedCollaterals[tokenIdx].asset,\\n                whiteListedCollaterals[tokenIdx].weight,\\n                collateralBalance\\n            );\\n    }\\n\\n    /* ****************** */\\n    /*   Global getter    */\\n    /* ****************** */\\n\\n    /// @notice Get all value of all tokens deposited into the vault\\n    /// @return Total Value Locked (tvl) in USD. 18 decimals\\n    function getTotalValueLocked() external view override returns (int256) {\\n        Collateral[] storage collaterals = whiteListedCollaterals;\\n        int256 tvl = 0;\\n\\n        for (uint256 i = 0; i < collaterals.length; i++) {\\n            int256 collateralBalance = collaterals[i].currentAmount.toInt256();\\n\\n            if (collateralBalance > 0) {\\n                tvl += _getUndiscountedCollateralUSDValue(collaterals[i].asset, collateralBalance);\\n            }\\n        }\\n\\n        return tvl;\\n    }\\n\\n    /// @notice Get one collateral token available for margin trading\\n    /// @return Collateral The collateral at the index provided\\n    function getWhiteListedCollateral(uint256 idx) external view override returns (Collateral memory) {\\n        return whiteListedCollaterals[idx];\\n    }\\n\\n    /// @notice Get all collateral tokens available for margin trading\\n    /// @return List of Collateral tokens\\n    function getNumberOfCollaterals() external view override returns (uint256) {\\n        return whiteListedCollaterals.length;\\n    }\\n\\n    /* ****************** */\\n    /*   Internal Fcts    */\\n    /* ****************** */\\n\\n    function _deposit(\\n        address user,\\n        uint256 amount,\\n        IERC20Metadata depositToken\\n    ) internal {\\n        uint256 tokenIdx = tokenToCollateralIdx[depositToken];\\n        if (!((tokenIdx != 0) || (address(depositToken) == address(UA)))) revert Vault_UnsupportedCollateral();\\n\\n        Collateral storage coll = whiteListedCollaterals[tokenIdx];\\n        uint256 wadAmount = LibReserve.tokenToWad(coll.decimals, amount);\\n\\n        if (coll.currentAmount + wadAmount > coll.maxAmount) revert Vault_MaxCollateralAmountExceeded();\\n        whiteListedCollaterals[tokenIdx].currentAmount += wadAmount;\\n\\n        _changeBalance(user, tokenIdx, wadAmount.toInt256());\\n\\n        IERC20Metadata(depositToken).safeTransferFrom(user, address(this), amount);\\n\\n        emit Deposit(user, address(depositToken), amount);\\n    }\\n\\n    function _withdraw(\\n        address user,\\n        uint256 amount, // 1e18\\n        IERC20Metadata withdrawToken\\n    ) internal {\\n        uint256 tokenIdx = tokenToCollateralIdx[withdrawToken];\\n        if (!((tokenIdx != 0) || (address(withdrawToken) == address(UA)))) revert Vault_UnsupportedCollateral();\\n\\n        // user can't withdraw his collateral with a UA debt\\n        int256 uaBalance = balances[user][UA_IDX];\\n        if (uaBalance < 0) revert Vault_UADebt();\\n\\n        // user can't withdraw more than his collateral balance\\n        int256 collateralBalance = balances[user][tokenIdx];\\n        if (amount.toInt256() > collateralBalance) revert Vault_WithdrawExcessiveAmount();\\n\\n        if (amount > whiteListedCollaterals[tokenIdx].currentAmount) revert Vault_InsufficientBalance();\\n        whiteListedCollaterals[tokenIdx].currentAmount -= amount;\\n        _changeBalance(user, tokenIdx, -amount.toInt256());\\n\\n        uint256 tokenAmount = LibReserve.wadToToken(whiteListedCollaterals[tokenIdx].decimals, amount);\\n\\n        // transfer funds to user, whatever the collateral used\\n        IERC20Metadata(withdrawToken).safeTransfer(user, tokenAmount);\\n        emit Withdraw(user, address(withdrawToken), tokenAmount);\\n    }\\n\\n    /// @notice Sell liquidatee collateral at a discount to a liquidator willing to buy it in UA\\n    /// @param liquidator Liquidator\\n    /// @param liquidatee Liquidatee\\n    /// @param collateral Collateral to be sold\\n    /// @param collateralAmountToSell Collateral amount to be sold\\n    /// @param uaDebtSettled UA amount at which to buy the collateral\\n    function _sellCollateral(\\n        address liquidator,\\n        address liquidatee,\\n        Collateral storage collateral,\\n        uint256 collateralAmountToSell,\\n        uint256 uaDebtSettled\\n    ) internal returns (uint256) {\\n        // liquidatee receives a discounted value of his collateral in UA\\n        _changeBalance(liquidatee, UA_IDX, uaDebtSettled.toInt256());\\n        _changeBalance(liquidatee, tokenToCollateralIdx[collateral.asset], -collateralAmountToSell.toInt256());\\n\\n        // liquidator receives the real value of the collateral\\n        IERC20Metadata(UA).safeTransferFrom(liquidator, address(this), uaDebtSettled);\\n        _changeBalance(liquidator, tokenToCollateralIdx[collateral.asset], collateralAmountToSell.toInt256());\\n\\n        return uaDebtSettled;\\n    }\\n\\n    function _changeBalance(\\n        address user,\\n        uint256 tokenIdx,\\n        int256 amount\\n    ) internal {\\n        balances[user][tokenIdx] += amount;\\n    }\\n\\n    /// @notice Get the full collateral value of a trader, accounted for in USD. 18 decimals\\n    /// @dev Discount collateral when evaluating the value of a collateral. Don't discount when selling the collateral.\\n    /// @param user User address\\n    /// @param isDiscounted Whether or not the collateral value should be discounted by its weight\\n    /// @return reserveValue Value of collaterals in USD. 18 decimals\\n    function _getUserReserveValue(address user, bool isDiscounted) internal view returns (int256) {\\n        Collateral[] storage collaterals = whiteListedCollaterals;\\n        int256 collateralBalance;\\n\\n        int256 reserveValue = 0;\\n        for (uint256 i = 0; i < collaterals.length; i++) {\\n            collateralBalance = balances[user][i];\\n\\n            // user might have a negative UA balance\\n            if (collateralBalance != 0) {\\n                if (isDiscounted) {\\n                    reserveValue += _getDiscountedCollateralUSDValue(\\n                        collaterals[i].asset,\\n                        collaterals[i].weight,\\n                        collateralBalance\\n                    );\\n                } else {\\n                    reserveValue += _getUndiscountedCollateralUSDValue(collaterals[i].asset, collateralBalance);\\n                }\\n            }\\n        }\\n\\n        return reserveValue;\\n    }\\n\\n    /// @notice Return collateral value in USD discounted by its weight, normalized to 18 decimals\\n    /// @param collateralAsset Collateral asset to evaluate\\n    /// @param collateralWeight Weight of the collateral to evaluate\\n    /// @param collateralBalance Balance in the collateral. 18 decimals\\n    /// @return collateralUSDValue Value of the collateral in USD. 18 decimals\\n    function _getDiscountedCollateralUSDValue(\\n        IERC20Metadata collateralAsset,\\n        uint256 collateralWeight,\\n        int256 collateralBalance\\n    ) internal view returns (int256) {\\n        // collateralUSDValue = collateralBalance * weight * oracleUSDPrice\\n        int256 weightedCollateralBalance = collateralBalance.wadMul(collateralWeight.toInt256());\\n        int256 usdPricePerUnit = oracle.getPrice(address(collateralAsset), collateralBalance);\\n\\n        return weightedCollateralBalance.wadMul(usdPricePerUnit);\\n    }\\n\\n    /// @notice Evaluate the Y USD price at which to sell X quantity of a given collateral\\n    /// @dev As a reminder, USD value = UA value\\n    /// @dev Same as _getDiscountedCollateralUSDValue, except without weight\\n    /// @param collateralAsset Collateral asset to evaluate\\n    /// @param collateralBalance Balance in the collateral. 18 decimals\\n    /// @return collateralUSDValue Value of the collateral in USD. 18 decimals\\n    function _getUndiscountedCollateralUSDValue(IERC20Metadata collateralAsset, int256 collateralBalance)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        int256 usdPricePerUnit = oracle.getPrice(address(collateralAsset), collateralBalance);\\n        return collateralBalance.wadMul(usdPricePerUnit);\\n    }\\n}\\n\",\"keccak256\":\"0x0386bb207ccc8c25c733332872e47a845e4bc23d8c4ffdc26c1d2266e709ed35\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IClearingHouse.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\nimport {IPerpetual} from \\\"./IPerpetual.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IStakingContract} from \\\"./IStakingContract.sol\\\";\\n\\n// libraries\\nimport {LibPerpetual} from \\\"../lib/LibPerpetual.sol\\\";\\n\\ninterface IClearingHouse {\\n    struct ClearingHouseParams {\\n        int256 minMargin;\\n        int256 minMarginAtCreation;\\n        uint256 minPositiveOpenNotional;\\n        uint256 liquidationReward;\\n        uint256 insuranceRatio;\\n        uint256 liquidationRewardInsuranceShare;\\n        uint256 liquidationDiscount;\\n        int256 nonUACollSeizureDiscount;\\n        int256 uaDebtSeizureThreshold;\\n    }\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided\\n    error ClearingHouse_ZeroAddress();\\n\\n    /// @notice Emitted when passing the address of a perpetual market which has already been added\\n    error ClearingHouse_PerpetualMarketAlreadyAssigned();\\n\\n    /// @notice Emitted when there is not enough margin to withdraw the requested amount\\n    error ClearingHouse_WithdrawInsufficientMargin();\\n\\n    /// @notice Emitted when the position is not reduced entirely using closePositionWithdrawCollateral\\n    error ClearingHouse_ClosePositionStillOpen();\\n\\n    /// @notice Emitted when the liquidatee does not have an open position\\n    error ClearingHouse_LiquidateInvalidPosition();\\n\\n    /// @notice Emitted when the margin of the liquidatee's position is still valid\\n    error ClearingHouse_LiquidateValidMargin();\\n\\n    /// @notice Emitted when the attempted liquidation does not close the full position\\n    error ClearingHouse_LiquidateInsufficientProposedAmount();\\n\\n    /// @notice Emitted when attempting to seize collateral of a user with an open position\\n    error ClearingHouse_SeizeCollateralStillOpen();\\n\\n    /// @notice Emitted when a user attempts to provide liquidity with amount equal to 0\\n    error ClearingHouse_ProvideLiquidityZeroAmount();\\n\\n    /// @notice Emitted when a user attempts to provide liquidity with amount larger than his free collateral or collateral balance\\n    error ClearingHouse_AmountProvidedTooLarge();\\n\\n    /// @notice Emitted when a user attempts to withdraw more liquidity than they have\\n    error ClearingHouse_RemoveLiquidityInsufficientFunds();\\n\\n    /// @notice Emitted when vault withdrawal is unsuccessful\\n    error ClearingHouse_VaultWithdrawUnsuccessful();\\n\\n    /// @notice Emitted when the proposed minMargin is too low\\n    error ClearingHouse_InsufficientMinMargin();\\n\\n    /// @notice Emitted when the proposed minMargin is too high\\n    error ClearingHouse_ExcessiveMinMargin();\\n\\n    error ClearingHouse_ExcessivePositiveOpenNotional();\\n\\n    /// @notice Emitted when the proposed minMarginAtCreation is too low\\n    error ClearingHouse_InsufficientMinMarginAtCreation();\\n\\n    /// @notice Emitted when the proposed minMarginAtCreation is too low\\n    error ClearingHouse_ExcessiveMinMarginAtCreation();\\n\\n    /// @notice Emitted when the proposed liquidation reward is too low\\n    error ClearingHouse_InsufficientLiquidationReward();\\n\\n    /// @notice Emitted when the proposed liquidation reward is too high\\n    error ClearingHouse_ExcessiveLiquidationReward();\\n\\n    /// @notice Emitted when the proposed insurance ratio is too low\\n    error ClearingHouse_InsufficientInsuranceRatio();\\n\\n    /// @notice Emitted when the proposed insurance ratio is too high\\n    error ClearingHouse_ExcessiveInsuranceRatio();\\n\\n    /// @notice Emitted when the proposed share of the liquidation reward for the insurance is too high\\n    error ClearingHouse_ExcessiveLiquidationRewardInsuranceShare();\\n\\n    /// @notice Emitted when the difference between liquidationDiscount and nonUACollSeizureDiscount isn't large enough\\n    error ClearingHouse_InsufficientDiffBtwLiquidationDiscountAndNonUACollSeizureDiscount();\\n\\n    /// @notice Emitted when the proposed UA debt limit is lower than the minimum acceptable value\\n    error ClearingHouse_InsufficientUaDebtSeizureThreshold();\\n\\n    /// @notice Emitted when a user attempts to extend their position with amount equal to 0\\n    error ClearingHouse_ExtendPositionZeroAmount();\\n\\n    /// @notice Emitted when there is not enough margin to extend to the proposed position amount\\n    error ClearingHouse_ExtendPositionInsufficientMargin();\\n\\n    /// @notice Emitted when a user attempts to reduce their position with amount equal to 0\\n    error ClearingHouse_ReducePositionZeroAmount();\\n\\n    error ClearingHouse_ChangePositionZeroAmount();\\n\\n    /// @notice Emitted when a user tries to open a position with an incorrect open notional amount\\n    error ClearingHouse_UnderOpenNotionalAmountRequired();\\n\\n    /// @notice Emitted when a collateral liquidation for a user with no UA debt is tried\\n    error ClearingHouse_LiquidationDebtSizeZero();\\n\\n    /// @notice Emitted when a liquidator tries seizing collateral of user with sufficient collaterals level\\n    error ClearingHouse_SufficientUserCollateral();\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when new perpetual market is added\\n    /// @param perpetual New perpetual market\\n    /// @param numPerpetuals Number of perpetual markets\\n    event MarketAdded(IPerpetual indexed perpetual, uint256 numPerpetuals);\\n\\n    /// @notice Emitted when a position is extended/opened\\n    /// @param idx Index of the perpetual market\\n    /// @param user User who deposited collateral\\n    /// @param direction Whether the position is LONG or SHORT\\n    /// @param addedOpenNotional Notional (USD assets/debt) added to the position\\n    /// @param addedPositionSize positionSize (Base assets/debt) added to the position\\n    /// @param profit Sum of pnL + tradingFeesPayed + fundingPaymentsPaid\\n    /// @param isPositionIncreased Whether the position was extended or reduced / reversed\\n    event ChangePosition(\\n        uint256 indexed idx,\\n        address indexed user,\\n        LibPerpetual.Side direction,\\n        int256 addedOpenNotional,\\n        int256 addedPositionSize,\\n        int256 profit,\\n        bool isPositionIncreased\\n    );\\n\\n    /// @notice Emitted when a trader position is liquidated\\n    /// @param idx Index of the perpetual market\\n    /// @param liquidatee User who gets liquidated\\n    /// @param liquidator User who is liquidating\\n    /// @param notional Notional amount of the liquidatee\\n    event LiquidationCall(\\n        uint256 indexed idx,\\n        address indexed liquidatee,\\n        address indexed liquidator,\\n        uint256 notional\\n    );\\n\\n    /// @notice Emitted when a trader position is liquidated\\n    /// @param liquidatee User who gets liquidated\\n    /// @param liquidator User who is liquidating\\n    event SeizeCollateral(address indexed liquidatee, address indexed liquidator);\\n\\n    /// @notice Emitted when (additional) liquidity is provided\\n    /// @param idx Index of the perpetual market\\n    /// @param liquidityProvider User who provides liquidity\\n    /// @param quoteAmount vQuote amount (i.e. USD amount) to be added to the targeted market\\n    /// @param baseAmount vBase amount (i.e. Base amount) to be added to the targeted market\\n    event LiquidityProvided(\\n        uint256 indexed idx,\\n        address indexed liquidityProvider,\\n        uint256 quoteAmount,\\n        uint256 baseAmount\\n    );\\n\\n    /// @notice Emitted when liquidity is removed\\n    /// @param idx Index of the perpetual market\\n    /// @param liquidityProvider User who provides liquidity\\n    /// @param reductionRatio Pourcentage of previous position reduced\\n    event LiquidityRemoved(uint256 indexed idx, address indexed liquidityProvider, uint256 reductionRatio);\\n\\n    /// @notice Emitted when dust is sold by governance\\n    /// @param idx Index of the perpetual market\\n    /// @param profit Amount of profit generated by the dust sale. 18 decimals\\n    event DustSold(uint256 indexed idx, int256 profit);\\n\\n    /// @notice Emitted when parameters are changed\\n    event ClearingHouseParametersChanged(\\n        int256 newMinMargin,\\n        int256 newMinMarginAtCreation,\\n        uint256 newMinPositiveOpenNotional,\\n        uint256 newLiquidationReward,\\n        uint256 newInsuranceRatio,\\n        uint256 newLiquidationRewardInsuranceShare,\\n        uint256 newLiquidationDiscount,\\n        int256 nonUACollSeizureDiscount,\\n        int256 uaDebtSeizureThreshold\\n    );\\n\\n    event StakingContractChanged(IStakingContract newStakingContract);\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function vault() external view returns (IVault);\\n\\n    function insurance() external view returns (IInsurance);\\n\\n    function perpetuals(uint256 idx) external view returns (IPerpetual);\\n\\n    function stakingContract() external view returns (IStakingContract);\\n\\n    function getNumMarkets() external view returns (uint256);\\n\\n    function minMargin() external view returns (int256);\\n\\n    function minMarginAtCreation() external view returns (int256);\\n\\n    function minPositiveOpenNotional() external view returns (uint256);\\n\\n    function liquidationReward() external view returns (uint256);\\n\\n    function insuranceRatio() external view returns (uint256);\\n\\n    function liquidationRewardInsuranceShare() external view returns (uint256);\\n\\n    function liquidationDiscount() external view returns (uint256);\\n\\n    function nonUACollSeizureDiscount() external view returns (int256);\\n\\n    function uaDebtSeizureThreshold() external view returns (int256);\\n\\n    function getPnLAcrossMarkets(address account) external view returns (int256);\\n\\n    function getDebtAcrossMarkets(address account) external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function allowListPerpetual(IPerpetual perp) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function sellDust(\\n        uint256 idx,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external;\\n\\n    function setParameters(ClearingHouseParams memory params) external;\\n\\n    function addStakingContract(IStakingContract staking) external;\\n\\n    function deposit(uint256 amount, IERC20Metadata token) external;\\n\\n    function withdraw(uint256 amount, IERC20Metadata token) external;\\n\\n    function withdrawAll(IERC20Metadata token) external;\\n\\n    function changePosition(\\n        uint256 idx,\\n        uint256 amount,\\n        uint256 minAmount,\\n        LibPerpetual.Side direction\\n    ) external;\\n\\n    function extendPositionWithCollateral(\\n        uint256 idx,\\n        uint256 collateralAmount,\\n        IERC20Metadata token,\\n        uint256 positionAmount,\\n        LibPerpetual.Side direction,\\n        uint256 minAmount\\n    ) external;\\n\\n    function closePositionWithdrawCollateral(\\n        uint256 idx,\\n        uint256 proposedAmount,\\n        uint256 minAmount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function openReversePosition(\\n        uint256 idx,\\n        uint256 closeProposedAmount,\\n        uint256 closeMinAmount,\\n        uint256 openProposedAmount,\\n        uint256 openMinAmount,\\n        LibPerpetual.Side direction\\n    ) external;\\n\\n    function liquidate(\\n        uint256 idx,\\n        address liquidatee,\\n        uint256 proposedAmount,\\n        bool isTrader\\n    ) external;\\n\\n    function seizeCollateral(address liquidatee) external;\\n\\n    function provideLiquidity(\\n        uint256 idx,\\n        uint256[2] calldata amounts,\\n        uint256 minLpAmount\\n    ) external;\\n\\n    function removeLiquidity(\\n        uint256 idx,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5b42c943b3bc17c9f30a485892abc1e37227a1d782f2572fbb90ac74fb2a8f41\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ICryptoSwap.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n/// @dev Contract https://github.com/curvefi/curve-crypto-contract/blob/master/deployment-logs/2021-11-01.%20EURS%20on%20mainnet/CryptoSwap.vy\\ninterface ICryptoSwap {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function price_oracle() external view returns (uint256);\\n\\n    function mid_fee() external view returns (uint256);\\n\\n    function out_fee() external view returns (uint256);\\n\\n    function admin_fee() external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    // Swap token i to j with amount dx and min amount min_dy\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external returns (uint256); // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external; // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\\n\\n    function last_prices() external view returns (uint256);\\n\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5952e746ce8024e5ad42258df6c5adfcf61302c0e776c6682c64fdb3332bc1ba\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IIncreAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IIncreAccessControl is IAccessControl {\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function isGovernor(address account) external view returns (bool);\\n\\n    function isManager(address account) external view returns (bool);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0xb5ae4cbf7c064a5408ccff0ad110e69607a273c4b121f6d35edf11539c2ddfcd\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\ninterface IInsurance {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Insurance_ZeroAddressConstructor(uint8 paramIndex);\\n\\n    /// @notice Emitted when the sender is not the vault address\\n    error Insurance_SenderNotVault();\\n\\n    /// @notice Emitted when the sender is not the clearingHouse address\\n    error Insurance_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when the balance of the vault is less than the amount to be settled\\n    error Insurance_InsufficientBalance();\\n\\n    /// @notice Emitted when locked insurance falls below insurance ratio\\n    error Insurance_InsufficientInsurance();\\n\\n    /// @notice Emitted when the proposed clearingHouse address is equal to the zero address\\n    error Insurance_ClearingHouseZeroAddress();\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when a new ClearingHouse is connected to the issuer\\n    /// @param newClearingHouse New ClearingHouse contract address\\n    event ClearingHouseChanged(IClearingHouse newClearingHouse);\\n\\n    /// @notice Emitted when (exceeding) insurance reserves are withdrawn by governance\\n    /// @param amount Amount of insurance reserves withdrawn. 18 decimals\\n    event InsuranceRemoved(uint256 amount);\\n\\n    /// @notice Emitted when a bail out cant be fully served\\n    /// @param newSystemDebt New amount of system debt. 18 decimals (accounted for in UA)\\n    event SystemDebtChanged(uint256 newSystemDebt);\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function fundInsurance(uint256 amount) external;\\n\\n    function settleDebt(uint256 amount) external;\\n\\n    function removeInsurance(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa11803c6a6dde11512822c0a5c16dc1210576651223404f807424ee511d189c7\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/// @notice Oracle interface created to ease oracle contract switch\\ninterface IOracle {\\n    struct AssetOracle {\\n        uint24 heartBeat;\\n        AggregatorV3Interface aggregator; // aggregator of the ERC20 token for ERC4626 tokens\\n        bool isVaultAsset;\\n        int256 fixedPrice;\\n    }\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when oracle heart beat is updated\\n    /// @param asset Asset that got linked to an oracle\\n    /// @param aggregator Chainlink aggregator used as the asset oracle\\n    /// @param isVault True if the asset is a ERC-4626 vault asset\\n    event OracleUpdated(address asset, AggregatorV3Interface aggregator, bool isVault);\\n\\n    /// @notice Emitted when an asset got a fixed price when requesting an oracle\\n    /// @param asset Asset which got a fixed price\\n    /// @param fixedPrice Fixed price that the asset got\\n    event AssetGotFixedPrice(address asset, int256 fixedPrice);\\n\\n    /// @notice Emitted when oracle heart beat is updated\\n    /// @param asset Asset whose heartBeat is updated\\n    /// @param newHeartBeat New heart beat value\\n    event HeartBeatUpdated(address asset, uint24 newHeartBeat);\\n\\n    /// @notice Emitted when sequencer uptime feed is updated\\n    /// @param newSequencerUptimeFeed New sequencer uptime feed\\n    event SequencerUptimeFeedUpdated(AggregatorV3Interface newSequencerUptimeFeed);\\n\\n    /// @notice Emitted when grace period is updated\\n    /// @param newGracePeriod New grace period\\n    event GracePeriodUpdated(uint256 newGracePeriod);\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the latest round is incomplete\\n    error Oracle_InvalidRoundTimestamp();\\n\\n    /// @notice Emitted when the latest round's price is invalid\\n    error Oracle_InvalidRoundPrice();\\n\\n    /// @notice Emitted when the latest round's data is older than the oracle's max refresh time\\n    error Oracle_DataNotFresh();\\n\\n    /// @notice Emitted when the proposed asset address is equal to the zero address\\n    error Oracle_AssetZeroAddress();\\n\\n    /// @notice Emitted when the proposed aggregator address is equal to the zero address\\n    error Oracle_AggregatorZeroAddress();\\n\\n    /// @notice Emitted when the proposed sequencer uptime feed address is equal to the zero address\\n    error Oracle_SequencerUptimeFeedZeroAddress();\\n\\n    /// @notice Emitted when owner tries to set fixed price to an unsupported asset\\n    error Oracle_UnsupportedAsset();\\n\\n    /// @notice Emitted when Zksync sequencer is down\\n    error Oracle_SequencerDown();\\n\\n    /// @notice Emitted when Zksync sequencer hasn't been back up for long enough\\n    error Oracle_GracePeriodNotOver();\\n\\n    /// @notice Emitted when proposed grace period doesn't fit in the defined bounds\\n    error Oracle_IncorrectGracePeriod();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function gracePeriod() external view returns (uint256);\\n\\n    function sequencerUptimeFeed() external view returns (AggregatorV3Interface);\\n\\n    function getPrice(address asset, int256 erc4626Shares) external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function setOracle(\\n        address asset,\\n        AggregatorV3Interface aggregator,\\n        uint24 heartBeat,\\n        bool isVault\\n    ) external;\\n\\n    function setFixedPrice(address asset, int256 fixedPrice) external;\\n\\n    function setHeartBeat(address asset, uint24 newHeartBeat) external;\\n\\n    function setSequencerUptimeFeed(AggregatorV3Interface newSequencerUptimeFeed) external;\\n\\n    function setGracePeriod(uint256 newGracePeriod) external;\\n}\\n\",\"keccak256\":\"0x10beffd43046f42d1f2325e37d2926a42fbfd5d26b37943c0ec38c3421817a60\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPerpetual.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IVBase} from \\\"./IVBase.sol\\\";\\nimport {IVQuote} from \\\"./IVQuote.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\n// libraries\\nimport {LibPerpetual} from \\\"../lib/LibPerpetual.sol\\\";\\n\\ninterface IPerpetual {\\n    struct PerpetualParams {\\n        uint256 riskWeight;\\n        uint256 maxLiquidityProvided;\\n        uint256 twapFrequency;\\n        int256 sensitivity;\\n        uint256 maxBlockTradeAmount;\\n        int256 insuranceFee;\\n        int256 tradingFee;\\n        int256 lpDebtCoef;\\n        uint256 lockPeriod;\\n    }\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Perpetual_ZeroAddressConstructor(uint256 paramIndex);\\n\\n    /// @notice Emitted when the constructor fails to give approval of a virtual token to the market\\n    error Perpetual_VirtualTokenApprovalConstructor(uint256 tokenIndex);\\n\\n    /// @notice Emitted when market mid fee does not equal out fee\\n    error Perpetual_MarketEqualFees();\\n\\n    /// @notice Emitted when the curve admin fee is invalid\\n    error Perpetual_InvalidAdminFee();\\n\\n    /// @notice Emitted when the sender is not the clearing house\\n    error Perpetual_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when the sender is not the clearing house owner\\n    error Perpetual_SenderNotClearingHouseOwner();\\n\\n    /// @notice Emitted when the user attempts to reduce their position using extendPosition\\n    error Perpetual_AttemptReducePosition();\\n\\n    /// @notice Emitted when the user attempts to reverse their position using changePosition\\n    error Perpetual_AttemptReversePosition();\\n\\n    /// @notice Emitted when the price impact of a position is too high\\n    error Perpetual_ExcessiveBlockTradeAmount();\\n\\n    /// @notice Emitted when the user does not have an open position\\n    error Perpetual_NoOpenPosition();\\n\\n    /// @notice Emitted when the user attempts to withdraw more liquidity than they have deposited\\n    error Perpetual_LPWithdrawExceedsBalance();\\n\\n    /// @notice Emitted when the proposed twap frequency is insufficient/excessive\\n    error Perpetual_TwapFrequencyInvalid(uint256 twapFrequency);\\n\\n    /// @notice Emitted when the proposed funding rate sensitivity is insufficient/excessive\\n    error Perpetual_SensitivityInvalid(int256 sensitivity);\\n\\n    /// @notice Emitted when the proposed maximum block trade amount is insufficient\\n    error Perpetual_MaxBlockAmountInvalid(uint256 maxBlockTradeAmount);\\n\\n    /// @notice Emitted when the proposed insurance fee is insufficient/excessive\\n    error Perpetual_InsuranceFeeInvalid(int256 fee);\\n\\n    /// @notice Emitted when the proposed trading fee is insufficient/excessive\\n    error Perpetual_TradingFeeInvalid(int256 fee);\\n\\n    /// @notice Emitted when the proposed lp debt coefficient is insufficient/excessive\\n    error Perpetual_LpDebtCoefInvalid(int256 lpDebtCoef);\\n\\n    /// @notice Emitted when the proposed lp lock period is insufficient/excessive\\n    error Perpetual_LockPeriodInvalid(uint256 lockPeriod);\\n\\n    /// @notice Emitted when a token balance of the market is lte 1\\n    error Perpetual_MarketBalanceTooLow();\\n\\n    /// @notice Emitted when the liquidity provider has an open position\\n    error Perpetual_LPOpenPosition();\\n\\n    /// @notice Emitted when proposed amount is greater than position size\\n    error Perpetual_ProposedAmountExceedsPositionSize();\\n\\n    /// @notice Emitted when proposed amount is greater than maxVQuoteAmount\\n    error Perpetual_ProposedAmountExceedsMaxMarketPrice();\\n\\n    /// @notice Emitted when the max tvl is reached\\n    error Perpetual_MaxLiquidityProvided();\\n\\n    /// @notice Emitted when the position exceeds the max position size\\n    error Perpetual_MaxPositionSize();\\n\\n    /// @notice Emitted when the user attempts provide liquidity with skewed ratios\\n    error Perpetual_LpAmountDeviation();\\n\\n    /// @notice Emitted when the user attempts remove liquidity too early\\n    error Perpetual_LockPeriodNotReached(uint256 withdrawTime);\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when twap is updated\\n    /// @param newOracleTwap Latest oracle Time-weighted-average-price\\n    /// @param newMarketTwap Latest market Time-weighted-average-price\\n    event TwapUpdated(int256 newOracleTwap, int256 newMarketTwap);\\n\\n    /// @notice Emitted when funding rate is updated\\n    /// @param cumulativeFundingRate Cumulative sum of all funding rate updates\\n    /// @param fundingRate Latest fundingRate update\\n    event FundingRateUpdated(int256 cumulativeFundingRate, int256 fundingRate);\\n\\n    /// @notice Emitted when swap with cryptoswap pool fails\\n    /// @param errorMessage Return error message\\n    event Log(string errorMessage);\\n\\n    /// @notice Emitted when (base) dust is generated\\n    /// @param vBaseAmount Amount of dust\\n    event DustGenerated(uint256 vBaseAmount);\\n\\n    /// @notice Emitted when parameters are changed\\n    event PerpetualParametersChanged(\\n        uint256 newRiskWeight,\\n        uint256 newMaxLiquidityProvided,\\n        uint256 newTwapFrequency,\\n        int256 newSensitivity,\\n        uint256 newMaxBlockTradeAmount,\\n        int256 newInsuranceFee,\\n        int256 newTradingFee,\\n        int256 newLpDebtCoef,\\n        uint256 lockPeriod\\n    );\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function market() external view returns (ICryptoSwap);\\n\\n    function vBase() external view returns (IVBase);\\n\\n    function vQuote() external view returns (IVQuote);\\n\\n    function clearingHouse() external view returns (IClearingHouse);\\n\\n    function maxLiquidityProvided() external view returns (uint256);\\n\\n    function riskWeight() external view returns (uint256);\\n\\n    function twapFrequency() external view returns (uint256);\\n\\n    function sensitivity() external view returns (int256);\\n\\n    function maxBlockTradeAmount() external view returns (uint256);\\n\\n    function maxPosition() external view returns (uint256);\\n\\n    function tradingFee() external view returns (int256);\\n\\n    function insuranceFee() external view returns (int256);\\n\\n    function lpDebtCoef() external view returns (int256);\\n\\n    function lockPeriod() external view returns (uint256);\\n\\n    function oracleTwap() external view returns (int256);\\n\\n    function marketTwap() external view returns (int256);\\n\\n    function getTraderPosition(address account) external view returns (LibPerpetual.TraderPosition memory);\\n\\n    function getLpPositionAfterWithdrawal(address account) external view returns (LibPerpetual.TraderPosition memory);\\n\\n    function getLpLiquidity(address account) external view returns (uint256);\\n\\n    function getLpPosition(address account) external view returns (LibPerpetual.LiquidityProviderPosition memory);\\n\\n    function getGlobalPosition() external view returns (LibPerpetual.GlobalPosition memory);\\n\\n    function getTraderUnrealizedPnL(address account) external view returns (int256);\\n\\n    function getTraderFundingPayments(address account) external view returns (int256);\\n\\n    function getLpUnrealizedPnL(address account) external view returns (int256);\\n\\n    function getLpFundingPayments(address account) external view returns (int256);\\n\\n    function getLpTradingFees(address account) external view returns (uint256);\\n\\n    function marketPrice() external view returns (uint256);\\n\\n    function indexPrice() external view returns (int256);\\n\\n    function getTotalLiquidityProvided() external view returns (uint256);\\n\\n    function getPendingPnL(address account) external view returns (int256 pnL);\\n\\n    function getUserDebt(address account) external view returns (int256 debt);\\n\\n    function isTraderPositionOpen(address account) external view returns (bool);\\n\\n    function isLpPositionOpen(address account) external view returns (bool);\\n\\n    function getLpOpenNotional(address account) external view returns (int256);\\n\\n    /* ************* */\\n    /*    Helpers    */\\n    /* ************* */\\n\\n    function removeLiquiditySwap(\\n        address user,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount\\n    ) external;\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function changePosition(\\n        address account,\\n        uint256 amount,\\n        uint256 minAmount,\\n        LibPerpetual.Side direction,\\n        bool isLiquidation\\n    )\\n        external\\n        returns (\\n            int256 openNotional,\\n            int256 positionSize,\\n            int256 profit,\\n            bool isPositionIncreased\\n        );\\n\\n    function provideLiquidity(\\n        address account,\\n        uint256[2] calldata amounts,\\n        uint256 minLpAmount\\n    ) external returns (int256 tradingFees);\\n\\n    function removeLiquidity(\\n        address account,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        uint256 minAmount,\\n        bool isLiquidation\\n    )\\n        external\\n        returns (\\n            int256 profit,\\n            uint256 reductionRatio,\\n            int256 quoteProceeds\\n        );\\n\\n    function settleTrader(address account) external returns (int256 fundingPayments);\\n\\n    function settleLp(address account) external returns (int256 fundingPayments);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function setParameters(PerpetualParams memory params) external;\\n}\\n\",\"keccak256\":\"0x40dcc765bf45f63ce667760253ae705509847a0200cf274dc9839902b85d6d2c\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IStakingContract.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\ninterface IStakingContract {\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function updateStakingPosition(uint256 idx, address lp) external;\\n}\\n\",\"keccak256\":\"0x8832855e64e76138b1024b14eb9ec4aa715c63173b0c2e0994321d7beb84443b\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IVirtualToken} from \\\"../interfaces/IVirtualToken.sol\\\";\\n\\ninterface IVBase is IVirtualToken {\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when oracle heart beat is updated\\n    /// @param newHeartBeat New heart beat value\\n    event HeartBeatUpdated(uint256 newHeartBeat);\\n\\n    /// @notice Emitted when sequencer uptime feed is updated\\n    /// @param newSequencerUptimeFeed New sequencer uptime feed\\n    event SequencerUptimeFeedUpdated(AggregatorV3Interface newSequencerUptimeFeed);\\n\\n    /// @notice Emitted when grace period is updated\\n    /// @param newGracePeriod New grace period\\n    event GracePeriodUpdated(uint256 newGracePeriod);\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the proposed aggregators decimals are less than PRECISION\\n    error VBase_InsufficientPrecision();\\n\\n    /// @notice Emitted when the latest round is incomplete\\n    error VBase_InvalidRoundTimestamp();\\n\\n    /// @notice Emitted when the latest round's price is invalid\\n    error VBase_InvalidRoundPrice();\\n\\n    /// @notice Emitted when the latest round's data is older than the oracle's max refresh time\\n    error VBase_DataNotFresh();\\n\\n    /// @notice Emitted when proposed sequencer uptime feed address is equal to the zero address\\n    error VBase_SequencerUptimeFeedZeroAddress();\\n\\n    /// @notice Emitted when proposed grace period is outside of the bounds\\n    error VBase_IncorrectGracePeriod();\\n\\n    /// @notice Emitted when Zksync sequencer is down\\n    error VBase_SequencerDown();\\n\\n    /// @notice Emitted when Zksync sequencer hasn't been back up for long enough\\n    error VBase_GracePeriodNotOver();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function getIndexPrice() external view returns (int256);\\n\\n    function heartBeat() external view returns (uint256);\\n\\n    function sequencerUptimeFeed() external view returns (AggregatorV3Interface);\\n\\n    function gracePeriod() external view returns (uint256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function setHeartBeat(uint256 newHeartBeat) external;\\n\\n    function setSequencerUptimeFeed(AggregatorV3Interface newSequencerUptimeFeed) external;\\n\\n    function setGracePeriod(uint256 newGracePeriod) external;\\n}\\n\",\"keccak256\":\"0xdd755b91ebf39942b92635950a1a4a086919652ab229042e3d6c98f82d96021c\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVQuote.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IVirtualToken} from \\\"../interfaces/IVirtualToken.sol\\\";\\n\\ninterface IVQuote is IVirtualToken {}\\n\",\"keccak256\":\"0xf3c21b1973b431c9e0fd63e60544be3e5a7e51bfb4d6f8b4dbac26f38dc3f17b\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {IOracle} from \\\"./IOracle.sol\\\";\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\n// @dev: deposit uint and withdraw int\\n// @author: The interface used in other contracts\\ninterface IVault {\\n    struct Collateral {\\n        IERC20Metadata asset;\\n        uint256 weight;\\n        uint8 decimals;\\n        uint256 currentAmount;\\n        uint256 maxAmount;\\n    }\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Vault_ZeroAddressConstructor(uint8 paramIndex);\\n\\n    /// @notice Emitted when user tries to withdraw collateral while having a UA debt\\n    error Vault_UADebt();\\n\\n    /// @notice Emitted when the sender is not the clearing house\\n    error Vault_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when the sender is not the clearing house, nor the insurance\\n    error Vault_SenderNotClearingHouseNorInsurance();\\n\\n    /// @notice Emitted when a user attempts to use a token which is not whitelisted as collateral\\n    error Vault_UnsupportedCollateral();\\n\\n    /// @notice Emitted when owner tries to whitelist a collateral already whitelisted\\n    error Vault_CollateralAlreadyWhiteListed();\\n\\n    /// @notice Emitted when a user attempts to withdraw with a reduction ratio above 1e18\\n    error Vault_WithdrawReductionRatioTooHigh();\\n\\n    /// @notice Emitted when a user attempts to withdraw more than their balance\\n    error Vault_WithdrawExcessiveAmount();\\n\\n    /// @notice Emitted when the proposed clearingHouse address is equal to the zero address\\n    error Vault_ClearingHouseZeroAddress();\\n\\n    /// @notice Emitted when the proposed insurance address is equal to the zero address\\n    error Vault_InsuranceZeroAddress();\\n\\n    /// @notice Emitted when the proposed oracle address is equal to the zero address\\n    error Vault_OracleZeroAddress();\\n\\n    /// @notice Emitted when the proposed collateral weight is under the limit\\n    error Vault_InsufficientCollateralWeight();\\n\\n    /// @notice Emitted when the proposed collateral weight is above the limit\\n    error Vault_ExcessiveCollateralWeight();\\n\\n    /// @notice Emitted when a user attempts to withdraw more collateral than available in vault\\n    error Vault_InsufficientBalance();\\n\\n    /// @notice Emitted when a user attempts to withdraw more collateral than available in vault\\n    error Vault_MaxCollateralAmountExceeded();\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when collateral is deposited into the vault\\n    /// @param user User who deposited collateral\\n    /// @param asset Token to be used for the collateral\\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\\n    event Deposit(address indexed user, address indexed asset, uint256 amount);\\n\\n    /// @notice Emitted when collateral is withdrawn from the vault\\n    /// @param user User who deposited collateral\\n    /// @param asset Token to be used for the collateral\\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\\n    event Withdraw(address indexed user, address indexed asset, uint256 amount);\\n\\n    /// @notice Emitted when bad debt is settled for by the insurance reserve\\n    /// @param beneficiary Beneficiary of the insurance payment\\n    /// @param amount Amount of bad insurance requested\\n    event TraderBadDebtGenerated(address beneficiary, uint256 amount);\\n\\n    /// @notice Emitted when a new ClearingHouse is connected to the vault\\n    /// @param newClearingHouse New ClearingHouse contract address\\n    event ClearingHouseChanged(IClearingHouse newClearingHouse);\\n\\n    /// @notice Emitted when a new Insurance is connected to the vault\\n    /// @param newInsurance New Insurance contract address\\n    event InsuranceChanged(IInsurance newInsurance);\\n\\n    /// @notice Emitted when a new Oracle is connected to the vault\\n    /// @param newOracle New Oracle contract address\\n    event OracleChanged(IOracle newOracle);\\n\\n    /// @notice Emitted when a new Oracle is connected to the vault\\n    /// @param asset Asset added as collateral\\n    /// @param weight Volatility measure of the asset\\n    /// @param maxAmount weight for the collateral\\n    event CollateralAdded(IERC20Metadata asset, uint256 weight, uint256 maxAmount);\\n\\n    /// @notice Emitted when a collateral weight changed\\n    /// @param asset Asset targeted by the change\\n    /// @param newWeight New volatility measure for the collateral\\n    event CollateralWeightChanged(IERC20Metadata asset, uint256 newWeight);\\n\\n    /// @notice Emitted when a collateral max amount changed\\n    /// @param asset Asset targeted by the change\\n    /// @param newMaxAmount New weight for the collateral\\n    event CollateralMaxAmountChanged(IERC20Metadata asset, uint256 newMaxAmount);\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n    function insurance() external view returns (IInsurance);\\n\\n    function oracle() external view returns (IOracle);\\n\\n    function clearingHouse() external view returns (IClearingHouse);\\n\\n    // slither-disable-next-line naming-convention\\n    function UA() external view returns (IERC20Metadata);\\n\\n    function tokenToCollateralIdx(IERC20Metadata token) external view returns (uint256);\\n\\n    function getTotalValueLocked() external view returns (int256);\\n\\n    function getWhiteListedCollateral(uint256 idx) external view returns (Collateral memory);\\n\\n    function getNumberOfCollaterals() external view returns (uint256);\\n\\n    function getReserveValue(address trader, bool isDiscounted) external view returns (int256);\\n\\n    function getBalance(address user, uint256 tokenIdx) external view returns (int256);\\n\\n    function getDiscountedCollateralUSDValue(uint256 tokenIdx, int256 collateralBalance) external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function deposit(\\n        address user,\\n        uint256 amount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function settlePnL(address user, int256 amount) external;\\n\\n    function withdraw(\\n        address user,\\n        uint256 amount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function withdrawAll(address user, IERC20Metadata withdrawToken) external;\\n\\n    function settleLiquidationOnCollaterals(address liquidator, address liquidatee) external;\\n\\n    function transferUa(address user, uint256 amount) external;\\n\\n    /* ****************** */\\n    /*     Governance     */\\n    /* ****************** */\\n\\n    function setClearingHouse(IClearingHouse newClearingHouse) external;\\n\\n    function setInsurance(IInsurance newInsurance) external;\\n\\n    function setOracle(IOracle newOracle) external;\\n\\n    function addWhiteListedCollateral(\\n        IERC20Metadata asset,\\n        uint256 weight,\\n        uint256 maxAmount\\n    ) external;\\n\\n    function changeCollateralWeight(IERC20Metadata asset, uint256 newWeight) external;\\n\\n    function changeCollateralMaxAmount(IERC20Metadata asset, uint256 newMaxAmount) external;\\n}\\n\",\"keccak256\":\"0xb4db72b0434b42029ba2791044df5ebc38cef05a596d2002951f04169639cd62\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVirtualToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IVirtualToken is IERC20Metadata {\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0dda9dc3d416b9aaeb6e93915b33c2b358b4ee5b9e477fa3b7ff9be8198e95ec\",\"license\":\"AGPL-3.0\"},\"contracts/lib/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// libraries\\nimport {PRBMathUD60x18} from \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\nimport {PRBMathSD59x18} from \\\"prb-math/contracts/PRBMathSD59x18.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\n\\n/*\\n * To be used if `b` decimals make `b` larger than what it would be otherwise.\\n * Especially useful for fixed point numbers, i.e. a way to represent decimal\\n * values without using decimals. E.g. 25e2 with 3 decimals represents 2.5%\\n *\\n * In our case, we get exchange rates with a 18 decimal precision\\n * (Solidity doesn't support decimal values natively).\\n * So if we have a EUR positions and want to get the equivalent USD amount\\n * we have to do: EUR_position * EUR_USD / 1e18 else the value would be way too high.\\n * To move from USD to EUR: (USD_position * 1e18) / EUR_USD else the value would\\n * be way too low.\\n *\\n * In essence,\\n * wadMul: a.mul(b).div(WAY)\\n * wadDiv: a.mul(WAY).div(b)\\n * where `WAY` represents the number of decimals\\n */\\nlibrary LibMath {\\n    // safe casting\\n    function toInt256(uint256 x) internal pure returns (int256) {\\n        return SafeCast.toInt256(x);\\n    }\\n\\n    function toUint256(int256 x) internal pure returns (uint256) {\\n        return SafeCast.toUint256(x);\\n    }\\n\\n    // absolute value\\n    function abs(int256 x) internal pure returns (int256) {\\n        return PRBMathSD59x18.abs(x);\\n    }\\n\\n    // min value\\n    function min(int256 x, int256 y) internal pure returns (int256) {\\n        return SignedMath.min(x, y);\\n    }\\n\\n    // int256: wad division / multiplication\\n    function wadDiv(int256 x, int256 y) internal pure returns (int256) {\\n        return PRBMathSD59x18.div(x, y);\\n    }\\n\\n    function wadMul(int256 x, int256 y) internal pure returns (int256) {\\n        return PRBMathSD59x18.mul(x, y);\\n    }\\n\\n    // uint256: wad division / multiplication\\n    function wadMul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return PRBMathUD60x18.mul(x, y);\\n    }\\n\\n    function wadDiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return PRBMathUD60x18.div(x, y);\\n    }\\n}\\n\",\"keccak256\":\"0xb1d13b2474f7f79f6338b60b919bde399e3b9d2153aab813a575f9c265057c97\",\"license\":\"AGPL-3.0\"},\"contracts/lib/LibPerpetual.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// libraries\\nimport {LibMath} from \\\"./LibMath.sol\\\";\\n\\nlibrary LibPerpetual {\\n    using LibMath for int256;\\n    using LibMath for uint256;\\n\\n    enum Side {\\n        // long position\\n        Long,\\n        // short position\\n        Short\\n    }\\n\\n    struct LiquidityProviderPosition {\\n        // quote assets or liabilities\\n        int256 openNotional;\\n        // base assets or liabilities\\n        int256 positionSize;\\n        // user cumulative funding rate (updated when open/close position)\\n        int256 cumFundingRate;\\n        // lp token owned (is zero for traders)\\n        uint256 liquidityBalance;\\n\\n        // last time when liquidity was provided\\n        uint256 depositTime;\\n\\n\\n        // total percentage return of liquidity providers index\\n        uint256 totalTradingFeesGrowth;\\n        // total base fees paid in cryptoswap pool\\n        uint256 totalBaseFeesGrowth;\\n        // total quote fees paid in cryptoswap pool\\n        uint256 totalQuoteFeesGrowth;\\n    }\\n\\n    struct TraderPosition {\\n        // quote assets or liabilities\\n        int256 openNotional;\\n        // base assets or liabilities\\n        int256 positionSize;\\n        // user cumulative funding rate (updated when open/close position)\\n        int256 cumFundingRate;\\n    }\\n\\n    struct GlobalPosition {\\n        /* twap state */\\n\\n        // timestamp of last trade\\n        uint128 timeOfLastTrade;\\n        // timestamp of last TWAP update\\n        uint128 timeOfLastTwapUpdate;\\n        // global cumulative funding rate (updated every trade)\\n        int256 cumFundingRate;\\n        // current trade amount in the block\\n        uint256 currentBlockTradeAmount;\\n        /* fees state */\\n\\n        // total percentage return of liquidity providers index\\n        uint256 totalTradingFeesGrowth;\\n        // total liquidity provided (in vQuote)\\n        uint256 totalLiquidityProvided;\\n        // total base fees paid in cryptoswap pool\\n        uint256 totalBaseFeesGrowth;\\n        // total quote fees paid in cryptoswap pool\\n        uint256 totalQuoteFeesGrowth;\\n    }\\n}\\n\",\"keccak256\":\"0xb9c99a4897cd5a6d674d882ccfe63f58adeb1812ed023dda696097d4a5334ee0\",\"license\":\"AGPL-3.0\"},\"contracts/lib/LibReserve.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// libraries\\nimport {LibMath} from \\\"./LibMath.sol\\\";\\n\\nlibrary LibReserve {\\n    using LibMath for uint256;\\n\\n    uint8 internal constant PROTOCOL_DECIMALS = 18;\\n\\n    /// @notice Convert amount from 'tokenDecimals' to 18 decimals precision\\n    /// @param tokenDecimals Decimals of the token. 8 decimals uint like in the ERC20 standard\\n    /// @param tokenAmount Amount with tokenDecimals precision\\n    /// @return wadAmount Scaled amount to the proper number of decimals\\n    function tokenToWad(uint8 tokenDecimals, uint256 tokenAmount) internal pure returns (uint256) {\\n        if (tokenDecimals == PROTOCOL_DECIMALS) {\\n            return tokenAmount;\\n        } else if (tokenDecimals < PROTOCOL_DECIMALS) {\\n            return tokenAmount * (10**(PROTOCOL_DECIMALS - tokenDecimals));\\n        }\\n\\n        return tokenAmount / (10**(tokenDecimals - PROTOCOL_DECIMALS));\\n    }\\n\\n    /// @notice Convert amount from 'tokenDecimals' decimals to 18 decimals precision\\n    /// @param tokenDecimals Decimals of the token. 8 decimals uint like in the ERC20 standard\\n    /// @param wadAmount Amount with 18 decimals precision\\n    /// @return amount Amount scaled back to the initial amount of decimals\\n    function wadToToken(uint8 tokenDecimals, uint256 wadAmount) internal pure returns (uint256) {\\n        if (tokenDecimals == PROTOCOL_DECIMALS) {\\n            return wadAmount;\\n        } else if (tokenDecimals < PROTOCOL_DECIMALS) {\\n            return wadAmount / (10**(PROTOCOL_DECIMALS - tokenDecimals));\\n        }\\n\\n        return wadAmount * 10**(tokenDecimals - PROTOCOL_DECIMALS);\\n    }\\n}\\n\",\"keccak256\":\"0x6e16256d8f91afe75a106dfe46c1d0f192e31556466b092ba5a73b2a5c47a306\",\"license\":\"AGPL-3.0\"},\"contracts/utils/IncreAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n// interfaces\\nimport {IIncreAccessControl} from \\\"../interfaces/IIncreAccessControl.sol\\\";\\n\\n/// @notice Increment access control contract.\\ncontract IncreAccessControl is AccessControl {\\n    bytes32 public constant GOVERNANCE = keccak256(\\\"GOVERNANCE\\\");\\n    bytes32 public constant MANAGER = keccak256(\\\"MANAGER\\\");\\n\\n    constructor() {\\n        _setupRole(GOVERNANCE, msg.sender);\\n        _setRoleAdmin(GOVERNANCE, GOVERNANCE);\\n\\n        _setupRole(MANAGER, msg.sender);\\n        _setRoleAdmin(MANAGER, GOVERNANCE);\\n    }\\n\\n    // utils\\n    function isGovernor(address account) external view returns (bool) {\\n        return hasRole(GOVERNANCE, account);\\n    }\\n\\n    function isManager(address account) external view returns (bool) {\\n        return hasRole(MANAGER, account);\\n    }\\n}\\n\",\"keccak256\":\"0x5e53b6d6dd249e521fef214100871de5529c733ef9a258d3ce2b701f3b066cf7\",\"license\":\"AGPL-3.0\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathSD59x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\n\\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_WHOLE_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\n\\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_WHOLE_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Calculate the absolute value of x.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than MIN_SD59x18.\\n    ///\\n    /// @param x The number to calculate the absolute value for.\\n    /// @param result The absolute value of x.\\n    function abs(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x == MIN_SD59x18) {\\n                revert PRBMathSD59x18__AbsInputTooSmall();\\n            }\\n            result = x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            int256 sum = (x >> 1) + (y >> 1);\\n            if (sum < 0) {\\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\\n                // right rounds down to infinity.\\n                assembly {\\n                    result := add(sum, and(or(x, y), 1))\\n                }\\n            } else {\\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\\n                // remainder gets truncated twice.\\n                result = sum + (x & y & 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function ceil(int256 x) internal pure returns (int256 result) {\\n        if (x > MAX_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__CeilOverflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x > 0) {\\n                    result += SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    /// - None of the inputs can be MIN_SD59x18.\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within int256.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    ///\\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__DivInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x and y.\\n        uint256 ax;\\n        uint256 ay;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n        }\\n\\n        // Compute the absolute value of (x*SCALE)\\u00f7y. The result must fit within int256.\\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__DivOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x and y.\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n\\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\\n        // should be positive. Otherwise, it should be negative.\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (int256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\".\\n    /// - For any x less than -41.446531673892822322, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59.794705707972522261.\\n        if (x < -41_446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathSD59x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59.794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^(-x) = 1/2^x.\\n        if (x < 0) {\\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n            if (x < -59_794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked {\\n                result = 1e36 / exp2(-x);\\n            }\\n        } else {\\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n            if (x >= 192e18) {\\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\\n            }\\n\\n            unchecked {\\n                // Convert x to the 192.64-bit fixed-point format.\\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\\n                result = int256(PRBMath.exp2(x192x64));\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function floor(int256 x) internal pure returns (int256 result) {\\n        if (x < MIN_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__FloorUnderflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x < 0) {\\n                    result -= SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\\n    /// of the radix point for negative numbers.\\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\\n    function frac(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x % SCALE;\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\\n    function fromInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < MIN_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntUnderflow(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\\n    /// - x * y cannot be negative.\\n    ///\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            int256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathSD59x18__GmOverflow(x, y);\\n            }\\n\\n            // The product cannot be negative.\\n            if (xy < 0) {\\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = int256(PRBMath.sqrt(uint256(xy)));\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\\n    function inv(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\\n    function ln(int256 x) internal pure returns (int256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 195205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\\n    function log10(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            default {\\n                result := MAX_SD59x18\\n            }\\n        }\\n\\n        if (result == MAX_SD59x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n                assembly {\\n                    x := div(1000000000000000000000000000000000000, x)\\n                }\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\\n\\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n            result = int256(n) * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            int256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result * sign;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result *= sign;\\n        }\\n    }\\n\\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\\n    /// fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers and employs constant folding, i.e. the denominator is\\n    /// always 1e18.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - None of the inputs can be MIN_SD59x18\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    ///\\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__MulInputTooSmall();\\n        }\\n\\n        unchecked {\\n            uint256 ax;\\n            uint256 ay;\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n\\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\\n            if (rAbs > uint256(MAX_SD59x18)) {\\n                revert PRBMathSD59x18__MulOverflow(rAbs);\\n            }\\n\\n            uint256 sx;\\n            uint256 sy;\\n            assembly {\\n                sx := sgt(x, sub(0, 1))\\n                sy := sgt(y, sub(0, 1))\\n            }\\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n        }\\n    }\\n\\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\\n    function pi() internal pure returns (int256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - z cannot be zero.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : int256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"abs\\\" and \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\\n        uint256 xAbs = uint256(abs(x));\\n\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        uint256 yAux = y;\\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (yAux & 1 > 0) {\\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\\n            }\\n        }\\n\\n        // The result must fit within the 59.18-decimal fixed-point representation.\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\\n        }\\n\\n        // Is the base negative and the exponent an odd number?\\n        bool isNegative = x < 0 && y & 1 == 1;\\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\\n    function scale() internal pure returns (int256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x cannot be negative.\\n    /// - x must be less than MAX_SD59x18 / SCALE.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as a signed 59.18-decimal fixed-point .\\n    function sqrt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < 0) {\\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\\n        }\\n    }\\n\\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1886d687eace717c05b7dcc20e43a088df0e549df86b453c2222961b520308f0\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200366938038062003669833981016040819052620000349162000730565b6200004f60008051602062003649833981519152336200010f565b6200006a60008051602062003649833981519152806200011f565b6200008560008051602062003629833981519152336200010f565b620000af60008051602062003629833981519152600080516020620036498339815191526200011f565b6001600160a01b038116620000df5760405163356b644560e01b8152600060048201526024015b60405180910390fd5b6001600160601b0319606082901b166080526200010881670de0b6b3a76400006000196200016a565b5062000902565b6200011b8282620003ea565b5050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000805160206200364983398151915262000185816200048a565b662386f26fc10000831015620001ae57604051632e01c96360e01b815260040160405180910390fd5b670de0b6b3a7640000831115620001d857604051635f08f99d60e01b815260040160405180910390fd5b60005b6004548110156200026157846001600160a01b0316600482815481106200021257634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201546001600160a01b031614156200024c576040516353dc2d7560e01b815260040160405180910390fd5b806200025881620008ce565b915050620001db565b5060046040518060a00160405280866001600160a01b03168152602001858152602001866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620002be57600080fd5b505afa158015620002d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002f9919062000759565b60ff908116825260006020808401829052604093840188905285546001808201885596835291819020855160059093020180546001600160a01b0319166001600160a01b03909316929092178255840151818601559183015160028301805460ff191691909216179055606082015160038201556080909101516004918201555462000386919062000867565b6001600160a01b0385166000818152600560209081526040918290209390935580519182529181018590529081018390527f11f8990ac38271f23dea447d5728e9914fca7cea2edda43af6c43c415f8bc30b9060600160405180910390a150505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200011b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620004463390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b62000496813362000499565b50565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200011b57620004e3816001600160a01b031660146200053460201b620015af1760201c565b620004f9836020620015af62000534821b17811c565b6040516020016200050c9291906200077c565b60408051601f198184030181529082905262461bcd60e51b8252620000d691600401620007f5565b606060006200054583600262000845565b620005529060026200082a565b6001600160401b038111156200057857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015620005a3576020820181803683370190505b509050600360fc1b81600081518110620005cd57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200060b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006200063184600262000845565b6200063e9060016200082a565b90505b6001811115620006d8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106200068257634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110620006a757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93620006d081620008b4565b905062000641565b508315620007295760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620000d6565b9392505050565b60006020828403121562000742578081fd5b81516001600160a01b038116811462000729578182fd5b6000602082840312156200076b578081fd5b815160ff8116811462000729578182fd5b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351620007b681601785016020880162000881565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351620007e981602884016020880162000881565b01602801949350505050565b60208152600082518060208401526200081681604085016020870162000881565b601f01601f19169190910160400192915050565b60008219821115620008405762000840620008ec565b500190565b6000816000190483118215151615620008625762000862620008ec565b500290565b6000828210156200087c576200087c620008ec565b500390565b60005b838110156200089e57818101518382015260200162000884565b83811115620008ae576000848401525b50505050565b600081620008c657620008c6620008ec565b506000190190565b6000600019821415620008e557620008e5620008ec565b5060010190565b634e487b7160e01b600052601160045260246000fd5b60805160601c612cd0620009596000396000818161047b015281816105f001528181610c1b015281816111d10152818161131501528181611495015281816117c001528181611dd90152611f820152612cd06000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80636cd7751f11610125578063c52e8c41116100ad578063e43581b81161007c578063e43581b81461051f578063f3ae241514610532578063f45346dc14610545578063fb6d681414610558578063feb8cbe91461044057600080fd5b8063c52e8c4114610476578063cf209c771461049d578063d547741f146104f9578063d76bedff1461050c57600080fd5b806391d14854116100f457806391d148541461042d578063a217fddf14610440578063a780b00614610448578063b26025aa1461045b578063bbffd7191461046357600080fd5b80636cd7751f146103e15780637adbf973146103f45780637dc0d1d01461040757806389cf32041461041a57600080fd5b80632b04e840116101a8578063449323d811610177578063449323d81461038257806352f8884514610395578063586b4ecc146103a857806362990d2f146103bb57806369328dec146103ce57600080fd5b80632b04e8401461031e5780632f2ff15d1461035457806334cc89a21461036757806336568abe1461036f57600080fd5b806314627834116101e457806314627834146102ac5780631b2df850146102c1578063248a9ca3146102e857806329122eb01461030b57600080fd5b806301ffc9a714610216578063040332cb1461023e57806309cae2c81461026c5780630af9680014610281575b600080fd5b61022961022436600461288f565b61056b565b60405190151581526020015b60405180910390f35b61025e61024c366004612738565b60056020526000908152604090205481565b604051908152602001610235565b61027f61027a3660046127b9565b6105a2565b005b600154610294906001600160a01b031681565b6040516001600160a01b039091168152602001610235565b61025e600080516020612c7b83398151915281565b61025e7faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c81565b61025e6102f6366004612853565b60009081526020819052604090206001015490565b61025e61031936600461278c565b61067f565b61025e61032c3660046127cb565b6001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61027f61036236600461286b565b610692565b60045461025e565b61027f61037d36600461286b565b6106bc565b61027f610390366004612738565b61073b565b61025e6103a3366004612903565b6107d0565b61027f6103b6366004612754565b61087d565b61027f6103c93660046127cb565b610b97565b61027f6103dc3660046127f6565b610bcd565b61027f6103ef366004612738565b610cc3565b61027f610402366004612738565b610d50565b600354610294906001600160a01b031681565b600254610294906001600160a01b031681565b61022961043b36600461286b565b610ddd565b61025e600081565b61027f6104563660046128b7565b610e06565b61025e611076565b61027f6104713660046127cb565b611137565b6102947f000000000000000000000000000000000000000000000000000000000000000081565b6104b06104ab366004612853565b6111f8565b604051610235919081516001600160a01b031681526020808301519082015260408083015160ff1690820152606080830151908201526080918201519181019190915260a00190565b61027f61050736600461286b565b6112b4565b61027f61051a3660046127cb565b6112d9565b61022961052d366004612738565b6113de565b610229610540366004612738565b6113f8565b61027f6105533660046127f6565b611424565b61027f6105663660046127cb565b611459565b60006001600160e01b03198216637965db0b60e01b148061059c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001546001600160a01b031633146105cc576040516257034d60e91b815260040160405180910390fd5b6001600160a01b0381166000908152600560205260409020548015158061062457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b6106415760405163a84d9d9760e01b815260040160405180910390fd5b6001600160a01b03831660009081526006602090815260408083208484529091529020546106788461067283611791565b8561179c565b50505b5050565b600061068b8383611a04565b9392505050565b6000828152602081905260409020600101546106ad81611b3e565b6106b78383611b4b565b505050565b6001600160a01b03811633146107315760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61067b8282611bcf565b600080516020612c7b83398151915261075381611b3e565b6001600160a01b03821661077a5760405163017638ad60e71b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0384169081179091556040519081527fd0654f5900f9e7e4e605a19334306e6a2786bbf960ac0484a4c12feb6428fe2f906020015b60405180910390a15050565b6004546000906107e290600190612b8f565b8311156108025760405163a84d9d9760e01b815260040160405180910390fd5b61068b6004848154811061082657634e487b7160e01b600052603260045260246000fd5b6000918252602090912060059091020154600480546001600160a01b03909216918690811061086557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016001015484611c34565b6001546001600160a01b031633146108a7576040516257034d60e91b815260040160405180910390fd5b6001600160a01b0381166000908152600660209081526040808320838052909152812054906108dd6108d883612c27565b611791565b90506004600060015b8254811015610ad3576001600160a01b03861660009081526006602090815260408083208484529091528120549250821315610ac15760006109f3600160009054906101000a90046001600160a01b03166001600160a01b0316638053fcbe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561096f57600080fd5b505afa158015610983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a791906128eb565b6109ed6108d88786815481106109cd57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201546001600160a01b031687611cea565b90611d86565b905084811015610a5057610a3f8888868581548110610a2257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201610a3987611791565b85611d92565b610a499086612b8f565b9450610abf565b6000610a5c8683611e33565b90506000610a766108d8610a6f84611e3f565b8790611e4a565b9050610ab28a8a888781548110610a9d57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201848b611d92565b5060009650505050610ad3565b505b80610acb81612c0c565b9150506108e6565b508215610b8f576002546040516327a0bb3360e01b8152600481018590526001600160a01b03909116906327a0bb3390602401600060405180830381600087803b158015610b2057600080fd5b505af1158015610b34573d6000803e3d6000fd5b50505050610b4c856000610b4786611e3f565b611e56565b604080516001600160a01b0387168152602081018590527f83094b81291821441f3fed4d86b7776d68df539841c55aa0d173bbbd60d1c60c910160405180910390a15b505050505050565b6001546001600160a01b03163314610bc1576040516257034d60e91b815260040160405180910390fd5b61067b82600083611e56565b6001546001600160a01b03163314610bf7576040516257034d60e91b815260040160405180910390fd5b6001600160a01b03811660009081526005602052604090205480151580610c4f57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b610c6c5760405163a84d9d9760e01b815260040160405180910390fd5b6000610caf60048381548110610c9257634e487b7160e01b600052603260045260246000fd5b600091825260209091206002600590920201015460ff1685611e93565b9050610cbc85828561179c565b5050505050565b600080516020612c7b833981519152610cdb81611b3e565b6001600160a01b038216610d02576040516363788cbd60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0384169081179091556040519081527f6b7cc3294ba6328c864b090682147d055e6dfff6c9ccece6f22dee66c6c251cf906020016107c4565b600080516020612c7b833981519152610d6881611b3e565b6001600160a01b038216610d8f57604051632ed2e9a560e21b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0384169081179091556040519081527f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe418906020016107c4565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020612c7b833981519152610e1e81611b3e565b662386f26fc10000831015610e4657604051632e01c96360e01b815260040160405180910390fd5b670de0b6b3a7640000831115610e6f57604051635f08f99d60e01b815260040160405180910390fd5b60005b600454811015610ef257846001600160a01b031660048281548110610ea757634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201546001600160a01b03161415610ee0576040516353dc2d7560e01b815260040160405180910390fd5b80610eea81612c0c565b915050610e72565b5060046040518060a00160405280866001600160a01b03168152602001858152602001866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4e57600080fd5b505afa158015610f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f869190612924565b60ff908116825260006020808401829052604093840188905285546001808201885596835291819020855160059093020180546001600160a01b0319166001600160a01b03909316929092178255840151818601559183015160028301805460ff19169190921617905560608201516003820155608090910151600491820155546110119190612b8f565b6001600160a01b0385166000818152600560209081526040918290209390935580519182529181018590529081018390527f11f8990ac38271f23dea447d5728e9914fca7cea2edda43af6c43c415f8bc30b906060015b60405180910390a150505050565b6000600481805b82548110156111305760006110c28483815481106110ab57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160030154611e3f565b9050600081131561111d576111108483815481106110f057634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201546001600160a01b031682611cea565b61111a9084612a09565b92505b508061112881612c0c565b91505061107d565b5092915050565b6001546001600160a01b0316331480159061115d57506002546001600160a01b03163314155b1561117b57604051633689403d60e21b815260040160405180910390fd5b80600460008154811061119e57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160030160008282546111be9190612b8f565b9091555061067b90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383611efb565b6112366040518060a0016040528060006001600160a01b0316815260200160008152602001600060ff16815260200160008152602001600081525090565b6004828154811061125757634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a081018252600590930290910180546001600160a01b03168352600181015493830193909352600283015460ff169082015260038201546060820152600490910154608082015292915050565b6000828152602081905260409020600101546112cf81611b3e565b6106b78383611bcf565b600080516020612c7b8339815191526112f181611b3e565b6001600160a01b0383166000908152600560205260409020548015158061134957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b6113665760405163a84d9d9760e01b815260040160405180910390fd5b826004828154811061138857634e487b7160e01b600052603260045260246000fd5b600091825260209182902060046005909202010191909155604080516001600160a01b03871681529182018590527f6af11b7b0fa3a0001eea86cdc01b08604d3c974ef76506801c330db8aca293c59101611068565b600061059c600080516020612c7b83398151915283610ddd565b600061059c7faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c83610ddd565b6001546001600160a01b0316331461144e576040516257034d60e91b815260040160405180910390fd5b6106b7838383611f5e565b600080516020612c7b83398151915261147181611b3e565b6001600160a01b038316600090815260056020526040902054801515806114c957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b6114e65760405163a84d9d9760e01b815260040160405180910390fd5b662386f26fc1000083101561150e57604051632e01c96360e01b815260040160405180910390fd5b670de0b6b3a764000083111561153757604051635f08f99d60e01b815260040160405180910390fd5b826004828154811061155957634e487b7160e01b600052603260045260246000fd5b600091825260209182902060016005909202010191909155604080516001600160a01b03871681529182018590527f961e2483fa09e9fd159361d604d3c547aca03801b1ce4c758b036e9bacd8c0829101611068565b606060006115be836002612b70565b6115c9906002612a4a565b67ffffffffffffffff8111156115ef57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611619576020820181803683370190505b509050600360fc1b8160008151811061164257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061167f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006116a3846002612b70565b6116ae906001612a4a565b90505b6001811115611742576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106116f057634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061171457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361173b81612bf5565b90506116b1565b50831561068b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610728565b600061059c82612111565b6001600160a01b038116600090815260056020526040902054801515806117f457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b6118115760405163a84d9d9760e01b815260040160405180910390fd5b6001600160a01b038416600090815260066020908152604080832083805290915281205490811215611856576040516362422bc160e11b815260040160405180910390fd5b6001600160a01b03851660009081526006602090815260408083208584529091529020548061188486611e3f565b13156118a3576040516306ed1da360e51b815260040160405180910390fd5b600483815481106118c457634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600301548511156118f6576040516301d8c68960e51b815260040160405180910390fd5b846004848154811061191857634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160030160008282546119389190612b8f565b909155506119559050868461194c88611e3f565b610b4790612c27565b60006119986004858154811061197b57634e487b7160e01b600052603260045260246000fd5b600091825260209091206002600590920201015460ff1687612167565b90506119ae6001600160a01b0386168883611efb565b846001600160a01b0316876001600160a01b03167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb836040516119f391815260200190565b60405180910390a350505050505050565b600060048180805b8354811015611b34576001600160a01b038716600090815260066020908152604080832084845290915290205492508215611b22578515611ad257611ac1848281548110611a6a57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005909102015485546001600160a01b0390911690869084908110611aa957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016001015485611c34565b611acb9083612a09565b9150611b22565b611b15848281548110611af557634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201546001600160a01b031684611cea565b611b1f9083612a09565b91505b80611b2c81612c0c565b915050611a0c565b5095945050505050565b611b4881336121c8565b50565b611b558282610ddd565b61067b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611b8b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611bd98282610ddd565b1561067b576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080611c4a611c4385611e3f565b8490611e4a565b60035460405163fa481db960e01b81526001600160a01b038881166004830152602482018790529293506000929091169063fa481db99060440160206040518083038186803b158015611c9c57600080fd5b505afa158015611cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd491906128eb565b9050611ce08282611e4a565b9695505050505050565b60035460405163fa481db960e01b81526001600160a01b03848116600483015260248201849052600092839291169063fa481db99060440160206040518083038186803b158015611d3a57600080fd5b505afa158015611d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7291906128eb565b9050611d7e8382611e4a565b949350505050565b600061068b838361222c565b6000611da3856000610b4785611e3f565b83546001600160a01b0316600090815260056020526040902054611dcc90869061194c86611e3f565b611e016001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016873085612238565b83546001600160a01b0316600090815260056020526040902054611e2a908790610b4786611e3f565b50949350505050565b600061068b8383612270565b600061059c82612285565b600061068b83836122ef565b6001600160a01b038316600090815260066020908152604080832085845290915281208054839290611e89908490612a09565b9091555050505050565b600060ff831660121415611ea857508061059c565b601260ff84161015611edb57611ebf836012612ba6565b611eca90600a612ac5565b611ed49083612b70565b905061059c565b611ee6601284612ba6565b611ef190600a612ac5565b61068b9083612a62565b6040516001600160a01b0383166024820152604481018290526106b790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526123b4565b6001600160a01b03811660009081526005602052604090205480151580611fb657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b611fd35760405163a84d9d9760e01b815260040160405180910390fd5b600060048281548110611ff657634e487b7160e01b600052603260045260246000fd5b60009182526020822060026005909202019081015490925061201b9060ff1686611e93565b905081600401548183600301546120329190612a4a565b111561205157604051630313841f60e61b815260040160405180910390fd5b806004848154811061207357634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160030160008282546120939190612a4a565b909155506120a790508684610b4784611e3f565b6120bc6001600160a01b038516873088612238565b836001600160a01b0316866001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f628760405161210191815260200190565b60405180910390a3505050505050565b6000808212156121635760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610728565b5090565b600060ff83166012141561217c57508061059c565b601260ff841610156121a857612193836012612ba6565b61219e90600a612ac5565b611ed49083612a62565b6121b3601284612ba6565b6121be90600a612ac5565b61068b9083612b70565b6121d28282610ddd565b61067b576121ea816001600160a01b031660146115af565b6121f58360206115af565b604051602001612206929190612961565b60408051601f198184030181529082905262461bcd60e51b8252610728916004016129d6565b600061068b8383612486565b6040516001600160a01b03808516602483015283166044820152606481018290526106789085906323b872dd60e01b90608401611f27565b600061068b83670de0b6b3a764000084612548565b60006001600160ff1b038211156121635760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610728565b6000600160ff1b8314806123065750600160ff1b82145b1561232457604051630d01a11b60e21b815260040160405180910390fd5b60008060008512612335578461233a565b846000035b91506000841261234a578361234f565b836000035b9050600061235d8383612486565b90506001600160ff1b0381111561238a5760405163bf79e8d960e01b815260048101829052602401610728565b6000198087139086138082186001146123a357826123a8565b826000035b98975050505050505050565b6000612409826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126249092919063ffffffff16565b8051909150156106b757808060200190518101906124279190612837565b6106b75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610728565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106124ca5760405163698d9a0160e11b815260048101829052602401610728565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826125045780670de0b6b3a764000085040194505050505061059c565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6000808060001985870985870292508281108382030391505080600014156125915783828161258757634e487b7160e01b600052601260045260246000fd5b049250505061068b565b8381106125bb57604051631dcf306360e21b81526004810182905260248101859052604401610728565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6060611d7e8484600085856001600160a01b0385163b6126865760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610728565b600080866001600160a01b031685876040516126a29190612945565b60006040518083038185875af1925050503d80600081146126df576040519150601f19603f3d011682016040523d82523d6000602084013e6126e4565b606091505b50915091506126f48282866126ff565b979650505050505050565b6060831561270e57508161068b565b82511561271e5782518084602001fd5b8160405162461bcd60e51b815260040161072891906129d6565b600060208284031215612749578081fd5b813561068b81612c57565b60008060408385031215612766578081fd5b823561277181612c57565b9150602083013561278181612c57565b809150509250929050565b6000806040838503121561279e578182fd5b82356127a981612c57565b9150602083013561278181612c6c565b60008060408385031215612766578182fd5b600080604083850312156127dd578182fd5b82356127e881612c57565b946020939093013593505050565b60008060006060848603121561280a578081fd5b833561281581612c57565b925060208401359150604084013561282c81612c57565b809150509250925092565b600060208284031215612848578081fd5b815161068b81612c6c565b600060208284031215612864578081fd5b5035919050565b6000806040838503121561287d578182fd5b82359150602083013561278181612c57565b6000602082840312156128a0578081fd5b81356001600160e01b03198116811461068b578182fd5b6000806000606084860312156128cb578081fd5b83356128d681612c57565b95602085013595506040909401359392505050565b6000602082840312156128fc578081fd5b5051919050565b60008060408385031215612915578182fd5b50508035926020909101359150565b600060208284031215612935578081fd5b815160ff8116811461068b578182fd5b60008251612957818460208701612bc9565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612999816017850160208801612bc9565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516129ca816028840160208801612bc9565b01602801949350505050565b60208152600082518060208401526129f5816040850160208701612bc9565b601f01601f19169190910160400192915050565b600080821280156001600160ff1b0384900385131615612a2b57612a2b612c41565b600160ff1b8390038412811615612a4457612a44612c41565b50500190565b60008219821115612a5d57612a5d612c41565b500190565b600082612a7d57634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115612abd578160001904821115612aa357612aa3612c41565b80851615612ab057918102915b93841c9390800290612a87565b509250929050565b600061068b60ff841683600082612ade5750600161059c565b81612aeb5750600061059c565b8160018114612b015760028114612b0b57612b27565b600191505061059c565b60ff841115612b1c57612b1c612c41565b50506001821b61059c565b5060208310610133831016604e8410600b8410161715612b4a575081810a61059c565b612b548383612a82565b8060001904821115612b6857612b68612c41565b029392505050565b6000816000190483118215151615612b8a57612b8a612c41565b500290565b600082821015612ba157612ba1612c41565b500390565b600060ff821660ff841680821015612bc057612bc0612c41565b90039392505050565b60005b83811015612be4578181015183820152602001612bcc565b838111156106785750506000910152565b600081612c0457612c04612c41565b506000190190565b6000600019821415612c2057612c20612c41565b5060010190565b6000600160ff1b821415612c3d57612c3d612c41565b0390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114611b4857600080fd5b8015158114611b4857600080fdfe35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771a2646970667358221220e8d2a4c91e6eaac8b336ddeb802ae18b134526155d7ba6cf855ff45cbd4c6f3b64736f6c63430008040033af290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c80636cd7751f11610125578063c52e8c41116100ad578063e43581b81161007c578063e43581b81461051f578063f3ae241514610532578063f45346dc14610545578063fb6d681414610558578063feb8cbe91461044057600080fd5b8063c52e8c4114610476578063cf209c771461049d578063d547741f146104f9578063d76bedff1461050c57600080fd5b806391d14854116100f457806391d148541461042d578063a217fddf14610440578063a780b00614610448578063b26025aa1461045b578063bbffd7191461046357600080fd5b80636cd7751f146103e15780637adbf973146103f45780637dc0d1d01461040757806389cf32041461041a57600080fd5b80632b04e840116101a8578063449323d811610177578063449323d81461038257806352f8884514610395578063586b4ecc146103a857806362990d2f146103bb57806369328dec146103ce57600080fd5b80632b04e8401461031e5780632f2ff15d1461035457806334cc89a21461036757806336568abe1461036f57600080fd5b806314627834116101e457806314627834146102ac5780631b2df850146102c1578063248a9ca3146102e857806329122eb01461030b57600080fd5b806301ffc9a714610216578063040332cb1461023e57806309cae2c81461026c5780630af9680014610281575b600080fd5b61022961022436600461288f565b61056b565b60405190151581526020015b60405180910390f35b61025e61024c366004612738565b60056020526000908152604090205481565b604051908152602001610235565b61027f61027a3660046127b9565b6105a2565b005b600154610294906001600160a01b031681565b6040516001600160a01b039091168152602001610235565b61025e600080516020612c7b83398151915281565b61025e7faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c81565b61025e6102f6366004612853565b60009081526020819052604090206001015490565b61025e61031936600461278c565b61067f565b61025e61032c3660046127cb565b6001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61027f61036236600461286b565b610692565b60045461025e565b61027f61037d36600461286b565b6106bc565b61027f610390366004612738565b61073b565b61025e6103a3366004612903565b6107d0565b61027f6103b6366004612754565b61087d565b61027f6103c93660046127cb565b610b97565b61027f6103dc3660046127f6565b610bcd565b61027f6103ef366004612738565b610cc3565b61027f610402366004612738565b610d50565b600354610294906001600160a01b031681565b600254610294906001600160a01b031681565b61022961043b36600461286b565b610ddd565b61025e600081565b61027f6104563660046128b7565b610e06565b61025e611076565b61027f6104713660046127cb565b611137565b6102947f000000000000000000000000000000000000000000000000000000000000000081565b6104b06104ab366004612853565b6111f8565b604051610235919081516001600160a01b031681526020808301519082015260408083015160ff1690820152606080830151908201526080918201519181019190915260a00190565b61027f61050736600461286b565b6112b4565b61027f61051a3660046127cb565b6112d9565b61022961052d366004612738565b6113de565b610229610540366004612738565b6113f8565b61027f6105533660046127f6565b611424565b61027f6105663660046127cb565b611459565b60006001600160e01b03198216637965db0b60e01b148061059c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001546001600160a01b031633146105cc576040516257034d60e91b815260040160405180910390fd5b6001600160a01b0381166000908152600560205260409020548015158061062457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b6106415760405163a84d9d9760e01b815260040160405180910390fd5b6001600160a01b03831660009081526006602090815260408083208484529091529020546106788461067283611791565b8561179c565b50505b5050565b600061068b8383611a04565b9392505050565b6000828152602081905260409020600101546106ad81611b3e565b6106b78383611b4b565b505050565b6001600160a01b03811633146107315760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61067b8282611bcf565b600080516020612c7b83398151915261075381611b3e565b6001600160a01b03821661077a5760405163017638ad60e71b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0384169081179091556040519081527fd0654f5900f9e7e4e605a19334306e6a2786bbf960ac0484a4c12feb6428fe2f906020015b60405180910390a15050565b6004546000906107e290600190612b8f565b8311156108025760405163a84d9d9760e01b815260040160405180910390fd5b61068b6004848154811061082657634e487b7160e01b600052603260045260246000fd5b6000918252602090912060059091020154600480546001600160a01b03909216918690811061086557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016001015484611c34565b6001546001600160a01b031633146108a7576040516257034d60e91b815260040160405180910390fd5b6001600160a01b0381166000908152600660209081526040808320838052909152812054906108dd6108d883612c27565b611791565b90506004600060015b8254811015610ad3576001600160a01b03861660009081526006602090815260408083208484529091528120549250821315610ac15760006109f3600160009054906101000a90046001600160a01b03166001600160a01b0316638053fcbe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561096f57600080fd5b505afa158015610983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a791906128eb565b6109ed6108d88786815481106109cd57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201546001600160a01b031687611cea565b90611d86565b905084811015610a5057610a3f8888868581548110610a2257634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201610a3987611791565b85611d92565b610a499086612b8f565b9450610abf565b6000610a5c8683611e33565b90506000610a766108d8610a6f84611e3f565b8790611e4a565b9050610ab28a8a888781548110610a9d57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201848b611d92565b5060009650505050610ad3565b505b80610acb81612c0c565b9150506108e6565b508215610b8f576002546040516327a0bb3360e01b8152600481018590526001600160a01b03909116906327a0bb3390602401600060405180830381600087803b158015610b2057600080fd5b505af1158015610b34573d6000803e3d6000fd5b50505050610b4c856000610b4786611e3f565b611e56565b604080516001600160a01b0387168152602081018590527f83094b81291821441f3fed4d86b7776d68df539841c55aa0d173bbbd60d1c60c910160405180910390a15b505050505050565b6001546001600160a01b03163314610bc1576040516257034d60e91b815260040160405180910390fd5b61067b82600083611e56565b6001546001600160a01b03163314610bf7576040516257034d60e91b815260040160405180910390fd5b6001600160a01b03811660009081526005602052604090205480151580610c4f57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b610c6c5760405163a84d9d9760e01b815260040160405180910390fd5b6000610caf60048381548110610c9257634e487b7160e01b600052603260045260246000fd5b600091825260209091206002600590920201015460ff1685611e93565b9050610cbc85828561179c565b5050505050565b600080516020612c7b833981519152610cdb81611b3e565b6001600160a01b038216610d02576040516363788cbd60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0384169081179091556040519081527f6b7cc3294ba6328c864b090682147d055e6dfff6c9ccece6f22dee66c6c251cf906020016107c4565b600080516020612c7b833981519152610d6881611b3e565b6001600160a01b038216610d8f57604051632ed2e9a560e21b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0384169081179091556040519081527f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe418906020016107c4565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020612c7b833981519152610e1e81611b3e565b662386f26fc10000831015610e4657604051632e01c96360e01b815260040160405180910390fd5b670de0b6b3a7640000831115610e6f57604051635f08f99d60e01b815260040160405180910390fd5b60005b600454811015610ef257846001600160a01b031660048281548110610ea757634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201546001600160a01b03161415610ee0576040516353dc2d7560e01b815260040160405180910390fd5b80610eea81612c0c565b915050610e72565b5060046040518060a00160405280866001600160a01b03168152602001858152602001866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4e57600080fd5b505afa158015610f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f869190612924565b60ff908116825260006020808401829052604093840188905285546001808201885596835291819020855160059093020180546001600160a01b0319166001600160a01b03909316929092178255840151818601559183015160028301805460ff19169190921617905560608201516003820155608090910151600491820155546110119190612b8f565b6001600160a01b0385166000818152600560209081526040918290209390935580519182529181018590529081018390527f11f8990ac38271f23dea447d5728e9914fca7cea2edda43af6c43c415f8bc30b906060015b60405180910390a150505050565b6000600481805b82548110156111305760006110c28483815481106110ab57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160030154611e3f565b9050600081131561111d576111108483815481106110f057634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201546001600160a01b031682611cea565b61111a9084612a09565b92505b508061112881612c0c565b91505061107d565b5092915050565b6001546001600160a01b0316331480159061115d57506002546001600160a01b03163314155b1561117b57604051633689403d60e21b815260040160405180910390fd5b80600460008154811061119e57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160030160008282546111be9190612b8f565b9091555061067b90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383611efb565b6112366040518060a0016040528060006001600160a01b0316815260200160008152602001600060ff16815260200160008152602001600081525090565b6004828154811061125757634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a081018252600590930290910180546001600160a01b03168352600181015493830193909352600283015460ff169082015260038201546060820152600490910154608082015292915050565b6000828152602081905260409020600101546112cf81611b3e565b6106b78383611bcf565b600080516020612c7b8339815191526112f181611b3e565b6001600160a01b0383166000908152600560205260409020548015158061134957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b6113665760405163a84d9d9760e01b815260040160405180910390fd5b826004828154811061138857634e487b7160e01b600052603260045260246000fd5b600091825260209182902060046005909202010191909155604080516001600160a01b03871681529182018590527f6af11b7b0fa3a0001eea86cdc01b08604d3c974ef76506801c330db8aca293c59101611068565b600061059c600080516020612c7b83398151915283610ddd565b600061059c7faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c83610ddd565b6001546001600160a01b0316331461144e576040516257034d60e91b815260040160405180910390fd5b6106b7838383611f5e565b600080516020612c7b83398151915261147181611b3e565b6001600160a01b038316600090815260056020526040902054801515806114c957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b6114e65760405163a84d9d9760e01b815260040160405180910390fd5b662386f26fc1000083101561150e57604051632e01c96360e01b815260040160405180910390fd5b670de0b6b3a764000083111561153757604051635f08f99d60e01b815260040160405180910390fd5b826004828154811061155957634e487b7160e01b600052603260045260246000fd5b600091825260209182902060016005909202010191909155604080516001600160a01b03871681529182018590527f961e2483fa09e9fd159361d604d3c547aca03801b1ce4c758b036e9bacd8c0829101611068565b606060006115be836002612b70565b6115c9906002612a4a565b67ffffffffffffffff8111156115ef57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611619576020820181803683370190505b509050600360fc1b8160008151811061164257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061167f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006116a3846002612b70565b6116ae906001612a4a565b90505b6001811115611742576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106116f057634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061171457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361173b81612bf5565b90506116b1565b50831561068b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610728565b600061059c82612111565b6001600160a01b038116600090815260056020526040902054801515806117f457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b6118115760405163a84d9d9760e01b815260040160405180910390fd5b6001600160a01b038416600090815260066020908152604080832083805290915281205490811215611856576040516362422bc160e11b815260040160405180910390fd5b6001600160a01b03851660009081526006602090815260408083208584529091529020548061188486611e3f565b13156118a3576040516306ed1da360e51b815260040160405180910390fd5b600483815481106118c457634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600301548511156118f6576040516301d8c68960e51b815260040160405180910390fd5b846004848154811061191857634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160030160008282546119389190612b8f565b909155506119559050868461194c88611e3f565b610b4790612c27565b60006119986004858154811061197b57634e487b7160e01b600052603260045260246000fd5b600091825260209091206002600590920201015460ff1687612167565b90506119ae6001600160a01b0386168883611efb565b846001600160a01b0316876001600160a01b03167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb836040516119f391815260200190565b60405180910390a350505050505050565b600060048180805b8354811015611b34576001600160a01b038716600090815260066020908152604080832084845290915290205492508215611b22578515611ad257611ac1848281548110611a6a57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005909102015485546001600160a01b0390911690869084908110611aa957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016001015485611c34565b611acb9083612a09565b9150611b22565b611b15848281548110611af557634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201546001600160a01b031684611cea565b611b1f9083612a09565b91505b80611b2c81612c0c565b915050611a0c565b5095945050505050565b611b4881336121c8565b50565b611b558282610ddd565b61067b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611b8b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611bd98282610ddd565b1561067b576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080611c4a611c4385611e3f565b8490611e4a565b60035460405163fa481db960e01b81526001600160a01b038881166004830152602482018790529293506000929091169063fa481db99060440160206040518083038186803b158015611c9c57600080fd5b505afa158015611cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd491906128eb565b9050611ce08282611e4a565b9695505050505050565b60035460405163fa481db960e01b81526001600160a01b03848116600483015260248201849052600092839291169063fa481db99060440160206040518083038186803b158015611d3a57600080fd5b505afa158015611d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7291906128eb565b9050611d7e8382611e4a565b949350505050565b600061068b838361222c565b6000611da3856000610b4785611e3f565b83546001600160a01b0316600090815260056020526040902054611dcc90869061194c86611e3f565b611e016001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016873085612238565b83546001600160a01b0316600090815260056020526040902054611e2a908790610b4786611e3f565b50949350505050565b600061068b8383612270565b600061059c82612285565b600061068b83836122ef565b6001600160a01b038316600090815260066020908152604080832085845290915281208054839290611e89908490612a09565b9091555050505050565b600060ff831660121415611ea857508061059c565b601260ff84161015611edb57611ebf836012612ba6565b611eca90600a612ac5565b611ed49083612b70565b905061059c565b611ee6601284612ba6565b611ef190600a612ac5565b61068b9083612a62565b6040516001600160a01b0383166024820152604481018290526106b790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526123b4565b6001600160a01b03811660009081526005602052604090205480151580611fb657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b611fd35760405163a84d9d9760e01b815260040160405180910390fd5b600060048281548110611ff657634e487b7160e01b600052603260045260246000fd5b60009182526020822060026005909202019081015490925061201b9060ff1686611e93565b905081600401548183600301546120329190612a4a565b111561205157604051630313841f60e61b815260040160405180910390fd5b806004848154811061207357634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160030160008282546120939190612a4a565b909155506120a790508684610b4784611e3f565b6120bc6001600160a01b038516873088612238565b836001600160a01b0316866001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f628760405161210191815260200190565b60405180910390a3505050505050565b6000808212156121635760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610728565b5090565b600060ff83166012141561217c57508061059c565b601260ff841610156121a857612193836012612ba6565b61219e90600a612ac5565b611ed49083612a62565b6121b3601284612ba6565b6121be90600a612ac5565b61068b9083612b70565b6121d28282610ddd565b61067b576121ea816001600160a01b031660146115af565b6121f58360206115af565b604051602001612206929190612961565b60408051601f198184030181529082905262461bcd60e51b8252610728916004016129d6565b600061068b8383612486565b6040516001600160a01b03808516602483015283166044820152606481018290526106789085906323b872dd60e01b90608401611f27565b600061068b83670de0b6b3a764000084612548565b60006001600160ff1b038211156121635760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610728565b6000600160ff1b8314806123065750600160ff1b82145b1561232457604051630d01a11b60e21b815260040160405180910390fd5b60008060008512612335578461233a565b846000035b91506000841261234a578361234f565b836000035b9050600061235d8383612486565b90506001600160ff1b0381111561238a5760405163bf79e8d960e01b815260048101829052602401610728565b6000198087139086138082186001146123a357826123a8565b826000035b98975050505050505050565b6000612409826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126249092919063ffffffff16565b8051909150156106b757808060200190518101906124279190612837565b6106b75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610728565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106124ca5760405163698d9a0160e11b815260048101829052602401610728565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826125045780670de0b6b3a764000085040194505050505061059c565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6000808060001985870985870292508281108382030391505080600014156125915783828161258757634e487b7160e01b600052601260045260246000fd5b049250505061068b565b8381106125bb57604051631dcf306360e21b81526004810182905260248101859052604401610728565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6060611d7e8484600085856001600160a01b0385163b6126865760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610728565b600080866001600160a01b031685876040516126a29190612945565b60006040518083038185875af1925050503d80600081146126df576040519150601f19603f3d011682016040523d82523d6000602084013e6126e4565b606091505b50915091506126f48282866126ff565b979650505050505050565b6060831561270e57508161068b565b82511561271e5782518084602001fd5b8160405162461bcd60e51b815260040161072891906129d6565b600060208284031215612749578081fd5b813561068b81612c57565b60008060408385031215612766578081fd5b823561277181612c57565b9150602083013561278181612c57565b809150509250929050565b6000806040838503121561279e578182fd5b82356127a981612c57565b9150602083013561278181612c6c565b60008060408385031215612766578182fd5b600080604083850312156127dd578182fd5b82356127e881612c57565b946020939093013593505050565b60008060006060848603121561280a578081fd5b833561281581612c57565b925060208401359150604084013561282c81612c57565b809150509250925092565b600060208284031215612848578081fd5b815161068b81612c6c565b600060208284031215612864578081fd5b5035919050565b6000806040838503121561287d578182fd5b82359150602083013561278181612c57565b6000602082840312156128a0578081fd5b81356001600160e01b03198116811461068b578182fd5b6000806000606084860312156128cb578081fd5b83356128d681612c57565b95602085013595506040909401359392505050565b6000602082840312156128fc578081fd5b5051919050565b60008060408385031215612915578182fd5b50508035926020909101359150565b600060208284031215612935578081fd5b815160ff8116811461068b578182fd5b60008251612957818460208701612bc9565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612999816017850160208801612bc9565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516129ca816028840160208801612bc9565b01602801949350505050565b60208152600082518060208401526129f5816040850160208701612bc9565b601f01601f19169190910160400192915050565b600080821280156001600160ff1b0384900385131615612a2b57612a2b612c41565b600160ff1b8390038412811615612a4457612a44612c41565b50500190565b60008219821115612a5d57612a5d612c41565b500190565b600082612a7d57634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115612abd578160001904821115612aa357612aa3612c41565b80851615612ab057918102915b93841c9390800290612a87565b509250929050565b600061068b60ff841683600082612ade5750600161059c565b81612aeb5750600061059c565b8160018114612b015760028114612b0b57612b27565b600191505061059c565b60ff841115612b1c57612b1c612c41565b50506001821b61059c565b5060208310610133831016604e8410600b8410161715612b4a575081810a61059c565b612b548383612a82565b8060001904821115612b6857612b68612c41565b029392505050565b6000816000190483118215151615612b8a57612b8a612c41565b500290565b600082821015612ba157612ba1612c41565b500390565b600060ff821660ff841680821015612bc057612bc0612c41565b90039392505050565b60005b83811015612be4578181015183820152602001612bcc565b838111156106785750506000910152565b600081612c0457612c04612c41565b506000190190565b6000600019821415612c2057612c20612c41565b5060010190565b6000600160ff1b821415612c3d57612c3d612c41565b0390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114611b4857600080fd5b8015158114611b4857600080fdfe35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771a2646970667358221220e8d2a4c91e6eaac8b336ddeb802ae18b134526155d7ba6cf855ff45cbd4c6f3b64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(address,uint256,address)": {
        "details": "No differentiated treatment of deposit in the UA token and other collaterals",
        "params": {
          "amount": "Amount to be used as the collateral of the position. Might not be 18 decimals",
          "depositToken": "Token to be used for the collateral of the position",
          "user": "Account to deposit to"
        }
      },
      "getNumberOfCollaterals()": {
        "returns": {
          "_0": "List of Collateral tokens"
        }
      },
      "getReserveValue(address,bool)": {
        "params": {
          "isDiscounted": "Whether or not the reserve value should be discounted by the weight of the collateral",
          "user": "User address"
        },
        "returns": {
          "_0": "reserveValue Value of collaterals in USD. 18 decimals"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTotalValueLocked()": {
        "returns": {
          "_0": "Total Value Locked (tvl) in USD. 18 decimals"
        }
      },
      "getWhiteListedCollateral(uint256)": {
        "returns": {
          "_0": "Collateral The collateral at the index provided"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "settleLiquidationOnCollaterals(address,address)": {
        "params": {
          "liquidatee": "Liquidatee",
          "liquidator": "Liquidator"
        }
      },
      "settlePnL(address,int256)": {
        "params": {
          "amount": "PnL amount in UA to apply. 18 decimals",
          "user": "Account to apply the PnL to"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferUa(address,uint256)": {
        "params": {
          "amount": "Amount of UA tokens to be withdrawn. 18 decimals",
          "user": "Account to withdraw UA tokens to"
        }
      },
      "withdraw(address,uint256,address)": {
        "details": "Unlike `deposit`, differentiated treatment of withdrawals in the UA token and other collaterals",
        "params": {
          "amount": "Amount to withdraw from the vault. Might not be 18 decimals (decimals of the token)",
          "user": "Account to withdraw from",
          "withdrawToken": "Token to be withdrawn from the vault"
        }
      },
      "withdrawAll(address,address)": {
        "params": {
          "user": "Account to withdraw from",
          "withdrawToken": "Token to be withdrawn from the vault"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMathSD59x18__MulInputTooSmall()": [
        {
          "notice": "Emitted when one of the inputs is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__MulOverflow(uint256)": [
        {
          "notice": "Emitted when the intermediary absolute result overflows SD59x18."
        }
      ],
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "Vault_ClearingHouseZeroAddress()": [
        {
          "notice": "Emitted when the proposed clearingHouse address is equal to the zero address"
        }
      ],
      "Vault_CollateralAlreadyWhiteListed()": [
        {
          "notice": "Emitted when owner tries to whitelist a collateral already whitelisted"
        }
      ],
      "Vault_ExcessiveCollateralWeight()": [
        {
          "notice": "Emitted when the proposed collateral weight is above the limit"
        }
      ],
      "Vault_InsufficientBalance()": [
        {
          "notice": "Emitted when a user attempts to withdraw more collateral than available in vault"
        }
      ],
      "Vault_InsufficientCollateralWeight()": [
        {
          "notice": "Emitted when the proposed collateral weight is under the limit"
        }
      ],
      "Vault_InsuranceZeroAddress()": [
        {
          "notice": "Emitted when the proposed insurance address is equal to the zero address"
        }
      ],
      "Vault_MaxCollateralAmountExceeded()": [
        {
          "notice": "Emitted when a user attempts to withdraw more collateral than available in vault"
        }
      ],
      "Vault_OracleZeroAddress()": [
        {
          "notice": "Emitted when the proposed oracle address is equal to the zero address"
        }
      ],
      "Vault_SenderNotClearingHouse()": [
        {
          "notice": "Emitted when the sender is not the clearing house"
        }
      ],
      "Vault_SenderNotClearingHouseNorInsurance()": [
        {
          "notice": "Emitted when the sender is not the clearing house, nor the insurance"
        }
      ],
      "Vault_UADebt()": [
        {
          "notice": "Emitted when user tries to withdraw collateral while having a UA debt"
        }
      ],
      "Vault_UnsupportedCollateral()": [
        {
          "notice": "Emitted when a user attempts to use a token which is not whitelisted as collateral"
        }
      ],
      "Vault_WithdrawExcessiveAmount()": [
        {
          "notice": "Emitted when a user attempts to withdraw more than their balance"
        }
      ],
      "Vault_WithdrawReductionRatioTooHigh()": [
        {
          "notice": "Emitted when a user attempts to withdraw with a reduction ratio above 1e18"
        }
      ],
      "Vault_ZeroAddressConstructor(uint8)": [
        {
          "notice": "Emitted when the zero address is provided as a parameter in the constructor"
        }
      ]
    },
    "events": {
      "ClearingHouseChanged(address)": {
        "notice": "Emitted when a new ClearingHouse is connected to the vault"
      },
      "CollateralAdded(address,uint256,uint256)": {
        "notice": "Emitted when a new Oracle is connected to the vault"
      },
      "CollateralMaxAmountChanged(address,uint256)": {
        "notice": "Emitted when a collateral max amount changed"
      },
      "CollateralWeightChanged(address,uint256)": {
        "notice": "Emitted when a collateral weight changed"
      },
      "Deposit(address,address,uint256)": {
        "notice": "Emitted when collateral is deposited into the vault"
      },
      "InsuranceChanged(address)": {
        "notice": "Emitted when a new Insurance is connected to the vault"
      },
      "OracleChanged(address)": {
        "notice": "Emitted when a new Oracle is connected to the vault"
      },
      "TraderBadDebtGenerated(address,uint256)": {
        "notice": "Emitted when bad debt is settled for by the insurance reserve"
      },
      "Withdraw(address,address,uint256)": {
        "notice": "Emitted when collateral is withdrawn from the vault"
      }
    },
    "kind": "user",
    "methods": {
      "addWhiteListedCollateral(address,uint256,uint256)": {
        "notice": "Add a new token to the list of white listed ERC20 which can be used as collaterals"
      },
      "changeCollateralMaxAmount(address,uint256)": {
        "notice": "Change max amount of a white listed collateral         Useful as a risk mitigation measure in case one collateral drops in value"
      },
      "changeCollateralWeight(address,uint256)": {
        "notice": "Change weight of a white listed collateral         Useful as a risk mitigation measure in case one collateral drops in value"
      },
      "deposit(address,uint256,address)": {
        "notice": "Deposit reserveTokens to account"
      },
      "getNumberOfCollaterals()": {
        "notice": "Get all collateral tokens available for margin trading"
      },
      "getReserveValue(address,bool)": {
        "notice": "Get the balance of a trader, accounted for in USD. 18 decimals"
      },
      "getTotalValueLocked()": {
        "notice": "Get all value of all tokens deposited into the vault"
      },
      "getWhiteListedCollateral(uint256)": {
        "notice": "Get one collateral token available for margin trading"
      },
      "settleLiquidationOnCollaterals(address,address)": {
        "notice": "Allow liquidator to buy back collateral(s) of liquidated user at discounted price whereby settling his debt"
      },
      "settlePnL(address,int256)": {
        "notice": "Withdraw tokens from account"
      },
      "tokenToCollateralIdx(address)": {
        "notice": "Map white listed collateral tokens to their whiteListedCollaterals indexes"
      },
      "transferUa(address,uint256)": {
        "notice": "Transfer UA tokens from the vaultThe balance of the user from whom the UA tokens are been withdrawn must be updated (separately)"
      },
      "withdraw(address,uint256,address)": {
        "notice": "Withdraw tokens from account"
      },
      "withdrawAll(address,address)": {
        "notice": "Withdraw all tokens from account"
      }
    },
    "notice": "Keeps track of all token reserves for all market",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 70,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)"
      },
      {
        "astId": 13094,
        "contract": "contracts/Vault.sol:Vault",
        "label": "clearingHouse",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IClearingHouse)14906"
      },
      {
        "astId": 13098,
        "contract": "contracts/Vault.sol:Vault",
        "label": "insurance",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IInsurance)15360"
      },
      {
        "astId": 13102,
        "contract": "contracts/Vault.sol:Vault",
        "label": "oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IOracle)15498"
      },
      {
        "astId": 13106,
        "contract": "contracts/Vault.sol:Vault",
        "label": "whiteListedCollaterals",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Collateral)16184_storage)dyn_storage"
      },
      {
        "astId": 13113,
        "contract": "contracts/Vault.sol:Vault",
        "label": "tokenToCollateralIdx",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_contract(IERC20Metadata)2130,t_uint256)"
      },
      {
        "astId": 13119,
        "contract": "contracts/Vault.sol:Vault",
        "label": "balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_int256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Collateral)16184_storage)dyn_storage": {
        "base": "t_struct(Collateral)16184_storage",
        "encoding": "dynamic_array",
        "label": "struct IVault.Collateral[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IClearingHouse)14906": {
        "encoding": "inplace",
        "label": "contract IClearingHouse",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)2130": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(IInsurance)15360": {
        "encoding": "inplace",
        "label": "contract IInsurance",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)15498": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_int256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_int256)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)65_storage"
      },
      "t_mapping(t_contract(IERC20Metadata)2130,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Metadata)2130",
        "label": "mapping(contract IERC20Metadata => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_struct(Collateral)16184_storage": {
        "encoding": "inplace",
        "label": "struct IVault.Collateral",
        "members": [
          {
            "astId": 16175,
            "contract": "contracts/Vault.sol:Vault",
            "label": "asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)2130"
          },
          {
            "astId": 16177,
            "contract": "contracts/Vault.sol:Vault",
            "label": "weight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16179,
            "contract": "contracts/Vault.sol:Vault",
            "label": "decimals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 16181,
            "contract": "contracts/Vault.sol:Vault",
            "label": "currentAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16183,
            "contract": "contracts/Vault.sol:Vault",
            "label": "maxAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)65_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 62,
            "contract": "contracts/Vault.sol:Vault",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 64,
            "contract": "contracts/Vault.sol:Vault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}