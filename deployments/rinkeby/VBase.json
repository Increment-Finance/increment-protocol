{
  "address": "0xC923a20861d5b74ACbF8D37863f762E9EcAAd59d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "_aggregator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_heartBeat",
          "type": "uint256"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "_sequencerUptimeFeed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gracePeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PerpOwnable_NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PerpOwnable_OwnershipAlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PerpOwnable_TransferZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VBase_DataNotFresh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VBase_GracePeriodNotOver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VBase_IncorrectGracePeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VBase_InsufficientPrecision",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VBase_InvalidRoundPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VBase_InvalidRoundTimestamp",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VBase_SequencerDown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VBase_SequencerUptimeFeedZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newGracePeriod",
          "type": "uint256"
        }
      ],
      "name": "GracePeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newHeartBeat",
          "type": "uint256"
        }
      ],
      "name": "HeartBeatUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "PerpOwnerTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract AggregatorV3Interface",
          "name": "newSequencerUptimeFeed",
          "type": "address"
        }
      ],
      "name": "SequencerUptimeFeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOVERNANCE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aggregator",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIndexPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gracePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "heartBeat",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerUptimeFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newGracePeriod",
          "type": "uint256"
        }
      ],
      "name": "setGracePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newHeartBeat",
          "type": "uint256"
        }
      ],
      "name": "setHeartBeat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "newSequencerUptimeFeed",
          "type": "address"
        }
      ],
      "name": "setSequencerUptimeFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "transferPerpOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x64d92935d0422e0de39a748d909135569c8c9754eddf24f2f614696db651d7a0",
  "receipt": {
    "to": null,
    "from": "0x69C7c048e7C286B0a8Bcf7cD7620E71Ef7569421",
    "contractAddress": "0xC923a20861d5b74ACbF8D37863f762E9EcAAd59d",
    "transactionIndex": 6,
    "gasUsed": "1595809",
    "logsBloom": "0x
    "blockHash": "0x60285f649fbfb4c22e3a541d8e37e4f35a00b3f92bd4e47ac6afea154fb81c14",
    "transactionHash": "0x64d92935d0422e0de39a748d909135569c8c9754eddf24f2f614696db651d7a0",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 11179362,
        "transactionHash": "0x64d92935d0422e0de39a748d909135569c8c9754eddf24f2f614696db651d7a0",
        "address": "0xC923a20861d5b74ACbF8D37863f762E9EcAAd59d",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771",
          "0x00000000000000000000000069c7c048e7c286b0a8bcf7cd7620e71ef7569421",
          "0x00000000000000000000000069c7c048e7c286b0a8bcf7cd7620e71ef7569421"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x60285f649fbfb4c22e3a541d8e37e4f35a00b3f92bd4e47ac6afea154fb81c14"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 11179362,
        "transactionHash": "0x64d92935d0422e0de39a748d909135569c8c9754eddf24f2f614696db651d7a0",
        "address": "0xC923a20861d5b74ACbF8D37863f762E9EcAAd59d",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0x60285f649fbfb4c22e3a541d8e37e4f35a00b3f92bd4e47ac6afea154fb81c14"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 11179362,
        "transactionHash": "0x64d92935d0422e0de39a748d909135569c8c9754eddf24f2f614696db651d7a0",
        "address": "0xC923a20861d5b74ACbF8D37863f762E9EcAAd59d",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c",
          "0x00000000000000000000000069c7c048e7c286b0a8bcf7cd7620e71ef7569421",
          "0x00000000000000000000000069c7c048e7c286b0a8bcf7cd7620e71ef7569421"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x60285f649fbfb4c22e3a541d8e37e4f35a00b3f92bd4e47ac6afea154fb81c14"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 11179362,
        "transactionHash": "0x64d92935d0422e0de39a748d909135569c8c9754eddf24f2f614696db651d7a0",
        "address": "0xC923a20861d5b74ACbF8D37863f762E9EcAAd59d",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0x60285f649fbfb4c22e3a541d8e37e4f35a00b3f92bd4e47ac6afea154fb81c14"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 11179362,
        "transactionHash": "0x64d92935d0422e0de39a748d909135569c8c9754eddf24f2f614696db651d7a0",
        "address": "0xC923a20861d5b74ACbF8D37863f762E9EcAAd59d",
        "topics": [
          "0xdec3e526c25df3c882255e9a23a2b9e896887938541a26e157b00ed175a7f493"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000015f90",
        "logIndex": 25,
        "blockHash": "0x60285f649fbfb4c22e3a541d8e37e4f35a00b3f92bd4e47ac6afea154fb81c14"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 11179362,
        "transactionHash": "0x64d92935d0422e0de39a748d909135569c8c9754eddf24f2f614696db651d7a0",
        "address": "0xC923a20861d5b74ACbF8D37863f762E9EcAAd59d",
        "topics": [
          "0x32db38c7b3e5c8341ceb63fa1ae4ce0ba937b716427686f76033425ef435341a"
        ],
        "data": "0x0000000000000000000000003c3f800c3aa34256ef63271b9e7d39752a2d519f",
        "logIndex": 26,
        "blockHash": "0x60285f649fbfb4c22e3a541d8e37e4f35a00b3f92bd4e47ac6afea154fb81c14"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 11179362,
        "transactionHash": "0x64d92935d0422e0de39a748d909135569c8c9754eddf24f2f614696db651d7a0",
        "address": "0xC923a20861d5b74ACbF8D37863f762E9EcAAd59d",
        "topics": [
          "0x33d1191f5a3abfe19d468d51bb5ece97489f1277a912a5b5c65992fc279ad3d4"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000012c",
        "logIndex": 27,
        "blockHash": "0x60285f649fbfb4c22e3a541d8e37e4f35a00b3f92bd4e47ac6afea154fb81c14"
      }
    ],
    "blockNumber": 11179362,
    "cumulativeGasUsed": "4728138",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "vEUR base token",
    "vEUR",
    "0x78F9e60608bF48a1155b4B2A5e31F32318a1d85F",
    90000,
    "0x3C3F800c3aa34256Ef63271b9e7D39752A2d519f",
    300
  ],
  "numDeployments": 1,
  "solcInputHash": "e1cef607481b161ae69d7ea60025156b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_heartBeat\",\"type\":\"uint256\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_sequencerUptimeFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gracePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PerpOwnable_NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PerpOwnable_OwnershipAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PerpOwnable_TransferZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VBase_DataNotFresh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VBase_GracePeriodNotOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VBase_IncorrectGracePeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VBase_InsufficientPrecision\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VBase_InvalidRoundPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VBase_InvalidRoundTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VBase_SequencerDown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VBase_SequencerUptimeFeedZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGracePeriod\",\"type\":\"uint256\"}],\"name\":\"GracePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newHeartBeat\",\"type\":\"uint256\"}],\"name\":\"HeartBeatUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PerpOwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"newSequencerUptimeFeed\",\"type\":\"address\"}],\"name\":\"SequencerUptimeFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNANCE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIndexPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gracePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heartBeat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerUptimeFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGracePeriod\",\"type\":\"uint256\"}],\"name\":\"setGracePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newHeartBeat\",\"type\":\"uint256\"}],\"name\":\"setHeartBeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"newSequencerUptimeFeed\",\"type\":\"address\"}],\"name\":\"setSequencerUptimeFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferPerpOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferPerpOwner(address)\":{\"params\":{\"recipient\":\"Account granted `perp` access control.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"PerpOwnable_NotOwner()\":[{\"notice\":\"Emitted when the sender is not perp\"}],\"PerpOwnable_OwnershipAlreadyClaimed()\":[{\"notice\":\"Emitted when the ownership of the contract has already been claimed\"}],\"PerpOwnable_TransferZeroAddress()\":[{\"notice\":\"Emitted when the proposed address is equal to the zero address\"}],\"VBase_DataNotFresh()\":[{\"notice\":\"Emitted when the latest round's data is older than the oracle's max refresh time\"}],\"VBase_GracePeriodNotOver()\":[{\"notice\":\"Emitted when Zksync sequencer hasn't been back up for long enough\"}],\"VBase_IncorrectGracePeriod()\":[{\"notice\":\"Emitted when proposed grace period is outside of the bounds\"}],\"VBase_InsufficientPrecision()\":[{\"notice\":\"Emitted when the proposed aggregators decimals are less than PRECISION\"}],\"VBase_InvalidRoundPrice()\":[{\"notice\":\"Emitted when the latest round's price is invalid\"}],\"VBase_InvalidRoundTimestamp()\":[{\"notice\":\"Emitted when the latest round is incomplete\"}],\"VBase_SequencerDown()\":[{\"notice\":\"Emitted when Zksync sequencer is down\"}],\"VBase_SequencerUptimeFeedZeroAddress()\":[{\"notice\":\"Emitted when proposed sequencer uptime feed address is equal to the zero address\"}]},\"events\":{\"GracePeriodUpdated(uint256)\":{\"notice\":\"Emitted when grace period is updated\"},\"HeartBeatUpdated(uint256)\":{\"notice\":\"Emitted when oracle heart beat is updated\"},\"SequencerUptimeFeedUpdated(address)\":{\"notice\":\"Emitted when sequencer uptime feed is updated\"}},\"kind\":\"user\",\"methods\":{\"transferPerpOwner(address)\":{\"notice\":\"Transfer `perp` accountMeant to be used only once at deployment as Perpetual can't transfer ownership afterwards\"}},\"notice\":\"ERC20 token traded on the CryptoSwap pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/VBase.sol\":\"VBase\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/IIncreAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IIncreAccessControl is IAccessControl {\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function isGovernor(address account) external view returns (bool);\\n\\n    function isManager(address account) external view returns (bool);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0xb5ae4cbf7c064a5408ccff0ad110e69607a273c4b121f6d35edf11539c2ddfcd\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IVirtualToken} from \\\"../interfaces/IVirtualToken.sol\\\";\\n\\ninterface IVBase is IVirtualToken {\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when oracle heart beat is updated\\n    /// @param newHeartBeat New heart beat value\\n    event HeartBeatUpdated(uint256 newHeartBeat);\\n\\n    /// @notice Emitted when sequencer uptime feed is updated\\n    /// @param newSequencerUptimeFeed New sequencer uptime feed\\n    event SequencerUptimeFeedUpdated(AggregatorV3Interface newSequencerUptimeFeed);\\n\\n    /// @notice Emitted when grace period is updated\\n    /// @param newGracePeriod New grace period\\n    event GracePeriodUpdated(uint256 newGracePeriod);\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the proposed aggregators decimals are less than PRECISION\\n    error VBase_InsufficientPrecision();\\n\\n    /// @notice Emitted when the latest round is incomplete\\n    error VBase_InvalidRoundTimestamp();\\n\\n    /// @notice Emitted when the latest round's price is invalid\\n    error VBase_InvalidRoundPrice();\\n\\n    /// @notice Emitted when the latest round's data is older than the oracle's max refresh time\\n    error VBase_DataNotFresh();\\n\\n    /// @notice Emitted when proposed sequencer uptime feed address is equal to the zero address\\n    error VBase_SequencerUptimeFeedZeroAddress();\\n\\n    /// @notice Emitted when proposed grace period is outside of the bounds\\n    error VBase_IncorrectGracePeriod();\\n\\n    /// @notice Emitted when Zksync sequencer is down\\n    error VBase_SequencerDown();\\n\\n    /// @notice Emitted when Zksync sequencer hasn't been back up for long enough\\n    error VBase_GracePeriodNotOver();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function getIndexPrice() external view returns (int256);\\n\\n    function heartBeat() external view returns (uint256);\\n\\n    function sequencerUptimeFeed() external view returns (AggregatorV3Interface);\\n\\n    function gracePeriod() external view returns (uint256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function setHeartBeat(uint256 newHeartBeat) external;\\n\\n    function setSequencerUptimeFeed(AggregatorV3Interface newSequencerUptimeFeed) external;\\n\\n    function setGracePeriod(uint256 newGracePeriod) external;\\n}\\n\",\"keccak256\":\"0xdd755b91ebf39942b92635950a1a4a086919652ab229042e3d6c98f82d96021c\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVirtualToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IVirtualToken is IERC20Metadata {\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0dda9dc3d416b9aaeb6e93915b33c2b358b4ee5b9e477fa3b7ff9be8198e95ec\",\"license\":\"AGPL-3.0\"},\"contracts/tokens/BaseERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice Modern and gas efficient ERC20 implementation.\\n/// @author Modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract BaseERC20 is IERC20, IERC20Metadata {\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public override name;\\n\\n    string public override symbol;\\n\\n    uint8 public constant override decimals = 18;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public override totalSupply;\\n\\n    mapping(address => uint256) public override balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) external virtual override returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x186bd1b0c23c76526b4335a13a23ccde6889b52535f5d5a150869587094d2f06\",\"license\":\"AGPL-3.0-only\"},\"contracts/tokens/VBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// contracts\\nimport {VirtualToken} from \\\"./VirtualToken.sol\\\";\\nimport {IncreAccessControl} from \\\"../utils/IncreAccessControl.sol\\\";\\n\\n// interfaces\\nimport {IVBase} from \\\"../interfaces/IVBase.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/// @notice ERC20 token traded on the CryptoSwap pool\\ncontract VBase is IVBase, IncreAccessControl, VirtualToken {\\n    uint8 internal constant PRECISION = 18;\\n    uint256 public override heartBeat;\\n\\n    AggregatorV3Interface public immutable aggregator;\\n    AggregatorV3Interface public override sequencerUptimeFeed;\\n    uint256 public override gracePeriod;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        AggregatorV3Interface _aggregator,\\n        uint256 _heartBeat,\\n        AggregatorV3Interface _sequencerUptimeFeed,\\n        uint256 _gracePeriod\\n    ) VirtualToken(_name, _symbol) {\\n        if (_aggregator.decimals() > PRECISION) revert VBase_InsufficientPrecision();\\n        aggregator = _aggregator;\\n        setHeartBeat(_heartBeat);\\n        setSequencerUptimeFeed(_sequencerUptimeFeed);\\n        setGracePeriod(_gracePeriod);\\n    }\\n\\n    /* *************** */\\n    /*   Governance    */\\n    /* *************** */\\n\\n    function setHeartBeat(uint256 newHeartBeat) public override onlyRole(GOVERNANCE) {\\n        heartBeat = newHeartBeat;\\n\\n        emit HeartBeatUpdated(newHeartBeat);\\n    }\\n\\n    function setSequencerUptimeFeed(AggregatorV3Interface newSequencerUptimeFeed) public override onlyRole(GOVERNANCE) {\\n        if (address(newSequencerUptimeFeed) == address(0)) revert VBase_SequencerUptimeFeedZeroAddress();\\n\\n        sequencerUptimeFeed = newSequencerUptimeFeed;\\n        emit SequencerUptimeFeedUpdated(newSequencerUptimeFeed);\\n    }\\n\\n    function setGracePeriod(uint256 newGracePeriod) public override onlyRole(GOVERNANCE) {\\n        if (newGracePeriod < 60) revert VBase_IncorrectGracePeriod();\\n        if (newGracePeriod > 3600) revert VBase_IncorrectGracePeriod();\\n\\n        gracePeriod = newGracePeriod;\\n        emit GracePeriodUpdated(newGracePeriod);\\n    }\\n\\n    /* ****************** */\\n    /*   Global getter    */\\n    /* ****************** */\\n\\n    function getIndexPrice() external view override returns (int256) {\\n        // Check if L2 sequencer up when transaction was received\\n        {\\n            (, int256 sequencerStatus, uint256 sequencerStatusLastUpdatedAt, , ) = sequencerUptimeFeed\\n                .latestRoundData();\\n\\n            // 0 means sequencer is up & 1 sequencer is down\\n            bool isSequencerUp = sequencerStatus == 0;\\n            if (!isSequencerUp) revert VBase_SequencerDown();\\n\\n            // make sure the grace period has passed after the sequencer is back up\\n            uint256 timeSinceUp = block.timestamp - sequencerStatusLastUpdatedAt;\\n\\n            if (timeSinceUp <= gracePeriod) revert VBase_GracePeriodNotOver();\\n        }\\n\\n        return _chainlinkPrice(aggregator);\\n    }\\n\\n    function _chainlinkPrice(AggregatorV3Interface chainlinkInterface) internal view returns (int256) {\\n        uint8 chainlinkDecimals = chainlinkInterface.decimals();\\n        (, int256 roundPrice, , uint256 roundTimestamp, ) = chainlinkInterface.latestRoundData();\\n\\n        // If the round is not complete yet, roundTimestamp is 0\\n        if (roundTimestamp <= 0) revert VBase_InvalidRoundTimestamp();\\n        if (roundPrice <= 0) revert VBase_InvalidRoundPrice();\\n        if (roundTimestamp + heartBeat < block.timestamp) revert VBase_DataNotFresh();\\n\\n        int256 scaledPrice = (roundPrice * int256(10**(PRECISION - chainlinkDecimals)));\\n        return scaledPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x998ad11b49b8457f3e1993348bc4bb3fb7394a0e3ad306ade1250a0834ca2a7a\",\"license\":\"AGPL-3.0\"},\"contracts/tokens/VirtualToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// contracts\\nimport {BaseERC20} from \\\"./BaseERC20.sol\\\";\\nimport {PerpOwnable} from \\\"../utils/PerpOwnable.sol\\\";\\n\\n// interfaces\\nimport {IVirtualToken} from \\\"../interfaces/IVirtualToken.sol\\\";\\n\\ncontract VirtualToken is IVirtualToken, BaseERC20, PerpOwnable {\\n    constructor(string memory _name, string memory _symbol) BaseERC20(_name, _symbol) {}\\n\\n    function mint(uint256 amount) external override onlyPerp {\\n        _mint(perp, amount);\\n    }\\n\\n    function burn(uint256 amount) external override onlyPerp {\\n        _burn(perp, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x26311ab9519cf14cc461522c855af74f6e7a632c642d2e27f07db5c0d731dcac\",\"license\":\"AGPL-3.0\"},\"contracts/utils/IncreAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n// interfaces\\nimport {IIncreAccessControl} from \\\"../interfaces/IIncreAccessControl.sol\\\";\\n\\n/// @notice Increment access control contract.\\ncontract IncreAccessControl is AccessControl {\\n    bytes32 public constant GOVERNANCE = keccak256(\\\"GOVERNANCE\\\");\\n    bytes32 public constant MANAGER = keccak256(\\\"MANAGER\\\");\\n\\n    constructor() {\\n        _setupRole(GOVERNANCE, msg.sender);\\n        _setRoleAdmin(GOVERNANCE, GOVERNANCE);\\n\\n        _setupRole(MANAGER, msg.sender);\\n        _setRoleAdmin(MANAGER, GOVERNANCE);\\n    }\\n\\n    // utils\\n    function isGovernor(address account) external view returns (bool) {\\n        return hasRole(GOVERNANCE, account);\\n    }\\n\\n    function isManager(address account) external view returns (bool) {\\n        return hasRole(MANAGER, account);\\n    }\\n}\\n\",\"keccak256\":\"0x5e53b6d6dd249e521fef214100871de5529c733ef9a258d3ce2b701f3b066cf7\",\"license\":\"AGPL-3.0\"},\"contracts/utils/PerpOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n/// @notice Emitted when the sender is not perp\\nerror PerpOwnable_NotOwner();\\n\\n/// @notice Emitted when the proposed address is equal to the zero address\\nerror PerpOwnable_TransferZeroAddress();\\n\\n/// @notice Emitted when the ownership of the contract has already been claimed\\nerror PerpOwnable_OwnershipAlreadyClaimed();\\n\\n/// @notice Perp access control contract, simplied version of IncreOwnable\\ncontract PerpOwnable {\\n    address public perp;\\n\\n    event PerpOwnerTransferred(address indexed sender, address indexed recipient);\\n\\n    /// @notice Access control modifier that requires modified function to be called by the perp contract\\n    modifier onlyPerp() {\\n        if (msg.sender != perp) revert PerpOwnable_NotOwner();\\n        _;\\n    }\\n\\n    /// @notice Transfer `perp` account\\n    /// @notice Meant to be used only once at deployment as Perpetual can't transfer ownership afterwards\\n    /// @param recipient Account granted `perp` access control.\\n    function transferPerpOwner(address recipient) external {\\n        if (recipient == address(0)) revert PerpOwnable_TransferZeroAddress();\\n        if (perp != address(0)) revert PerpOwnable_OwnershipAlreadyClaimed();\\n\\n        perp = recipient;\\n        emit PerpOwnerTransferred(msg.sender, recipient);\\n    }\\n}\\n\",\"keccak256\":\"0x6e552e8c7572353b8c68dfa2cb40a603d37c6605b06af66c78ecc5c022cb71bb\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620022173803806200221783398101604081905262000034916200083d565b8585818162000053600080516020620021f783398151915233620001bf565b6200006e600080516020620021f783398151915280620001cf565b62000089600080516020620021d783398151915233620001bf565b620000b3600080516020620021d7833981519152600080516020620021f7833981519152620001cf565b8151620000c8906001906020850190620006eb565b508051620000de906002906020840190620006eb565b5050505050601260ff16846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200012257600080fd5b505afa15801562000137573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200015d9190620008db565b60ff161115620001805760405163fd5f4cad60e01b815260040160405180910390fd5b6001600160601b0319606085901b166080526200019d836200021a565b620001a88262000272565b620001b38162000304565b50505050505062000a9f565b620001cb82826200039c565b5050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b600080516020620021f783398151915262000235816200043c565b60078290556040518281527fdec3e526c25df3c882255e9a23a2b9e896887938541a26e157b00ed175a7f493906020015b60405180910390a15050565b600080516020620021f78339815191526200028d816200043c565b6001600160a01b038216620002b55760405163761c4c9760e01b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0384169081179091556040519081527f32db38c7b3e5c8341ceb63fa1ae4ce0ba937b716427686f76033425ef435341a9060200162000266565b600080516020620021f78339815191526200031f816200043c565b603c821015620003425760405163138d111360e01b815260040160405180910390fd5b610e10821115620003665760405163138d111360e01b815260040160405180910390fd5b60098290556040518281527f33d1191f5a3abfe19d468d51bb5ece97489f1277a912a5b5c65992fc279ad3d49060200162000266565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620001cb576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003f83390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6200044881336200044b565b50565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620001cb5762000495816001600160a01b03166014620004ef60201b62000c2a1760201c565b620004ab83602062000c2a620004ef821b17811c565b604051602001620004be929190620008fe565b60408051601f198184030181529082905262461bcd60e51b8252620004e69160040162000977565b60405180910390fd5b6060600062000500836002620009c7565b6200050d906002620009ac565b6001600160401b038111156200053357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156200055e576020820181803683370190505b509050600360fc1b816000815181106200058857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110620005c657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000620005ec846002620009c7565b620005f9906001620009ac565b90505b600181111562000693576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106200063d57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106200066257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936200068b8162000a1c565b9050620005fc565b508315620006e45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620004e6565b9392505050565b828054620006f99062000a36565b90600052602060002090601f0160209004810192826200071d576000855562000768565b82601f106200073857805160ff191683800117855562000768565b8280016001018555821562000768579182015b82811115620007685782518255916020019190600101906200074b565b50620007769291506200077a565b5090565b5b808211156200077657600081556001016200077b565b80516001600160a01b0381168114620007a957600080fd5b919050565b600082601f830112620007bf578081fd5b81516001600160401b0380821115620007dc57620007dc62000a89565b604051601f8301601f19908116603f0116810190828211818310171562000807576200080762000a89565b8160405283815286602085880101111562000820578485fd5b62000833846020830160208901620009e9565b9695505050505050565b60008060008060008060c0878903121562000856578182fd5b86516001600160401b03808211156200086d578384fd5b6200087b8a838b01620007ae565b9750602089015191508082111562000891578384fd5b50620008a089828a01620007ae565b955050620008b16040880162000791565b935060608701519250620008c86080880162000791565b915060a087015190509295509295509295565b600060208284031215620008ed578081fd5b815160ff81168114620006e4578182fd5b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162000938816017850160208801620009e9565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516200096b816028840160208801620009e9565b01602801949350505050565b602081526000825180602084015262000998816040850160208701620009e9565b601f01601f19169190910160400192915050565b60008219821115620009c257620009c262000a73565b500190565b6000816000190483118215151615620009e457620009e462000a73565b500290565b60005b8381101562000a06578181015183820152602001620009ec565b8381111562000a16576000848401525b50505050565b60008162000a2e5762000a2e62000a73565b506000190190565b600181811c9082168062000a4b57607f821691505b6020821081141562000a6d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60805160601c61171262000ac5600039600081816102b0015261094601526117126000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806391d148541161010f578063b8f44963116100a2578063dd62ed3e11610071578063dd62ed3e14610457578063e43581b814610482578063f2f6596014610495578063f3ae2415146104a857600080fd5b8063b8f449631461040b578063bfa4c00c1461041e578063d03bc72114610431578063d547741f1461044457600080fd5b8063a217fddf116100de578063a217fddf146103d4578063a7264705146103dc578063a9059cbb146103ef578063b56a9f2c1461040257600080fd5b806391d148541461039d57806395d89b41146103b0578063a06db7dc146103b8578063a0712d68146103c157600080fd5b8063248a9ca31161018757806336568abe1161015657806336568abe1461034f57806342966c681461036257806358c0994a1461037557806370a082311461037d57600080fd5b8063248a9ca3146102ea5780632e5997fe1461030d5780632f2ff15d14610322578063313ce5671461033557600080fd5b806318160ddd116101c357806318160ddd146102685780631b2df8501461027157806323b872dd14610298578063245a7bfc146102ab57600080fd5b806301ffc9a7146101f557806306fdde031461021d578063095ea7b3146102325780631462783414610245575b600080fd5b6102086102033660046112cd565b6104bb565b60405190151581526020015b60405180910390f35b6102256104f2565b60405161021491906113da565b610208610240366004611266565b610580565b61025a60008051602061169d83398151915281565b604051908152602001610214565b61025a60035481565b61025a7faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c81565b6102086102a6366004611226565b6105ec565b6102d27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610214565b61025a6102f8366004611291565b60009081526020819052604090206001015490565b61032061031b3660046111d2565b6106cc565b005b6103206103303660046112a9565b610769565b61033d601281565b60405160ff9091168152602001610214565b61032061035d3660046112a9565b610793565b610320610370366004611291565b610816565b61025a610859565b61025a61038b3660046111d2565b60046020526000908152604090205481565b6102086103ab3660046112a9565b61096f565b610225610998565b61025a60095481565b6103206103cf366004611291565b6109a5565b61025a600081565b6008546102d2906001600160a01b031681565b6102086103fd366004611266565b6109e5565b61025a60075481565b6103206104193660046111d2565b610a4b565b6006546102d2906001600160a01b031681565b61032061043f366004611291565b610ae0565b6103206104523660046112a9565b610b2d565b61025a6104653660046111ee565b600560209081526000928352604080842090915290825290205481565b6102086104903660046111d2565b610b52565b6103206104a3366004611291565b610b6c565b6102086104b63660046111d2565b610bfe565b60006001600160e01b03198216637965db0b60e01b14806104ec57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600180546104ff90611636565b80601f016020809104026020016040519081016040528092919081815260200182805461052b90611636565b80156105785780601f1061054d57610100808354040283529160200191610578565b820191906000526020600020905b81548152906001019060200180831161055b57829003601f168201915b505050505081565b3360008181526005602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906105db9086815260200190565b60405180910390a350600192915050565b6001600160a01b038316600090815260056020908152604080832033845290915281205460001981146106485761062383826115b5565b6001600160a01b03861660009081526005602090815260408083203384529091529020555b6001600160a01b038516600090815260046020526040812080548592906106709084906115b5565b90915550506001600160a01b03808516600081815260046020526040908190208054870190555190918716906000805160206116bd833981519152906106b99087815260200190565b60405180910390a3506001949350505050565b6001600160a01b0381166106f35760405163dbdaa89360e01b815260040160405180910390fd5b6006546001600160a01b03161561071d57604051630bd944dd60e21b815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f7b9555f62c991958c9d478fd36e574a975bfb8814d5d8f82fb9363a03d3dc63590600090a350565b60008281526020819052604090206001015461078481610e13565b61078e8383610e1d565b505050565b6001600160a01b03811633146108085760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6108128282610ea1565b5050565b6006546001600160a01b031633146108405760405162529fc560e41b815260040160405180910390fd5b600654610856906001600160a01b031682610f06565b50565b6000806000600860009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108ac57600080fd5b505afa1580156108c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e491906112f5565b50919450925050821590508061090d5760405163529fca8360e11b815260040160405180910390fd5b600061091983426115b5565b9050600954811161093d576040516305ddd3fb60e01b815260040160405180910390fd5b5050505061096a7f0000000000000000000000000000000000000000000000000000000000000000610f70565b905090565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600280546104ff90611636565b6006546001600160a01b031633146109cf5760405162529fc560e41b815260040160405180910390fd5b600654610856906001600160a01b0316826110fd565b33600090815260046020526040812080548391908390610a069084906115b5565b90915550506001600160a01b038316600081815260046020526040908190208054850190555133906000805160206116bd833981519152906105db9086815260200190565b60008051602061169d833981519152610a6381610e13565b6001600160a01b038216610a8a5760405163761c4c9760e01b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0384169081179091556040519081527f32db38c7b3e5c8341ceb63fa1ae4ce0ba937b716427686f76033425ef435341a906020015b60405180910390a15050565b60008051602061169d833981519152610af881610e13565b60078290556040518281527fdec3e526c25df3c882255e9a23a2b9e896887938541a26e157b00ed175a7f49390602001610ad4565b600082815260208190526040902060010154610b4881610e13565b61078e8383610ea1565b60006104ec60008051602061169d8339815191528361096f565b60008051602061169d833981519152610b8481610e13565b603c821015610ba65760405163138d111360e01b815260040160405180910390fd5b610e10821115610bc95760405163138d111360e01b815260040160405180910390fd5b60098290556040518281527f33d1191f5a3abfe19d468d51bb5ece97489f1277a912a5b5c65992fc279ad3d490602001610ad4565b60006104ec7faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c8361096f565b60606000610c39836002611596565b610c4490600261140d565b67ffffffffffffffff811115610c6a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610c94576020820181803683370190505b509050600360fc1b81600081518110610cbd57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610cfa57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000610d1e846002611596565b610d2990600161140d565b90505b6001811115610dbd576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610d6b57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110610d8f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93610db68161161f565b9050610d2c565b508315610e0c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107ff565b9392505050565b610856813361114f565b610e27828261096f565b610812576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610e5d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610eab828261096f565b15610812576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b03821660009081526004602052604081208054839290610f2e9084906115b5565b90915550506003805482900390556040518181526000906001600160a01b038416906000805160206116bd833981519152906020015b60405180910390a35050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610fac57600080fd5b505afa158015610fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe49190611344565b9050600080846001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561102257600080fd5b505afa158015611036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105a91906112f5565b5093505092505060008111611082576040516318b24a8d60e11b815260040160405180910390fd5b600082136110a3576040516308d1c0fd60e01b815260040160405180910390fd5b42600754826110b2919061140d565b10156110d157604051630ac652fd60e21b815260040160405180910390fd5b60006110de8460126115cc565b6110e990600a611468565b6110f39084611513565b9695505050505050565b806003600082825461110f919061140d565b90915550506001600160a01b0382166000818152600460209081526040808320805486019055518481526000805160206116bd8339815191529101610f64565b611159828261096f565b61081257611171816001600160a01b03166014610c2a565b61117c836020610c2a565b60405160200161118d929190611365565b60408051601f198184030181529082905262461bcd60e51b82526107ff916004016113da565b805169ffffffffffffffffffff811681146111cd57600080fd5b919050565b6000602082840312156111e3578081fd5b8135610e0c81611687565b60008060408385031215611200578081fd5b823561120b81611687565b9150602083013561121b81611687565b809150509250929050565b60008060006060848603121561123a578081fd5b833561124581611687565b9250602084013561125581611687565b929592945050506040919091013590565b60008060408385031215611278578182fd5b823561128381611687565b946020939093013593505050565b6000602082840312156112a2578081fd5b5035919050565b600080604083850312156112bb578182fd5b82359150602083013561121b81611687565b6000602082840312156112de578081fd5b81356001600160e01b031981168114610e0c578182fd5b600080600080600060a0868803121561130c578081fd5b611315866111b3565b9450602086015193506040860151925060608601519150611338608087016111b3565b90509295509295909350565b600060208284031215611355578081fd5b815160ff81168114610e0c578182fd5b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161139d8160178501602088016115ef565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516113ce8160288401602088016115ef565b01602801949350505050565b60208152600082518060208401526113f98160408501602087016115ef565b601f01601f19169190910160400192915050565b6000821982111561142057611420611671565b500190565b600181815b8085111561146057816000190482111561144657611446611671565b8085161561145357918102915b93841c939080029061142a565b509250929050565b6000610e0c60ff841683600082611481575060016104ec565b8161148e575060006104ec565b81600181146114a457600281146114ae576114ca565b60019150506104ec565b60ff8411156114bf576114bf611671565b50506001821b6104ec565b5060208310610133831016604e8410600b84101617156114ed575081810a6104ec565b6114f78383611425565b806000190482111561150b5761150b611671565b029392505050565b60006001600160ff1b038184138284138082168684048611161561153957611539611671565b600160ff1b8487128281168783058912161561155757611557611671565b85871292508782058712848416161561157257611572611671565b8785058712818416161561158857611588611671565b505050929093029392505050565b60008160001904831182151516156115b0576115b0611671565b500290565b6000828210156115c7576115c7611671565b500390565b600060ff821660ff8416808210156115e6576115e6611671565b90039392505050565b60005b8381101561160a5781810151838201526020016115f2565b83811115611619576000848401525b50505050565b60008161162e5761162e611671565b506000190190565b600181811c9082168061164a57607f821691505b6020821081141561166b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461085657600080fdfe35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220c3d425dbea3b4fd460b5f0daca1b145927a1ce08e9a3b8c8e70100719f06c69d64736f6c63430008040033af290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c806391d148541161010f578063b8f44963116100a2578063dd62ed3e11610071578063dd62ed3e14610457578063e43581b814610482578063f2f6596014610495578063f3ae2415146104a857600080fd5b8063b8f449631461040b578063bfa4c00c1461041e578063d03bc72114610431578063d547741f1461044457600080fd5b8063a217fddf116100de578063a217fddf146103d4578063a7264705146103dc578063a9059cbb146103ef578063b56a9f2c1461040257600080fd5b806391d148541461039d57806395d89b41146103b0578063a06db7dc146103b8578063a0712d68146103c157600080fd5b8063248a9ca31161018757806336568abe1161015657806336568abe1461034f57806342966c681461036257806358c0994a1461037557806370a082311461037d57600080fd5b8063248a9ca3146102ea5780632e5997fe1461030d5780632f2ff15d14610322578063313ce5671461033557600080fd5b806318160ddd116101c357806318160ddd146102685780631b2df8501461027157806323b872dd14610298578063245a7bfc146102ab57600080fd5b806301ffc9a7146101f557806306fdde031461021d578063095ea7b3146102325780631462783414610245575b600080fd5b6102086102033660046112cd565b6104bb565b60405190151581526020015b60405180910390f35b6102256104f2565b60405161021491906113da565b610208610240366004611266565b610580565b61025a60008051602061169d83398151915281565b604051908152602001610214565b61025a60035481565b61025a7faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c81565b6102086102a6366004611226565b6105ec565b6102d27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610214565b61025a6102f8366004611291565b60009081526020819052604090206001015490565b61032061031b3660046111d2565b6106cc565b005b6103206103303660046112a9565b610769565b61033d601281565b60405160ff9091168152602001610214565b61032061035d3660046112a9565b610793565b610320610370366004611291565b610816565b61025a610859565b61025a61038b3660046111d2565b60046020526000908152604090205481565b6102086103ab3660046112a9565b61096f565b610225610998565b61025a60095481565b6103206103cf366004611291565b6109a5565b61025a600081565b6008546102d2906001600160a01b031681565b6102086103fd366004611266565b6109e5565b61025a60075481565b6103206104193660046111d2565b610a4b565b6006546102d2906001600160a01b031681565b61032061043f366004611291565b610ae0565b6103206104523660046112a9565b610b2d565b61025a6104653660046111ee565b600560209081526000928352604080842090915290825290205481565b6102086104903660046111d2565b610b52565b6103206104a3366004611291565b610b6c565b6102086104b63660046111d2565b610bfe565b60006001600160e01b03198216637965db0b60e01b14806104ec57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600180546104ff90611636565b80601f016020809104026020016040519081016040528092919081815260200182805461052b90611636565b80156105785780601f1061054d57610100808354040283529160200191610578565b820191906000526020600020905b81548152906001019060200180831161055b57829003601f168201915b505050505081565b3360008181526005602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906105db9086815260200190565b60405180910390a350600192915050565b6001600160a01b038316600090815260056020908152604080832033845290915281205460001981146106485761062383826115b5565b6001600160a01b03861660009081526005602090815260408083203384529091529020555b6001600160a01b038516600090815260046020526040812080548592906106709084906115b5565b90915550506001600160a01b03808516600081815260046020526040908190208054870190555190918716906000805160206116bd833981519152906106b99087815260200190565b60405180910390a3506001949350505050565b6001600160a01b0381166106f35760405163dbdaa89360e01b815260040160405180910390fd5b6006546001600160a01b03161561071d57604051630bd944dd60e21b815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f7b9555f62c991958c9d478fd36e574a975bfb8814d5d8f82fb9363a03d3dc63590600090a350565b60008281526020819052604090206001015461078481610e13565b61078e8383610e1d565b505050565b6001600160a01b03811633146108085760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6108128282610ea1565b5050565b6006546001600160a01b031633146108405760405162529fc560e41b815260040160405180910390fd5b600654610856906001600160a01b031682610f06565b50565b6000806000600860009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108ac57600080fd5b505afa1580156108c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e491906112f5565b50919450925050821590508061090d5760405163529fca8360e11b815260040160405180910390fd5b600061091983426115b5565b9050600954811161093d576040516305ddd3fb60e01b815260040160405180910390fd5b5050505061096a7f0000000000000000000000000000000000000000000000000000000000000000610f70565b905090565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600280546104ff90611636565b6006546001600160a01b031633146109cf5760405162529fc560e41b815260040160405180910390fd5b600654610856906001600160a01b0316826110fd565b33600090815260046020526040812080548391908390610a069084906115b5565b90915550506001600160a01b038316600081815260046020526040908190208054850190555133906000805160206116bd833981519152906105db9086815260200190565b60008051602061169d833981519152610a6381610e13565b6001600160a01b038216610a8a5760405163761c4c9760e01b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0384169081179091556040519081527f32db38c7b3e5c8341ceb63fa1ae4ce0ba937b716427686f76033425ef435341a906020015b60405180910390a15050565b60008051602061169d833981519152610af881610e13565b60078290556040518281527fdec3e526c25df3c882255e9a23a2b9e896887938541a26e157b00ed175a7f49390602001610ad4565b600082815260208190526040902060010154610b4881610e13565b61078e8383610ea1565b60006104ec60008051602061169d8339815191528361096f565b60008051602061169d833981519152610b8481610e13565b603c821015610ba65760405163138d111360e01b815260040160405180910390fd5b610e10821115610bc95760405163138d111360e01b815260040160405180910390fd5b60098290556040518281527f33d1191f5a3abfe19d468d51bb5ece97489f1277a912a5b5c65992fc279ad3d490602001610ad4565b60006104ec7faf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c8361096f565b60606000610c39836002611596565b610c4490600261140d565b67ffffffffffffffff811115610c6a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610c94576020820181803683370190505b509050600360fc1b81600081518110610cbd57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610cfa57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000610d1e846002611596565b610d2990600161140d565b90505b6001811115610dbd576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610d6b57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110610d8f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93610db68161161f565b9050610d2c565b508315610e0c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107ff565b9392505050565b610856813361114f565b610e27828261096f565b610812576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610e5d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610eab828261096f565b15610812576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b03821660009081526004602052604081208054839290610f2e9084906115b5565b90915550506003805482900390556040518181526000906001600160a01b038416906000805160206116bd833981519152906020015b60405180910390a35050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610fac57600080fd5b505afa158015610fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe49190611344565b9050600080846001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561102257600080fd5b505afa158015611036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105a91906112f5565b5093505092505060008111611082576040516318b24a8d60e11b815260040160405180910390fd5b600082136110a3576040516308d1c0fd60e01b815260040160405180910390fd5b42600754826110b2919061140d565b10156110d157604051630ac652fd60e21b815260040160405180910390fd5b60006110de8460126115cc565b6110e990600a611468565b6110f39084611513565b9695505050505050565b806003600082825461110f919061140d565b90915550506001600160a01b0382166000818152600460209081526040808320805486019055518481526000805160206116bd8339815191529101610f64565b611159828261096f565b61081257611171816001600160a01b03166014610c2a565b61117c836020610c2a565b60405160200161118d929190611365565b60408051601f198184030181529082905262461bcd60e51b82526107ff916004016113da565b805169ffffffffffffffffffff811681146111cd57600080fd5b919050565b6000602082840312156111e3578081fd5b8135610e0c81611687565b60008060408385031215611200578081fd5b823561120b81611687565b9150602083013561121b81611687565b809150509250929050565b60008060006060848603121561123a578081fd5b833561124581611687565b9250602084013561125581611687565b929592945050506040919091013590565b60008060408385031215611278578182fd5b823561128381611687565b946020939093013593505050565b6000602082840312156112a2578081fd5b5035919050565b600080604083850312156112bb578182fd5b82359150602083013561121b81611687565b6000602082840312156112de578081fd5b81356001600160e01b031981168114610e0c578182fd5b600080600080600060a0868803121561130c578081fd5b611315866111b3565b9450602086015193506040860151925060608601519150611338608087016111b3565b90509295509295909350565b600060208284031215611355578081fd5b815160ff81168114610e0c578182fd5b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161139d8160178501602088016115ef565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516113ce8160288401602088016115ef565b01602801949350505050565b60208152600082518060208401526113f98160408501602087016115ef565b601f01601f19169190910160400192915050565b6000821982111561142057611420611671565b500190565b600181815b8085111561146057816000190482111561144657611446611671565b8085161561145357918102915b93841c939080029061142a565b509250929050565b6000610e0c60ff841683600082611481575060016104ec565b8161148e575060006104ec565b81600181146114a457600281146114ae576114ca565b60019150506104ec565b60ff8411156114bf576114bf611671565b50506001821b6104ec565b5060208310610133831016604e8410600b84101617156114ed575081810a6104ec565b6114f78383611425565b806000190482111561150b5761150b611671565b029392505050565b60006001600160ff1b038184138284138082168684048611161561153957611539611671565b600160ff1b8487128281168783058912161561155757611557611671565b85871292508782058712848416161561157257611572611671565b8785058712818416161561158857611588611671565b505050929093029392505050565b60008160001904831182151516156115b0576115b0611671565b500290565b6000828210156115c7576115c7611671565b500390565b600060ff821660ff8416808210156115e6576115e6611671565b90039392505050565b60005b8381101561160a5781810151838201526020016115f2565b83811115611619576000848401525b50505050565b60008161162e5761162e611671565b506000190190565b600181811c9082168061164a57607f821691505b6020821081141561166b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461085657600080fdfe35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220c3d425dbea3b4fd460b5f0daca1b145927a1ce08e9a3b8c8e70100719f06c69d64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferPerpOwner(address)": {
        "params": {
          "recipient": "Account granted `perp` access control."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PerpOwnable_NotOwner()": [
        {
          "notice": "Emitted when the sender is not perp"
        }
      ],
      "PerpOwnable_OwnershipAlreadyClaimed()": [
        {
          "notice": "Emitted when the ownership of the contract has already been claimed"
        }
      ],
      "PerpOwnable_TransferZeroAddress()": [
        {
          "notice": "Emitted when the proposed address is equal to the zero address"
        }
      ],
      "VBase_DataNotFresh()": [
        {
          "notice": "Emitted when the latest round's data is older than the oracle's max refresh time"
        }
      ],
      "VBase_GracePeriodNotOver()": [
        {
          "notice": "Emitted when Zksync sequencer hasn't been back up for long enough"
        }
      ],
      "VBase_IncorrectGracePeriod()": [
        {
          "notice": "Emitted when proposed grace period is outside of the bounds"
        }
      ],
      "VBase_InsufficientPrecision()": [
        {
          "notice": "Emitted when the proposed aggregators decimals are less than PRECISION"
        }
      ],
      "VBase_InvalidRoundPrice()": [
        {
          "notice": "Emitted when the latest round's price is invalid"
        }
      ],
      "VBase_InvalidRoundTimestamp()": [
        {
          "notice": "Emitted when the latest round is incomplete"
        }
      ],
      "VBase_SequencerDown()": [
        {
          "notice": "Emitted when Zksync sequencer is down"
        }
      ],
      "VBase_SequencerUptimeFeedZeroAddress()": [
        {
          "notice": "Emitted when proposed sequencer uptime feed address is equal to the zero address"
        }
      ]
    },
    "events": {
      "GracePeriodUpdated(uint256)": {
        "notice": "Emitted when grace period is updated"
      },
      "HeartBeatUpdated(uint256)": {
        "notice": "Emitted when oracle heart beat is updated"
      },
      "SequencerUptimeFeedUpdated(address)": {
        "notice": "Emitted when sequencer uptime feed is updated"
      }
    },
    "kind": "user",
    "methods": {
      "transferPerpOwner(address)": {
        "notice": "Transfer `perp` accountMeant to be used only once at deployment as Perpetual can't transfer ownership afterwards"
      }
    },
    "notice": "ERC20 token traded on the CryptoSwap pool",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 70,
        "contract": "contracts/tokens/VBase.sol:VBase",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)"
      },
      {
        "astId": 18432,
        "contract": "contracts/tokens/VBase.sol:VBase",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 18435,
        "contract": "contracts/tokens/VBase.sol:VBase",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 18442,
        "contract": "contracts/tokens/VBase.sol:VBase",
        "label": "totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 18447,
        "contract": "contracts/tokens/VBase.sol:VBase",
        "label": "balanceOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18454,
        "contract": "contracts/tokens/VBase.sol:VBase",
        "label": "allowance",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 19394,
        "contract": "contracts/tokens/VBase.sol:VBase",
        "label": "perp",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 18979,
        "contract": "contracts/tokens/VBase.sol:VBase",
        "label": "heartBeat",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 18986,
        "contract": "contracts/tokens/VBase.sol:VBase",
        "label": "sequencerUptimeFeed",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 18989,
        "contract": "contracts/tokens/VBase.sol:VBase",
        "label": "gracePeriod",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)65_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)65_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 62,
            "contract": "contracts/tokens/VBase.sol:VBase",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 64,
            "contract": "contracts/tokens/VBase.sol:VBase",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}