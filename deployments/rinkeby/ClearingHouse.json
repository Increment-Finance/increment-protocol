{
  "address": "0x983F5E7076d34d9a059653fF0fdD7C2e8a7307B2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "contract IInsurance",
          "name": "_insurance",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "minMargin",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "minMarginAtCreation",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "minPositiveOpenNotional",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "insuranceRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationRewardInsuranceShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationDiscount",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "nonUACollSeizureDiscount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "uaDebtSeizureThreshold",
              "type": "int256"
            }
          ],
          "internalType": "struct IClearingHouse.ClearingHouseParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_AmountProvidedTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_ChangePositionZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_ClosePositionStillOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_ExcessiveInsuranceRatio",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_ExcessiveLiquidationReward",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_ExcessiveLiquidationRewardInsuranceShare",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_ExcessiveMinMargin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_ExcessiveMinMarginAtCreation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_ExcessivePositiveOpenNotional",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_ExtendPositionInsufficientMargin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_ExtendPositionZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_InsufficientDiffBtwLiquidationDiscountAndNonUACollSeizureDiscount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_InsufficientInsuranceRatio",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_InsufficientLiquidationReward",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_InsufficientMinMargin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_InsufficientMinMarginAtCreation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_InsufficientUaDebtSeizureThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_LiquidateInsufficientProposedAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_LiquidateInvalidPosition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_LiquidateValidMargin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_LiquidationDebtSizeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_PerpetualMarketAlreadyAssigned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_ProvideLiquidityZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_ReducePositionZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_RemoveLiquidityInsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_SeizeCollateralStillOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_SufficientUserCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_UnderOpenNotionalAmountRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_VaultWithdrawUnsuccessful",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_WithdrawInsufficientMargin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouse_ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__AbsInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__MulInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAbs",
          "type": "uint256"
        }
      ],
      "name": "PRBMathSD59x18__MulOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum LibPerpetual.Side",
          "name": "direction",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "addedOpenNotional",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "addedPositionSize",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "profit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPositionIncreased",
          "type": "bool"
        }
      ],
      "name": "ChangePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "newMinMargin",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "newMinMarginAtCreation",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinPositiveOpenNotional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidationReward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newInsuranceRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidationRewardInsuranceShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidationDiscount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "nonUACollSeizureDiscount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "uaDebtSeizureThreshold",
          "type": "int256"
        }
      ],
      "name": "ClearingHouseParametersChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "profit",
          "type": "int256"
        }
      ],
      "name": "DustSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidatee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "notional",
          "type": "uint256"
        }
      ],
      "name": "LiquidationCall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reductionRatio",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IPerpetual",
          "name": "perpetual",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numPerpetuals",
          "type": "uint256"
        }
      ],
      "name": "MarketAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidatee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "SeizeCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IStakingContract",
          "name": "newStakingContract",
          "type": "address"
        }
      ],
      "name": "StakingContractChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOVERNANCE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStakingContract",
          "name": "staking",
          "type": "address"
        }
      ],
      "name": "addStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPerpetual",
          "name": "perp",
          "type": "address"
        }
      ],
      "name": "allowListPerpetual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum LibPerpetual.Side",
          "name": "direction",
          "type": "uint8"
        }
      ],
      "name": "changePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proposedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "closePositionWithdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "positionAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum LibPerpetual.Side",
          "name": "direction",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "extendPositionWithCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getDebtAcrossMarkets",
      "outputs": [
        {
          "internalType": "int256",
          "name": "userDebt",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "ratio",
          "type": "int256"
        }
      ],
      "name": "getFreeCollateralByRatio",
      "outputs": [
        {
          "internalType": "int256",
          "name": "freeCollateral",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumMarkets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPnLAcrossMarkets",
      "outputs": [
        {
          "internalType": "int256",
          "name": "unrealizedPositionPnl",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "ratio",
          "type": "int256"
        }
      ],
      "name": "getTotalMarginRequirement",
      "outputs": [
        {
          "internalType": "int256",
          "name": "requiredMargin",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insurance",
      "outputs": [
        {
          "internalType": "contract IInsurance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuranceRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "liquidatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposedAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isTrader",
          "type": "bool"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationDiscount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationRewardInsuranceShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minMargin",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minMarginAtCreation",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPositiveOpenNotional",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonUACollSeizureDiscount",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "closeProposedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "closeMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openProposedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum LibPerpetual.Side",
          "name": "direction",
          "type": "uint8"
        }
      ],
      "name": "openReversePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "perpetuals",
      "outputs": [
        {
          "internalType": "contract IPerpetual",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "amounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "minLpAmount",
          "type": "uint256"
        }
      ],
      "name": "provideLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAmountToRemove",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "minVTokenAmounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "proposedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidatee",
          "type": "address"
        }
      ],
      "name": "seizeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proposedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "sellDust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "minMargin",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "minMarginAtCreation",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "minPositiveOpenNotional",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "insuranceRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationRewardInsuranceShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationDiscount",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "nonUACollSeizureDiscount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "uaDebtSeizureThreshold",
              "type": "int256"
            }
          ],
          "internalType": "struct IClearingHouse.ClearingHouseParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "contract IStakingContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uaDebtSeizureThreshold",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x87ff54359ee21cba4a848e4c26768a9c07ec328241403ff791c6d8cb62ccd182",
  "receipt": {
    "to": null,
    "from": "0x69C7c048e7C286B0a8Bcf7cD7620E71Ef7569421",
    "contractAddress": "0x983F5E7076d34d9a059653fF0fdD7C2e8a7307B2",
    "transactionIndex": 16,
    "gasUsed": "4267169",
    "logsBloom": "0x
    "blockHash": "0x79785b759147aaadbe1dce8bb0517245f0532cb0167d7a232ac199a2dddea941",
    "transactionHash": "0x87ff54359ee21cba4a848e4c26768a9c07ec328241403ff791c6d8cb62ccd182",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 11179358,
        "transactionHash": "0x87ff54359ee21cba4a848e4c26768a9c07ec328241403ff791c6d8cb62ccd182",
        "address": "0x983F5E7076d34d9a059653fF0fdD7C2e8a7307B2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771",
          "0x00000000000000000000000069c7c048e7c286b0a8bcf7cd7620e71ef7569421",
          "0x00000000000000000000000069c7c048e7c286b0a8bcf7cd7620e71ef7569421"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x79785b759147aaadbe1dce8bb0517245f0532cb0167d7a232ac199a2dddea941"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 11179358,
        "transactionHash": "0x87ff54359ee21cba4a848e4c26768a9c07ec328241403ff791c6d8cb62ccd182",
        "address": "0x983F5E7076d34d9a059653fF0fdD7C2e8a7307B2",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x79785b759147aaadbe1dce8bb0517245f0532cb0167d7a232ac199a2dddea941"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 11179358,
        "transactionHash": "0x87ff54359ee21cba4a848e4c26768a9c07ec328241403ff791c6d8cb62ccd182",
        "address": "0x983F5E7076d34d9a059653fF0fdD7C2e8a7307B2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c",
          "0x00000000000000000000000069c7c048e7c286b0a8bcf7cd7620e71ef7569421",
          "0x00000000000000000000000069c7c048e7c286b0a8bcf7cd7620e71ef7569421"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x79785b759147aaadbe1dce8bb0517245f0532cb0167d7a232ac199a2dddea941"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 11179358,
        "transactionHash": "0x87ff54359ee21cba4a848e4c26768a9c07ec328241403ff791c6d8cb62ccd182",
        "address": "0x983F5E7076d34d9a059653fF0fdD7C2e8a7307B2",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x79785b759147aaadbe1dce8bb0517245f0532cb0167d7a232ac199a2dddea941"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 11179358,
        "transactionHash": "0x87ff54359ee21cba4a848e4c26768a9c07ec328241403ff791c6d8cb62ccd182",
        "address": "0x983F5E7076d34d9a059653fF0fdD7C2e8a7307B2",
        "topics": [
          "0x46fdb7eba5bc556294a8e95d7c0fce002a6272aa7229e1fc1c9dec41b17b2460"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000058d15e1762800000000000000000000000000000000000000000000000000000c3663566a58000000000000000000000000000000000000000000000000001e5b8fa8fe2ac000000000000000000000000000000000000000000000000000000354a6ba7a18000000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000429d069189e00000000000000000000000000000000000000000000000000000d2f13f7789f00000000000000000000000000000000000000000000000000000a688906bd8b000000000000000000000000000000000000000000000000021e19e0c9bab2400000",
        "logIndex": 16,
        "blockHash": "0x79785b759147aaadbe1dce8bb0517245f0532cb0167d7a232ac199a2dddea941"
      }
    ],
    "blockNumber": 11179358,
    "cumulativeGasUsed": "5533884",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2DB303E9614b498a8823D1E2F38f50692b4c69A6",
    "0xD903Ea6dB4dAFc05f7D450Ee507c8ed96f5706C7",
    {
      "minMargin": "25000000000000000",
      "minMarginAtCreation": "55000000000000000",
      "minPositiveOpenNotional": "35000000000000000000",
      "liquidationReward": "15000000000000000",
      "insuranceRatio": "100000000000000000",
      "liquidationRewardInsuranceShare": "300000000000000000",
      "liquidationDiscount": "950000000000000000",
      "nonUACollSeizureDiscount": "750000000000000000",
      "uaDebtSeizureThreshold": "10000000000000000000000"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "e1cef607481b161ae69d7ea60025156b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IInsurance\",\"name\":\"_insurance\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"minMargin\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"minMarginAtCreation\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"minPositiveOpenNotional\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"insuranceRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRewardInsuranceShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationDiscount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"nonUACollSeizureDiscount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"uaDebtSeizureThreshold\",\"type\":\"int256\"}],\"internalType\":\"struct IClearingHouse.ClearingHouseParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ClearingHouse_AmountProvidedTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_ChangePositionZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_ClosePositionStillOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_ExcessiveInsuranceRatio\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_ExcessiveLiquidationReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_ExcessiveLiquidationRewardInsuranceShare\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_ExcessiveMinMargin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_ExcessiveMinMarginAtCreation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_ExcessivePositiveOpenNotional\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_ExtendPositionInsufficientMargin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_ExtendPositionZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_InsufficientDiffBtwLiquidationDiscountAndNonUACollSeizureDiscount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_InsufficientInsuranceRatio\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_InsufficientLiquidationReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_InsufficientMinMargin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_InsufficientMinMarginAtCreation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_InsufficientUaDebtSeizureThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_LiquidateInsufficientProposedAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_LiquidateInvalidPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_LiquidateValidMargin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_LiquidationDebtSizeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_PerpetualMarketAlreadyAssigned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_ProvideLiquidityZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_ReducePositionZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_RemoveLiquidityInsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_SeizeCollateralStillOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_SufficientUserCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_UnderOpenNotionalAmountRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_VaultWithdrawUnsuccessful\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_WithdrawInsufficientMargin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouse_ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__AbsInputTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__MulInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\"}],\"name\":\"PRBMathSD59x18__MulOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum LibPerpetual.Side\",\"name\":\"direction\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"addedOpenNotional\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"addedPositionSize\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"profit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPositionIncreased\",\"type\":\"bool\"}],\"name\":\"ChangePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newMinMargin\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newMinMarginAtCreation\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinPositiveOpenNotional\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInsuranceRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationRewardInsuranceShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidationDiscount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"nonUACollSeizureDiscount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"uaDebtSeizureThreshold\",\"type\":\"int256\"}],\"name\":\"ClearingHouseParametersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"profit\",\"type\":\"int256\"}],\"name\":\"DustSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidatee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"notional\",\"type\":\"uint256\"}],\"name\":\"LiquidationCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reductionRatio\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IPerpetual\",\"name\":\"perpetual\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numPerpetuals\",\"type\":\"uint256\"}],\"name\":\"MarketAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidatee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"SeizeCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IStakingContract\",\"name\":\"newStakingContract\",\"type\":\"address\"}],\"name\":\"StakingContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNANCE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStakingContract\",\"name\":\"staking\",\"type\":\"address\"}],\"name\":\"addStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPerpetual\",\"name\":\"perp\",\"type\":\"address\"}],\"name\":\"allowListPerpetual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum LibPerpetual.Side\",\"name\":\"direction\",\"type\":\"uint8\"}],\"name\":\"changePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"closePositionWithdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum LibPerpetual.Side\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"extendPositionWithCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDebtAcrossMarkets\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"userDebt\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"ratio\",\"type\":\"int256\"}],\"name\":\"getFreeCollateralByRatio\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"freeCollateral\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumMarkets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPnLAcrossMarkets\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"unrealizedPositionPnl\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"ratio\",\"type\":\"int256\"}],\"name\":\"getTotalMarginRequirement\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"requiredMargin\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurance\",\"outputs\":[{\"internalType\":\"contract IInsurance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTrader\",\"type\":\"bool\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationRewardInsuranceShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMargin\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMarginAtCreation\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPositiveOpenNotional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonUACollSeizureDiscount\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeProposedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openProposedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum LibPerpetual.Side\",\"name\":\"direction\",\"type\":\"uint8\"}],\"name\":\"openReversePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"perpetuals\",\"outputs\":[{\"internalType\":\"contract IPerpetual\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"minLpAmount\",\"type\":\"uint256\"}],\"name\":\"provideLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmountToRemove\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"minVTokenAmounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"proposedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidatee\",\"type\":\"address\"}],\"name\":\"seizeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"sellDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"minMargin\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"minMarginAtCreation\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"minPositiveOpenNotional\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"insuranceRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRewardInsuranceShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationDiscount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"nonUACollSeizureDiscount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"uaDebtSeizureThreshold\",\"type\":\"int256\"}],\"internalType\":\"struct IClearingHouse.ClearingHouseParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract IStakingContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uaDebtSeizureThreshold\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addStakingContract(address)\":{\"params\":{\"staking\":\"Staking Contract\"}},\"allowListPerpetual(address)\":{\"params\":{\"perp\":\"Market to add to the list of supported market\"}},\"changePosition(uint256,uint256,uint256,uint8)\":{\"details\":\"No number for the leverage is given but the amount in the vault must be bigger than minMarginAtCreationNo checks are done if bought amount exceeds allowance\",\"params\":{\"amount\":\"Represent amount in vQuote (if long) or vBase (if short) to sell. 18 decimals\",\"direction\":\"Whether the trade should buy or sell vBase (LONG) or sell vBase(SHORT)\",\"idx\":\"Index of the perpetual market\",\"minAmount\":\"Minimum amount that the user is willing to accept. 18 decimals\"}},\"closePositionWithdrawCollateral(uint256,uint256,uint256,address)\":{\"params\":{\"idx\":\"Index of the perpetual market\",\"minAmount\":\"Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\",\"proposedAmount\":\"Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\",\"token\":\"Token used for the collateral\"}},\"deposit(uint256,address)\":{\"params\":{\"amount\":\"Amount to be used as collateral. Might not be 18 decimals\",\"token\":\"Token to be used for the collateral\"}},\"extendPositionWithCollateral(uint256,uint256,address,uint256,uint8,uint256)\":{\"params\":{\"collateralAmount\":\"Amount to be used as the collateral of the position. Might not be 18 decimals\",\"direction\":\"Whether the position is LONG or SHORT\",\"idx\":\"Index of the perpetual market\",\"minAmount\":\"Minimum amount that the user is willing to accept. 18 decimals\",\"positionAmount\":\"Amount to be sold, in vQuote (if long) or vBase (if short). Must be 18 decimals\",\"token\":\"Token to be used for the collateral of the position\"}},\"getNumMarkets()\":{\"returns\":{\"_0\":\"Number of active markets\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"liquidate(uint256,address,uint256,bool)\":{\"params\":{\"idx\":\"Index of the perpetual market\",\"isTrader\":\"Whether or not the position to liquidate is a trading position\",\"liquidatee\":\"Address of the account to liquidate\",\"proposedAmount\":\"Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"provideLiquidity(uint256,uint256[2],uint256)\":{\"params\":{\"amounts\":\"Amount of virtual tokens ([vQuote, vBase]) provided. 18 decimals\",\"idx\":\"Index of the perpetual market\",\"minLpAmount\":\"Minimum amount of Lp tokens minted. 18 decimals\"}},\"removeLiquidity(uint256,uint256,uint256[2],uint256,uint256)\":{\"params\":{\"idx\":\"Index of the perpetual market\",\"liquidityAmountToRemove\":\"Amount of liquidity (in LP tokens) to be removed from the pool. 18 decimals\",\"minAmount\":\"Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\",\"minVTokenAmounts\":\"Minimum amount of virtual tokens [vQuote, vBase] withdrawn from the curve pool. 18 decimals\",\"proposedAmount\":\"Amount at which to get the LP position (in vBase if LONG, in vQuote if SHORT). 18 decimals\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"seizeCollateral(address)\":{\"params\":{\"liquidatee\":\"Address of the account to liquidate\"}},\"sellDust(uint256,uint256,uint256)\":{\"params\":{\"idx\":\"Index of the perpetual market\",\"minAmount\":\"Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\",\"proposedAmount\":\"Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdraw(uint256,address)\":{\"params\":{\"amount\":\"Amount of collateral to withdraw. Might not be 18 decimals (decimals of `token`)\",\"token\":\"Token of the collateral\"}},\"withdrawAll(address)\":{\"details\":\"Should only be called by the trader\",\"params\":{\"token\":\"Token of the collateral\"}}},\"stateVariables\":{\"insuranceRatio\":{\"details\":\"Once the insurance reserve exceed this ratio of the tvl, governance can withdraw exceeding insurance fee\"},\"liquidationReward\":{\"details\":\"Paid on dollar value of an trader position. important: liquidationReward < minMargin or liquidations will result in protocol losses\"},\"nonUACollSeizureDiscount\":{\"details\":\"Must be lower than liquidationDiscount to ensure liquidation don't generate bad debt\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ClearingHouse_AmountProvidedTooLarge()\":[{\"notice\":\"Emitted when a user attempts to provide liquidity with amount larger than his free collateral or collateral balance\"}],\"ClearingHouse_ClosePositionStillOpen()\":[{\"notice\":\"Emitted when the position is not reduced entirely using closePositionWithdrawCollateral\"}],\"ClearingHouse_ExcessiveInsuranceRatio()\":[{\"notice\":\"Emitted when the proposed insurance ratio is too high\"}],\"ClearingHouse_ExcessiveLiquidationReward()\":[{\"notice\":\"Emitted when the proposed liquidation reward is too high\"}],\"ClearingHouse_ExcessiveLiquidationRewardInsuranceShare()\":[{\"notice\":\"Emitted when the proposed share of the liquidation reward for the insurance is too high\"}],\"ClearingHouse_ExcessiveMinMargin()\":[{\"notice\":\"Emitted when the proposed minMargin is too high\"}],\"ClearingHouse_ExcessiveMinMarginAtCreation()\":[{\"notice\":\"Emitted when the proposed minMarginAtCreation is too low\"}],\"ClearingHouse_ExtendPositionInsufficientMargin()\":[{\"notice\":\"Emitted when there is not enough margin to extend to the proposed position amount\"}],\"ClearingHouse_ExtendPositionZeroAmount()\":[{\"notice\":\"Emitted when a user attempts to extend their position with amount equal to 0\"}],\"ClearingHouse_InsufficientDiffBtwLiquidationDiscountAndNonUACollSeizureDiscount()\":[{\"notice\":\"Emitted when the difference between liquidationDiscount and nonUACollSeizureDiscount isn't large enough\"}],\"ClearingHouse_InsufficientInsuranceRatio()\":[{\"notice\":\"Emitted when the proposed insurance ratio is too low\"}],\"ClearingHouse_InsufficientLiquidationReward()\":[{\"notice\":\"Emitted when the proposed liquidation reward is too low\"}],\"ClearingHouse_InsufficientMinMargin()\":[{\"notice\":\"Emitted when the proposed minMargin is too low\"}],\"ClearingHouse_InsufficientMinMarginAtCreation()\":[{\"notice\":\"Emitted when the proposed minMarginAtCreation is too low\"}],\"ClearingHouse_InsufficientUaDebtSeizureThreshold()\":[{\"notice\":\"Emitted when the proposed UA debt limit is lower than the minimum acceptable value\"}],\"ClearingHouse_LiquidateInsufficientProposedAmount()\":[{\"notice\":\"Emitted when the attempted liquidation does not close the full position\"}],\"ClearingHouse_LiquidateInvalidPosition()\":[{\"notice\":\"Emitted when the liquidatee does not have an open position\"}],\"ClearingHouse_LiquidateValidMargin()\":[{\"notice\":\"Emitted when the margin of the liquidatee's position is still valid\"}],\"ClearingHouse_LiquidationDebtSizeZero()\":[{\"notice\":\"Emitted when a collateral liquidation for a user with no UA debt is tried\"}],\"ClearingHouse_PerpetualMarketAlreadyAssigned()\":[{\"notice\":\"Emitted when passing the address of a perpetual market which has already been added\"}],\"ClearingHouse_ProvideLiquidityZeroAmount()\":[{\"notice\":\"Emitted when a user attempts to provide liquidity with amount equal to 0\"}],\"ClearingHouse_ReducePositionZeroAmount()\":[{\"notice\":\"Emitted when a user attempts to reduce their position with amount equal to 0\"}],\"ClearingHouse_RemoveLiquidityInsufficientFunds()\":[{\"notice\":\"Emitted when a user attempts to withdraw more liquidity than they have\"}],\"ClearingHouse_SeizeCollateralStillOpen()\":[{\"notice\":\"Emitted when attempting to seize collateral of a user with an open position\"}],\"ClearingHouse_SufficientUserCollateral()\":[{\"notice\":\"Emitted when a liquidator tries seizing collateral of user with sufficient collaterals level\"}],\"ClearingHouse_UnderOpenNotionalAmountRequired()\":[{\"notice\":\"Emitted when a user tries to open a position with an incorrect open notional amount\"}],\"ClearingHouse_VaultWithdrawUnsuccessful()\":[{\"notice\":\"Emitted when vault withdrawal is unsuccessful\"}],\"ClearingHouse_WithdrawInsufficientMargin()\":[{\"notice\":\"Emitted when there is not enough margin to withdraw the requested amount\"}],\"ClearingHouse_ZeroAddress()\":[{\"notice\":\"Emitted when the zero address is provided\"}],\"PRBMathSD59x18__AbsInputTooSmall()\":[{\"notice\":\"Emitted when the input is MIN_SD59x18.\"}],\"PRBMathSD59x18__MulInputTooSmall()\":[{\"notice\":\"Emitted when one of the inputs is MIN_SD59x18.\"}],\"PRBMathSD59x18__MulOverflow(uint256)\":[{\"notice\":\"Emitted when the intermediary absolute result overflows SD59x18.\"}],\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"events\":{\"ChangePosition(uint256,address,uint8,int256,int256,int256,bool)\":{\"notice\":\"Emitted when a position is extended/opened\"},\"ClearingHouseParametersChanged(int256,int256,uint256,uint256,uint256,uint256,uint256,int256,int256)\":{\"notice\":\"Emitted when parameters are changed\"},\"DustSold(uint256,int256)\":{\"notice\":\"Emitted when dust is sold by governance\"},\"LiquidationCall(uint256,address,address,uint256)\":{\"notice\":\"Emitted when a trader position is liquidated\"},\"LiquidityProvided(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted when (additional) liquidity is provided\"},\"LiquidityRemoved(uint256,address,uint256)\":{\"notice\":\"Emitted when liquidity is removed\"},\"MarketAdded(address,uint256)\":{\"notice\":\"Emitted when new perpetual market is added\"},\"SeizeCollateral(address,address)\":{\"notice\":\"Emitted when a trader position is liquidated\"}},\"kind\":\"user\",\"methods\":{\"addStakingContract(address)\":{\"notice\":\"Add a staking contract\"},\"allowListPerpetual(address)\":{\"notice\":\"Add one perpetual market to the list of markets\"},\"changePosition(uint256,uint256,uint256,uint8)\":{\"notice\":\"Open or increase or reduce a position, either long or short\"},\"closePositionWithdrawCollateral(uint256,uint256,uint256,address)\":{\"notice\":\"Single close position function, groups close position and withdraw collateralImportant: `proposedAmount` must be large enough to close the entire position else the function call will fail\"},\"deposit(uint256,address)\":{\"notice\":\"Deposit tokens into the vault\"},\"extendPositionWithCollateral(uint256,uint256,address,uint256,uint8,uint256)\":{\"notice\":\"Single open position function, group collateral deposit and extend position\"},\"getNumMarkets()\":{\"notice\":\"Return the number of active markets\"},\"insurance()\":{\"notice\":\"Insurance contract\"},\"insuranceRatio()\":{\"notice\":\"Insurance ratio\"},\"liquidate(uint256,address,uint256,bool)\":{\"notice\":\"Submit the address of an user whose position is worth liquidating for a reward\"},\"liquidationDiscount()\":{\"notice\":\"Discount on the collateral price for the liquidator\"},\"liquidationReward()\":{\"notice\":\"liquidation reward payed to liquidators\"},\"liquidationRewardInsuranceShare()\":{\"notice\":\"Portion of the liquidation reward that the insurance gets\"},\"minMargin()\":{\"notice\":\"minimum maintenance margin\"},\"minMarginAtCreation()\":{\"notice\":\"minimum margin when opening a position\"},\"minPositiveOpenNotional()\":{\"notice\":\"minimum positive open notional when opening a position\"},\"nonUACollSeizureDiscount()\":{\"notice\":\"Discount ratio to be applied on non-UA collaterals before seizing said collaterals for some UA\"},\"pause()\":{\"notice\":\"Pause the contract\"},\"perpetuals(uint256)\":{\"notice\":\"Allowlisted Perpetual contracts\"},\"provideLiquidity(uint256,uint256[2],uint256)\":{\"notice\":\"Provide liquidity to the pool, without depositing new capital in the vault\"},\"removeLiquidity(uint256,uint256,uint256[2],uint256,uint256)\":{\"notice\":\"Remove liquidity from the pool and account profit/loss in UA\"},\"seizeCollateral(address)\":{\"notice\":\"Buy the non-UA collateral of a user at a discounted UA price to settle the debt of said user.\"},\"sellDust(uint256,uint256,uint256)\":{\"notice\":\"Sell dust in market idx\"},\"stakingContract()\":{\"notice\":\"Staking contract\"},\"uaDebtSeizureThreshold()\":{\"notice\":\"UA debt amount at which non-UA collaterals can be seized to pay back the UA debt\"},\"unpause()\":{\"notice\":\"Unpause the contract\"},\"vault()\":{\"notice\":\"Vault contract\"},\"withdraw(uint256,address)\":{\"notice\":\"Withdraw tokens from the vault\"},\"withdrawAll(address)\":{\"notice\":\"Withdraw all tokens from the vault\"}},\"notice\":\"Entry point for users to vault and perpetual markets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClearingHouse.sol\":\"ClearingHouse\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3ebde1c8d27576db912d87c3560dab14adfb9cd001be95890ec4ba035e652e7\",\"license\":\"MIT\"},\"contracts/ClearingHouse.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// contracts\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IncreAccessControl} from \\\"./utils/IncreAccessControl.sol\\\";\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IClearingHouse} from \\\"./interfaces/IClearingHouse.sol\\\";\\nimport {IPerpetual} from \\\"./interfaces/IPerpetual.sol\\\";\\nimport {IInsurance} from \\\"./interfaces/IInsurance.sol\\\";\\nimport {IVault} from \\\"./interfaces/IVault.sol\\\";\\nimport {ICryptoSwap} from \\\"./interfaces/ICryptoSwap.sol\\\";\\nimport {IStakingContract} from \\\"./interfaces/IStakingContract.sol\\\";\\n\\n// libraries\\nimport {LibMath} from \\\"./lib/LibMath.sol\\\";\\nimport {LibPerpetual} from \\\"./lib/LibPerpetual.sol\\\";\\nimport {LibReserve} from \\\"./lib/LibReserve.sol\\\";\\n\\n/// @notice Entry point for users to vault and perpetual markets\\ncontract ClearingHouse is IClearingHouse, IncreAccessControl, Pausable, ReentrancyGuard {\\n    using LibMath for int256;\\n    using LibMath for uint256;\\n    using SafeERC20 for IERC20Metadata;\\n\\n    // constants\\n    uint256 internal constant VQUOTE_INDEX = 0; // index of quote asset in curve pool\\n    uint256 internal constant VBASE_INDEX = 1; // index of base asset in curve pool\\n\\n    // parameterization\\n\\n    /// @notice minimum maintenance margin\\n    int256 public override minMargin;\\n\\n    /// @notice minimum margin when opening a position\\n    int256 public override minMarginAtCreation;\\n\\n    /// @notice minimum positive open notional when opening a position\\n    uint256 public override minPositiveOpenNotional;\\n\\n    /// @notice liquidation reward payed to liquidators\\n    /// @dev Paid on dollar value of an trader position. important: liquidationReward < minMargin or liquidations will result in protocol losses\\n    uint256 public override liquidationReward;\\n\\n    /// @notice Insurance ratio\\n    /// @dev Once the insurance reserve exceed this ratio of the tvl, governance can withdraw exceeding insurance fee\\n    uint256 public override insuranceRatio;\\n\\n    /// @notice Portion of the liquidation reward that the insurance gets\\n    uint256 public override liquidationRewardInsuranceShare;\\n\\n    /// @notice Discount on the collateral price for the liquidator\\n    uint256 public override liquidationDiscount;\\n\\n    /// @notice Discount ratio to be applied on non-UA collaterals before seizing said collaterals for some UA\\n    /// @dev Must be lower than liquidationDiscount to ensure liquidation don't generate bad debt\\n    int256 public override nonUACollSeizureDiscount;\\n\\n    /// @notice UA debt amount at which non-UA collaterals can be seized to pay back the UA debt\\n    int256 public override uaDebtSeizureThreshold;\\n\\n    // dependencies\\n\\n    /// @notice Vault contract\\n    IVault public override vault;\\n\\n    /// @notice Insurance contract\\n    IInsurance public override insurance;\\n\\n    /// @notice Staking contract\\n    IStakingContract public override stakingContract;\\n\\n    /// @notice Allowlisted Perpetual contracts\\n    IPerpetual[] public override perpetuals;\\n\\n    constructor(\\n        IVault _vault,\\n        IInsurance _insurance,\\n        ClearingHouseParams memory _params\\n    ) {\\n        if (address(_vault) == address(0)) revert ClearingHouse_ZeroAddress();\\n        if (address(_insurance) == address(0)) revert ClearingHouse_ZeroAddress();\\n\\n        vault = _vault;\\n        insurance = _insurance;\\n\\n        setParameters(\\n            ClearingHouseParams({\\n                minMargin: _params.minMargin,\\n                minMarginAtCreation: _params.minMarginAtCreation,\\n                minPositiveOpenNotional: _params.minPositiveOpenNotional,\\n                liquidationReward: _params.liquidationReward,\\n                insuranceRatio: _params.insuranceRatio,\\n                liquidationRewardInsuranceShare: _params.liquidationRewardInsuranceShare,\\n                liquidationDiscount: _params.liquidationDiscount,\\n                nonUACollSeizureDiscount: _params.nonUACollSeizureDiscount,\\n                uaDebtSeizureThreshold: _params.uaDebtSeizureThreshold\\n            })\\n        );\\n    }\\n\\n    /* **************************** */\\n    /*   Collateral operations      */\\n    /* **************************** */\\n\\n    /// @notice Deposit tokens into the vault\\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\\n    /// @param token Token to be used for the collateral\\n    function deposit(uint256 amount, IERC20Metadata token) external override nonReentrant whenNotPaused {\\n        _deposit(amount, token);\\n    }\\n\\n    /// @notice Withdraw tokens from the vault\\n    /// @param amount Amount of collateral to withdraw. Might not be 18 decimals (decimals of `token`)\\n    /// @param token Token of the collateral\\n    function withdraw(uint256 amount, IERC20Metadata token) external override nonReentrant whenNotPaused {\\n        vault.withdraw(msg.sender, amount, token);\\n\\n        if (!_isPositionValid(msg.sender, minMarginAtCreation)) revert ClearingHouse_WithdrawInsufficientMargin();\\n    }\\n\\n    /// @notice Withdraw all tokens from the vault\\n    /// @dev Should only be called by the trader\\n    /// @param token Token of the collateral\\n    function withdrawAll(IERC20Metadata token) external override nonReentrant whenNotPaused {\\n        vault.withdrawAll(msg.sender, token);\\n\\n        if (!_isPositionValid(msg.sender, minMarginAtCreation)) revert ClearingHouse_WithdrawInsufficientMargin();\\n    }\\n\\n    /* ****************** */\\n    /*   Trader flow      */\\n    /* ****************** */\\n\\n    /// @notice Open or increase or reduce a position, either long or short\\n    /// @param idx Index of the perpetual market\\n    /// @param amount Represent amount in vQuote (if long) or vBase (if short) to sell. 18 decimals\\n    /// @param direction Whether the trade should buy or sell vBase (LONG) or sell vBase(SHORT)\\n    /// @param minAmount Minimum amount that the user is willing to accept. 18 decimals\\n    /// @dev No number for the leverage is given but the amount in the vault must be bigger than minMarginAtCreation\\n    /// @dev No checks are done if bought amount exceeds allowance\\n    function changePosition(\\n        uint256 idx,\\n        uint256 amount,\\n        uint256 minAmount,\\n        LibPerpetual.Side direction\\n    ) external override nonReentrant whenNotPaused {\\n        _changePosition(idx, amount, minAmount, direction);\\n    }\\n\\n    function openReversePosition(\\n        uint256 idx,\\n        uint256 closeProposedAmount,\\n        uint256 closeMinAmount,\\n        uint256 openProposedAmount,\\n        uint256 openMinAmount,\\n        LibPerpetual.Side direction\\n    ) external override nonReentrant whenNotPaused {\\n        _changePosition(idx, closeProposedAmount, closeMinAmount, direction);\\n        if (perpetuals[idx].isTraderPositionOpen(msg.sender)) revert ClearingHouse_ClosePositionStillOpen();\\n        _changePosition(idx, openProposedAmount, openMinAmount, direction);\\n    }\\n\\n    /// @notice Single open position function, group collateral deposit and extend position\\n    /// @param idx Index of the perpetual market\\n    /// @param collateralAmount Amount to be used as the collateral of the position. Might not be 18 decimals\\n    /// @param token Token to be used for the collateral of the position\\n    /// @param positionAmount Amount to be sold, in vQuote (if long) or vBase (if short). Must be 18 decimals\\n    /// @param direction Whether the position is LONG or SHORT\\n    /// @param minAmount Minimum amount that the user is willing to accept. 18 decimals\\n    function extendPositionWithCollateral(\\n        uint256 idx,\\n        uint256 collateralAmount,\\n        IERC20Metadata token,\\n        uint256 positionAmount,\\n        LibPerpetual.Side direction,\\n        uint256 minAmount\\n    ) external override nonReentrant whenNotPaused {\\n        _deposit(collateralAmount, token);\\n        _changePosition(idx, positionAmount, minAmount, direction);\\n    }\\n\\n    /// @notice Single close position function, groups close position and withdraw collateral\\n    /// @notice Important: `proposedAmount` must be large enough to close the entire position else the function call will fail\\n    /// @param idx Index of the perpetual market\\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\\n    /// @param minAmount Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\\n    /// @param token Token used for the collateral\\n    function closePositionWithdrawCollateral(\\n        uint256 idx,\\n        uint256 proposedAmount,\\n        uint256 minAmount,\\n        IERC20Metadata token\\n    ) external override nonReentrant whenNotPaused {\\n        int256 traderPositionSize = _getTraderPosition(idx, msg.sender).positionSize;\\n\\n        LibPerpetual.Side closeDirection = traderPositionSize > 0 ? LibPerpetual.Side.Short : LibPerpetual.Side.Long;\\n\\n        _changePosition(idx, proposedAmount, minAmount, closeDirection);\\n\\n        if (perpetuals[idx].isTraderPositionOpen(msg.sender)) revert ClearingHouse_ClosePositionStillOpen();\\n\\n        // tentatively remove all liquidity of user\\n        // If user had just one position (trading or LP) in one market, it'll pass, else not\\n        vault.withdrawAll(msg.sender, token);\\n\\n        if (!_isPositionValid(msg.sender, minMarginAtCreation)) revert ClearingHouse_WithdrawInsufficientMargin();\\n    }\\n\\n    /* ****************** */\\n    /*  Liquidation flow  */\\n    /* ****************** */\\n\\n    /// @notice Submit the address of an user whose position is worth liquidating for a reward\\n    /// @param idx Index of the perpetual market\\n    /// @param liquidatee Address of the account to liquidate\\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\\n    /// @param isTrader Whether or not the position to liquidate is a trading position\\n    function liquidate(\\n        uint256 idx,\\n        address liquidatee,\\n        uint256 proposedAmount,\\n        bool isTrader\\n    ) external override nonReentrant whenNotPaused {\\n        address liquidator = msg.sender;\\n\\n        int256 positiveOpenNotional;\\n        if (isTrader) {\\n            (positiveOpenNotional) = _getTraderPosition(idx, liquidatee).openNotional.abs();\\n            if (positiveOpenNotional == 0) revert ClearingHouse_LiquidateInvalidPosition();\\n        } else {\\n            if (!(perpetuals[idx].isLpPositionOpen(liquidatee))) revert ClearingHouse_LiquidateInvalidPosition();\\n\\n            positiveOpenNotional = _getLpOpenNotional(idx, liquidatee).abs();\\n        }\\n\\n        _settleUserFundingPayments(liquidatee);\\n\\n        if (_isPositionValid(liquidatee, minMargin)) revert ClearingHouse_LiquidateValidMargin();\\n\\n        int256 pnl = isTrader\\n            ? _liquidateTrader(idx, liquidatee, proposedAmount)\\n            : _liquidateLp(idx, liquidatee, proposedAmount);\\n\\n        // take fee from liquidatee for liquidator and insurance\\n        uint256 liquidationRewardAmount = positiveOpenNotional.toUint256().wadMul(liquidationReward);\\n        uint256 insuranceLiquidationReward = liquidationRewardAmount.wadMul(liquidationRewardInsuranceShare);\\n        uint256 liquidatorLiquidationReward = liquidationRewardAmount - insuranceLiquidationReward;\\n\\n        vault.settlePnL(liquidatee, pnl - liquidationRewardAmount.toInt256());\\n        vault.settlePnL(liquidator, liquidatorLiquidationReward.toInt256());\\n        insurance.fundInsurance(insuranceLiquidationReward);\\n\\n        emit LiquidationCall(idx, liquidatee, liquidator, positiveOpenNotional.toUint256());\\n    }\\n\\n    /// @notice Buy the non-UA collateral of a user at a discounted UA price to settle the debt of said user.\\n    /// @param liquidatee Address of the account to liquidate\\n    function seizeCollateral(address liquidatee) external override nonReentrant whenNotPaused {\\n        address liquidator = msg.sender;\\n\\n        // all positions must be closed\\n        for (uint256 i = 0; i < perpetuals.length; i++) {\\n            if (perpetuals[i].isTraderPositionOpen(liquidatee) || perpetuals[i].isLpPositionOpen(liquidatee))\\n                revert ClearingHouse_SeizeCollateralStillOpen();\\n        }\\n\\n        int256 uaBalance = vault.getBalance(liquidatee, 0);\\n        int256 discountedCollateralsBalance = vault.getReserveValue(liquidatee, true);\\n        int256 discountedCollateralsBalanceExUA = discountedCollateralsBalance - uaBalance;\\n\\n        // user must have UA debt\\n        if (uaBalance >= 0) revert ClearingHouse_LiquidationDebtSizeZero();\\n\\n        // for a user to have his non-UA collaterals seized, one of the following 2 conditions must be met:\\n        // 1) the aggregate value of non-UA collaterals discounted by their weights and the nonUACollSeizureDiscount\\n        //    ratio must be larger than his UA debt\\n        // 2) UA debt must be larger than the threshold defined by uaDebtSeizureThreshold\\n        if (\\n            -uaBalance > discountedCollateralsBalanceExUA.wadMul(nonUACollSeizureDiscount) ||\\n            -uaBalance > uaDebtSeizureThreshold\\n        ) {\\n            vault.settleLiquidationOnCollaterals(liquidator, liquidatee);\\n\\n            emit SeizeCollateral(liquidatee, liquidator);\\n        } else {\\n            revert ClearingHouse_SufficientUserCollateral();\\n        }\\n    }\\n\\n    /* ****************** */\\n    /*   Liquidity flow   */\\n    /* ****************** */\\n\\n    /// @notice Provide liquidity to the pool, without depositing new capital in the vault\\n    /// @param idx Index of the perpetual market\\n    /// @param amounts Amount of virtual tokens ([vQuote, vBase]) provided. 18 decimals\\n    /// @param minLpAmount Minimum amount of Lp tokens minted. 18 decimals\\n    function provideLiquidity(\\n        uint256 idx,\\n        uint256[2] calldata amounts,\\n        uint256 minLpAmount\\n    ) external override nonReentrant whenNotPaused {\\n        _provideLiquidity(idx, amounts, minLpAmount);\\n    }\\n\\n    /// @notice Remove liquidity from the pool and account profit/loss in UA\\n    /// @param idx Index of the perpetual market\\n    /// @param liquidityAmountToRemove Amount of liquidity (in LP tokens) to be removed from the pool. 18 decimals\\n    /// @param minVTokenAmounts Minimum amount of virtual tokens [vQuote, vBase] withdrawn from the curve pool. 18 decimals\\n    /// @param proposedAmount Amount at which to get the LP position (in vBase if LONG, in vQuote if SHORT). 18 decimals\\n    /// @param minAmount Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\\n    function removeLiquidity(\\n        uint256 idx,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external override nonReentrant whenNotPaused {\\n        _settleUserFundingPayments(msg.sender);\\n\\n        (int256 profit, uint256 reductionRatio, int256 quoteProceeds) = perpetuals[idx].removeLiquidity(\\n            msg.sender,\\n            liquidityAmountToRemove,\\n            minVTokenAmounts,\\n            proposedAmount,\\n            minAmount,\\n            false\\n        );\\n\\n        // pay insurance fee on traded amount\\n        int256 insuranceFeeAmount = quoteProceeds.abs().wadMul(perpetuals[idx].insuranceFee());\\n        insurance.fundInsurance(insuranceFeeAmount.toUint256());\\n\\n        vault.settlePnL(msg.sender, profit + insuranceFeeAmount);\\n\\n        _isOpenNotionalRequirementValid(idx, msg.sender, false);\\n        emit LiquidityRemoved(idx, msg.sender, reductionRatio);\\n    }\\n\\n    /* ****************** */\\n    /*     Governance     */\\n    /* ****************** */\\n\\n    /// @notice Add one perpetual market to the list of markets\\n    /// @param perp Market to add to the list of supported market\\n    function allowListPerpetual(IPerpetual perp) external override onlyRole(GOVERNANCE) {\\n        if (address(perp) == address(0)) revert ClearingHouse_ZeroAddress();\\n\\n        for (uint256 i = 0; i < getNumMarkets(); i++) {\\n            if (perpetuals[i] == perp) revert ClearingHouse_PerpetualMarketAlreadyAssigned();\\n        }\\n\\n        perpetuals.push(perp);\\n        emit MarketAdded(perp, perpetuals.length);\\n    }\\n\\n    /// @notice Add a staking contract\\n    /// @param staking Staking Contract\\n    function addStakingContract(IStakingContract staking) external override onlyRole(GOVERNANCE) {\\n        if (address(staking) == address(0)) revert ClearingHouse_ZeroAddress();\\n        stakingContract = staking;\\n\\n        emit StakingContractChanged(staking);\\n    }\\n\\n    /// @notice Pause the contract\\n    function pause() external override onlyRole(MANAGER) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause the contract\\n    function unpause() external override onlyRole(MANAGER) {\\n        _unpause();\\n    }\\n\\n    /// @notice Sell dust in market idx\\n    /// @param idx Index of the perpetual market\\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\\n    /// @param minAmount Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\\n    function sellDust(\\n        uint256 idx,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external override onlyRole(MANAGER) nonReentrant {\\n        (, , int256 profit, ) = perpetuals[idx].changePosition(\\n            address(this),\\n            proposedAmount,\\n            minAmount,\\n            LibPerpetual.Side.Short,\\n            false\\n        );\\n\\n        // apply changes to collateral\\n        vault.settlePnL(address(this), profit);\\n\\n        // withdraw\\n        vault.withdrawAll(address(this), vault.UA());\\n        IERC20Metadata(vault.UA()).safeTransfer(\\n            address(insurance),\\n            IERC20Metadata(vault.UA()).balanceOf(address(this))\\n        );\\n\\n        emit DustSold(idx, profit);\\n    }\\n\\n    function setParameters(ClearingHouseParams memory params) public override onlyRole(GOVERNANCE) {\\n        _setMinMarginAtCreation(params.minMarginAtCreation);\\n        _setMinMargin(params.minMargin);\\n        _setMinPositiveOpenNotional(params.minPositiveOpenNotional);\\n        _setLiquidationReward(params.liquidationReward);\\n        _setInsuranceRatio(params.insuranceRatio);\\n        _setLiquidationRewardInsuranceShare(params.liquidationRewardInsuranceShare);\\n        _setLiquidationDiscount(params.liquidationDiscount);\\n        _setNonUACollSeizureDiscount(params.nonUACollSeizureDiscount);\\n        _setUaDebtSeizureThreshold(params.uaDebtSeizureThreshold);\\n\\n        emit ClearingHouseParametersChanged(\\n            params.minMargin,\\n            params.minMarginAtCreation,\\n            params.minPositiveOpenNotional,\\n            params.liquidationReward,\\n            params.insuranceRatio,\\n            params.liquidationRewardInsuranceShare,\\n            params.liquidationDiscount,\\n            params.nonUACollSeizureDiscount,\\n            params.uaDebtSeizureThreshold\\n        );\\n    }\\n\\n    /* ****************** */\\n    /*   Market viewer    */\\n    /* ****************** */\\n\\n    /// @notice Return the number of active markets\\n    /// @return Number of active markets\\n    function getNumMarkets() public view override returns (uint256) {\\n        return perpetuals.length;\\n    }\\n\\n    /* ****************** */\\n    /*   User viewer      */\\n    /* ****************** */\\n\\n    /* ****************** */\\n    /*   Internal user    */\\n    /* ****************** */\\n\\n    /// @dev Liquidate a trader account\\n    function _liquidateTrader(\\n        uint256 idx,\\n        address liquidatee,\\n        uint256 proposedAmount\\n    ) internal returns (int256) {\\n        LibPerpetual.Side closeDirection = _getTraderPosition(idx, liquidatee).positionSize >= 0\\n            ? LibPerpetual.Side.Short\\n            : LibPerpetual.Side.Long;\\n\\n        // (liquidatee, proposedAmount)\\n        (, , int256 pnL, ) = perpetuals[idx].changePosition(liquidatee, proposedAmount, 0, closeDirection, true);\\n\\n        // traders are allowed to reduce their positions partially, but liquidators have to close positions in full\\n        if (perpetuals[idx].isTraderPositionOpen(liquidatee))\\n            revert ClearingHouse_LiquidateInsufficientProposedAmount();\\n\\n        return pnL;\\n    }\\n\\n    /// @dev Liquidate a lp account\\n    function _liquidateLp(\\n        uint256 idx,\\n        address liquidatee,\\n        uint256 proposedAmount\\n    ) internal returns (int256) {\\n        // close lp\\n        (int256 pnL, , ) = perpetuals[idx].removeLiquidity(\\n            liquidatee,\\n            _getLpLiquidity(idx, liquidatee),\\n            [uint256(0), uint256(0)],\\n            proposedAmount,\\n            0,\\n            true\\n        );\\n        _distributeLpRewards(idx, liquidatee);\\n\\n        return pnL;\\n    }\\n\\n    /// @dev sub-function of deposit()\\n    function _deposit(uint256 amount, IERC20Metadata token) internal {\\n        vault.deposit(msg.sender, amount, token);\\n    }\\n\\n    /// @dev sub-function of changePosition()\\n    function _changePosition(\\n        uint256 idx,\\n        uint256 amount,\\n        uint256 minAmount,\\n        LibPerpetual.Side direction\\n    ) internal {\\n        if (amount == 0) revert ClearingHouse_ChangePositionZeroAmount();\\n\\n        _settleUserFundingPayments(msg.sender);\\n\\n        (int256 quoteProceeds, int256 baseProceeds, int256 profit, bool isPositionIncreased) = perpetuals[idx]\\n            .changePosition(msg.sender, amount, minAmount, direction, false);\\n\\n        // pay insurance fee\\n        int256 insuranceFeeAmount = 0;\\n        if (isPositionIncreased) {\\n            insuranceFeeAmount = quoteProceeds.abs().wadMul(perpetuals[idx].insuranceFee());\\n            insurance.fundInsurance(insuranceFeeAmount.toUint256());\\n        }\\n\\n        int256 traderVaultDiff = profit - insuranceFeeAmount;\\n        vault.settlePnL(msg.sender, traderVaultDiff);\\n\\n        if (!_isPositionValid(msg.sender, minMarginAtCreation)) revert ClearingHouse_ExtendPositionInsufficientMargin();\\n        if (!_isOpenNotionalRequirementValid(idx, msg.sender, true))\\n            revert ClearingHouse_UnderOpenNotionalAmountRequired();\\n\\n        emit ChangePosition(\\n            idx,\\n            msg.sender,\\n            direction,\\n            quoteProceeds,\\n            baseProceeds,\\n            traderVaultDiff,\\n            isPositionIncreased\\n        );\\n    }\\n\\n    /// @notice Provide liquidity to the pool. Will fail if token isn't supported as collateral\\n    /// @dev Amount is in USD, might come from the balance of multiple collaterals\\n    /// @param idx Index of the perpetual market\\n    /// @param amounts Amount of virtual tokens ([vQuote, vBase]) provided. 18 decimals\\n    /// @param minLpAmount Minimum amount of Lp tokens minted. 18 decimals\\n    function _provideLiquidity(\\n        uint256 idx,\\n        uint256[2] calldata amounts,\\n        uint256 minLpAmount\\n    ) internal {\\n        if (amounts[VQUOTE_INDEX] == 0 && amounts[VBASE_INDEX] == 0) revert ClearingHouse_ProvideLiquidityZeroAmount();\\n\\n        _settleUserFundingPayments(msg.sender);\\n\\n        // Check enough free collateral\\n        int256 freeCollateralUSD = getFreeCollateralByRatio(msg.sender, minMarginAtCreation);\\n\\n        // compare the dollar value of quantities q1 & q2 with the free collateral\\n        // @dev allow to provide liquidity with 2x leverage\\n        if (\\n            amounts[VQUOTE_INDEX].toInt256() + amounts[VBASE_INDEX].toInt256().wadMul(perpetuals[idx].indexPrice()) >\\n            2 * freeCollateralUSD\\n        ) revert ClearingHouse_AmountProvidedTooLarge();\\n\\n        int256 tradingFees = perpetuals[idx].provideLiquidity(msg.sender, amounts, minLpAmount);\\n        if (tradingFees != 0) vault.settlePnL(msg.sender, tradingFees);\\n\\n        _distributeLpRewards(idx, msg.sender);\\n\\n        _isOpenNotionalRequirementValid(idx, msg.sender, false);\\n        _isPositionValid(msg.sender, minMarginAtCreation);\\n\\n        emit LiquidityProvided(idx, msg.sender, amounts[VQUOTE_INDEX], amounts[VBASE_INDEX]);\\n    }\\n\\n    /// @notice Settle funding payments of a user across all markets, on trading and liquidity positions\\n    /// @param account Address of the user to be settled\\n    function _settleUserFundingPayments(address account) internal {\\n        int256 fundingPayments;\\n        for (uint256 i = 0; i < getNumMarkets(); i++) {\\n            fundingPayments += perpetuals[i].settleTrader(account) + perpetuals[i].settleLp(account);\\n        }\\n\\n        if (fundingPayments != 0) {\\n            vault.settlePnL(account, fundingPayments);\\n        }\\n    }\\n\\n    function _distributeLpRewards(uint256 idx, address liquidatee) internal {\\n        if (address(stakingContract) != address(0)) stakingContract.updateStakingPosition(idx, liquidatee);\\n    }\\n\\n    /* ********************** */\\n    /*   internal governance  */\\n    /* ********************** */\\n\\n    function _setMinMargin(int256 newMinMargin) internal {\\n        if (newMinMargin < 25e15) revert ClearingHouse_InsufficientMinMargin();\\n        if (newMinMargin > 3e17) revert ClearingHouse_ExcessiveMinMargin();\\n        if (minMarginAtCreation <= newMinMargin) revert ClearingHouse_InsufficientMinMargin();\\n\\n        minMargin = newMinMargin;\\n    }\\n\\n    function _setMinMarginAtCreation(int256 newMinMarginAtCreation) internal {\\n        if (newMinMarginAtCreation <= minMargin) revert ClearingHouse_InsufficientMinMarginAtCreation();\\n        if (newMinMarginAtCreation > 5e17) revert ClearingHouse_ExcessiveMinMarginAtCreation();\\n\\n        minMarginAtCreation = newMinMarginAtCreation;\\n    }\\n\\n    /// @notice Goal make sure that liquiditors always get a minimum liquidation reward amount\\n    ///         because liquidationRewardAmount = liquidationReward * openNotional\\n    function _setMinPositiveOpenNotional(uint256 newMinPositiveOpenNotional) internal {\\n        if (newMinPositiveOpenNotional > 10000 * 1e18) revert ClearingHouse_ExcessivePositiveOpenNotional();\\n\\n        minPositiveOpenNotional = newMinPositiveOpenNotional;\\n    }\\n\\n    function _setLiquidationReward(uint256 newLiquidationReward) internal {\\n        if (newLiquidationReward < 1e16) revert ClearingHouse_InsufficientLiquidationReward();\\n        if (newLiquidationReward >= minMargin.toUint256()) revert ClearingHouse_ExcessiveLiquidationReward();\\n\\n        liquidationReward = newLiquidationReward;\\n    }\\n\\n    function _setLiquidationDiscount(uint256 newLiquidationDiscount) internal {\\n        if (nonUACollSeizureDiscount + 2e17 > newLiquidationDiscount.toInt256())\\n            revert ClearingHouse_InsufficientDiffBtwLiquidationDiscountAndNonUACollSeizureDiscount();\\n\\n        liquidationDiscount = newLiquidationDiscount;\\n    }\\n\\n    function _setNonUACollSeizureDiscount(int256 newNonUACollSeizureDiscount) internal {\\n        if (newNonUACollSeizureDiscount + 2e17 > liquidationDiscount.toInt256())\\n            revert ClearingHouse_InsufficientDiffBtwLiquidationDiscountAndNonUACollSeizureDiscount();\\n\\n        nonUACollSeizureDiscount = newNonUACollSeizureDiscount;\\n    }\\n\\n    function _setUaDebtSeizureThreshold(int256 newUaDebtSeizureThreshold) internal {\\n        if (newUaDebtSeizureThreshold < 1e20) revert ClearingHouse_InsufficientUaDebtSeizureThreshold();\\n\\n        uaDebtSeizureThreshold = newUaDebtSeizureThreshold;\\n    }\\n\\n    function _setInsuranceRatio(uint256 newInsuranceRatio) internal {\\n        if (newInsuranceRatio < 1e17) revert ClearingHouse_InsufficientInsuranceRatio();\\n        if (newInsuranceRatio > 5e17) revert ClearingHouse_ExcessiveInsuranceRatio();\\n\\n        insuranceRatio = newInsuranceRatio;\\n    }\\n\\n    function _setLiquidationRewardInsuranceShare(uint256 newLiquidationRewardInsuranceShare) internal {\\n        if (newLiquidationRewardInsuranceShare > 1e18) revert ClearingHouse_ExcessiveLiquidationRewardInsuranceShare();\\n\\n        liquidationRewardInsuranceShare = newLiquidationRewardInsuranceShare;\\n    }\\n\\n    /* ****************** */\\n    /*   internal getter  */\\n    /* ****************** */\\n\\n    function _isOpenNotionalRequirementValid(\\n        uint256 idx,\\n        address account,\\n        bool isTrader\\n    ) internal view returns (bool) {\\n        int256 openNotional = isTrader\\n            ? _getTraderPosition(idx, account).openNotional\\n            : _getLpOpenNotional(idx, account);\\n        uint256 absOpenNotional = openNotional.abs().toUint256();\\n\\n        // we don't want the check to fail if the position has been closed (e.g. in `reducePosition`)\\n        if (absOpenNotional > 0) {\\n            return absOpenNotional > minPositiveOpenNotional;\\n        }\\n\\n        return true;\\n    }\\n\\n    function getPnLAcrossMarkets(address account) public view override returns (int256 unrealizedPositionPnl) {\\n        for (uint256 i = 0; i < getNumMarkets(); i++) {\\n            unrealizedPositionPnl += perpetuals[i].getPendingPnL(account);\\n        }\\n    }\\n\\n    function getDebtAcrossMarkets(address account) public view override returns (int256 userDebt) {\\n        for (uint256 i = 0; i < getNumMarkets(); i++) {\\n            uint256 weight = perpetuals[i].riskWeight();\\n            userDebt += perpetuals[i].getUserDebt(account).wadMul(weight.toInt256());\\n        }\\n    }\\n\\n    /// @notice Determines whether or not a position is valid for a given margin ratio\\n    /// @param account Account of the position to get the margin ratio from\\n    /// @param ratio Proposed ratio to compare the position against\\n    /// @return True if the position exceeds margin ratio, false otherwise\\n    function _isPositionValid(address account, int256 ratio) internal view returns (bool) {\\n        return getFreeCollateralByRatio(account, ratio) >= 0;\\n    }\\n\\n    function getTotalMarginRequirement(address account, int256 ratio) public view returns (int256 requiredMargin) {\\n        int256 userDebt = getDebtAcrossMarkets(account);\\n\\n        return userDebt.wadMul(ratio);\\n    }\\n\\n    function getFreeCollateralByRatio(address account, int256 ratio) public view returns (int256 freeCollateral) {\\n        int256 pnl = getPnLAcrossMarkets(account);\\n        int256 reserveValue = _getReserveValue(account, true);\\n\\n        int256 marginRequired = getTotalMarginRequirement(account, ratio);\\n\\n        return reserveValue.min(reserveValue + pnl) - marginRequired;\\n    }\\n\\n    function _getReserveValue(address account, bool isDiscounted) internal view returns (int256) {\\n        return vault.getReserveValue(account, isDiscounted);\\n    }\\n\\n    function _getTraderPosition(uint256 idx, address account)\\n        internal\\n        view\\n        returns (LibPerpetual.TraderPosition memory)\\n    {\\n        return perpetuals[idx].getTraderPosition(account);\\n    }\\n\\n    function _getLpLiquidity(uint256 idx, address account) internal view returns (uint256) {\\n        return perpetuals[idx].getLpLiquidity(account);\\n    }\\n\\n    function _getLpOpenNotional(uint256 idx, address account) internal view returns (int256) {\\n        return perpetuals[idx].getLpOpenNotional(account);\\n    }\\n}\\n\",\"keccak256\":\"0x2ab20da81fca8e36bf2886bfeb1441f465859e795bc09363c3b375389d1db75b\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IClearingHouse.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\nimport {IPerpetual} from \\\"./IPerpetual.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IStakingContract} from \\\"./IStakingContract.sol\\\";\\n\\n// libraries\\nimport {LibPerpetual} from \\\"../lib/LibPerpetual.sol\\\";\\n\\ninterface IClearingHouse {\\n    struct ClearingHouseParams {\\n        int256 minMargin;\\n        int256 minMarginAtCreation;\\n        uint256 minPositiveOpenNotional;\\n        uint256 liquidationReward;\\n        uint256 insuranceRatio;\\n        uint256 liquidationRewardInsuranceShare;\\n        uint256 liquidationDiscount;\\n        int256 nonUACollSeizureDiscount;\\n        int256 uaDebtSeizureThreshold;\\n    }\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided\\n    error ClearingHouse_ZeroAddress();\\n\\n    /// @notice Emitted when passing the address of a perpetual market which has already been added\\n    error ClearingHouse_PerpetualMarketAlreadyAssigned();\\n\\n    /// @notice Emitted when there is not enough margin to withdraw the requested amount\\n    error ClearingHouse_WithdrawInsufficientMargin();\\n\\n    /// @notice Emitted when the position is not reduced entirely using closePositionWithdrawCollateral\\n    error ClearingHouse_ClosePositionStillOpen();\\n\\n    /// @notice Emitted when the liquidatee does not have an open position\\n    error ClearingHouse_LiquidateInvalidPosition();\\n\\n    /// @notice Emitted when the margin of the liquidatee's position is still valid\\n    error ClearingHouse_LiquidateValidMargin();\\n\\n    /// @notice Emitted when the attempted liquidation does not close the full position\\n    error ClearingHouse_LiquidateInsufficientProposedAmount();\\n\\n    /// @notice Emitted when attempting to seize collateral of a user with an open position\\n    error ClearingHouse_SeizeCollateralStillOpen();\\n\\n    /// @notice Emitted when a user attempts to provide liquidity with amount equal to 0\\n    error ClearingHouse_ProvideLiquidityZeroAmount();\\n\\n    /// @notice Emitted when a user attempts to provide liquidity with amount larger than his free collateral or collateral balance\\n    error ClearingHouse_AmountProvidedTooLarge();\\n\\n    /// @notice Emitted when a user attempts to withdraw more liquidity than they have\\n    error ClearingHouse_RemoveLiquidityInsufficientFunds();\\n\\n    /// @notice Emitted when vault withdrawal is unsuccessful\\n    error ClearingHouse_VaultWithdrawUnsuccessful();\\n\\n    /// @notice Emitted when the proposed minMargin is too low\\n    error ClearingHouse_InsufficientMinMargin();\\n\\n    /// @notice Emitted when the proposed minMargin is too high\\n    error ClearingHouse_ExcessiveMinMargin();\\n\\n    error ClearingHouse_ExcessivePositiveOpenNotional();\\n\\n    /// @notice Emitted when the proposed minMarginAtCreation is too low\\n    error ClearingHouse_InsufficientMinMarginAtCreation();\\n\\n    /// @notice Emitted when the proposed minMarginAtCreation is too low\\n    error ClearingHouse_ExcessiveMinMarginAtCreation();\\n\\n    /// @notice Emitted when the proposed liquidation reward is too low\\n    error ClearingHouse_InsufficientLiquidationReward();\\n\\n    /// @notice Emitted when the proposed liquidation reward is too high\\n    error ClearingHouse_ExcessiveLiquidationReward();\\n\\n    /// @notice Emitted when the proposed insurance ratio is too low\\n    error ClearingHouse_InsufficientInsuranceRatio();\\n\\n    /// @notice Emitted when the proposed insurance ratio is too high\\n    error ClearingHouse_ExcessiveInsuranceRatio();\\n\\n    /// @notice Emitted when the proposed share of the liquidation reward for the insurance is too high\\n    error ClearingHouse_ExcessiveLiquidationRewardInsuranceShare();\\n\\n    /// @notice Emitted when the difference between liquidationDiscount and nonUACollSeizureDiscount isn't large enough\\n    error ClearingHouse_InsufficientDiffBtwLiquidationDiscountAndNonUACollSeizureDiscount();\\n\\n    /// @notice Emitted when the proposed UA debt limit is lower than the minimum acceptable value\\n    error ClearingHouse_InsufficientUaDebtSeizureThreshold();\\n\\n    /// @notice Emitted when a user attempts to extend their position with amount equal to 0\\n    error ClearingHouse_ExtendPositionZeroAmount();\\n\\n    /// @notice Emitted when there is not enough margin to extend to the proposed position amount\\n    error ClearingHouse_ExtendPositionInsufficientMargin();\\n\\n    /// @notice Emitted when a user attempts to reduce their position with amount equal to 0\\n    error ClearingHouse_ReducePositionZeroAmount();\\n\\n    error ClearingHouse_ChangePositionZeroAmount();\\n\\n    /// @notice Emitted when a user tries to open a position with an incorrect open notional amount\\n    error ClearingHouse_UnderOpenNotionalAmountRequired();\\n\\n    /// @notice Emitted when a collateral liquidation for a user with no UA debt is tried\\n    error ClearingHouse_LiquidationDebtSizeZero();\\n\\n    /// @notice Emitted when a liquidator tries seizing collateral of user with sufficient collaterals level\\n    error ClearingHouse_SufficientUserCollateral();\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when new perpetual market is added\\n    /// @param perpetual New perpetual market\\n    /// @param numPerpetuals Number of perpetual markets\\n    event MarketAdded(IPerpetual indexed perpetual, uint256 numPerpetuals);\\n\\n    /// @notice Emitted when a position is extended/opened\\n    /// @param idx Index of the perpetual market\\n    /// @param user User who deposited collateral\\n    /// @param direction Whether the position is LONG or SHORT\\n    /// @param addedOpenNotional Notional (USD assets/debt) added to the position\\n    /// @param addedPositionSize positionSize (Base assets/debt) added to the position\\n    /// @param profit Sum of pnL + tradingFeesPayed + fundingPaymentsPaid\\n    /// @param isPositionIncreased Whether the position was extended or reduced / reversed\\n    event ChangePosition(\\n        uint256 indexed idx,\\n        address indexed user,\\n        LibPerpetual.Side direction,\\n        int256 addedOpenNotional,\\n        int256 addedPositionSize,\\n        int256 profit,\\n        bool isPositionIncreased\\n    );\\n\\n    /// @notice Emitted when a trader position is liquidated\\n    /// @param idx Index of the perpetual market\\n    /// @param liquidatee User who gets liquidated\\n    /// @param liquidator User who is liquidating\\n    /// @param notional Notional amount of the liquidatee\\n    event LiquidationCall(\\n        uint256 indexed idx,\\n        address indexed liquidatee,\\n        address indexed liquidator,\\n        uint256 notional\\n    );\\n\\n    /// @notice Emitted when a trader position is liquidated\\n    /// @param liquidatee User who gets liquidated\\n    /// @param liquidator User who is liquidating\\n    event SeizeCollateral(address indexed liquidatee, address indexed liquidator);\\n\\n    /// @notice Emitted when (additional) liquidity is provided\\n    /// @param idx Index of the perpetual market\\n    /// @param liquidityProvider User who provides liquidity\\n    /// @param quoteAmount vQuote amount (i.e. USD amount) to be added to the targeted market\\n    /// @param baseAmount vBase amount (i.e. Base amount) to be added to the targeted market\\n    event LiquidityProvided(\\n        uint256 indexed idx,\\n        address indexed liquidityProvider,\\n        uint256 quoteAmount,\\n        uint256 baseAmount\\n    );\\n\\n    /// @notice Emitted when liquidity is removed\\n    /// @param idx Index of the perpetual market\\n    /// @param liquidityProvider User who provides liquidity\\n    /// @param reductionRatio Pourcentage of previous position reduced\\n    event LiquidityRemoved(uint256 indexed idx, address indexed liquidityProvider, uint256 reductionRatio);\\n\\n    /// @notice Emitted when dust is sold by governance\\n    /// @param idx Index of the perpetual market\\n    /// @param profit Amount of profit generated by the dust sale. 18 decimals\\n    event DustSold(uint256 indexed idx, int256 profit);\\n\\n    /// @notice Emitted when parameters are changed\\n    event ClearingHouseParametersChanged(\\n        int256 newMinMargin,\\n        int256 newMinMarginAtCreation,\\n        uint256 newMinPositiveOpenNotional,\\n        uint256 newLiquidationReward,\\n        uint256 newInsuranceRatio,\\n        uint256 newLiquidationRewardInsuranceShare,\\n        uint256 newLiquidationDiscount,\\n        int256 nonUACollSeizureDiscount,\\n        int256 uaDebtSeizureThreshold\\n    );\\n\\n    event StakingContractChanged(IStakingContract newStakingContract);\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function vault() external view returns (IVault);\\n\\n    function insurance() external view returns (IInsurance);\\n\\n    function perpetuals(uint256 idx) external view returns (IPerpetual);\\n\\n    function stakingContract() external view returns (IStakingContract);\\n\\n    function getNumMarkets() external view returns (uint256);\\n\\n    function minMargin() external view returns (int256);\\n\\n    function minMarginAtCreation() external view returns (int256);\\n\\n    function minPositiveOpenNotional() external view returns (uint256);\\n\\n    function liquidationReward() external view returns (uint256);\\n\\n    function insuranceRatio() external view returns (uint256);\\n\\n    function liquidationRewardInsuranceShare() external view returns (uint256);\\n\\n    function liquidationDiscount() external view returns (uint256);\\n\\n    function nonUACollSeizureDiscount() external view returns (int256);\\n\\n    function uaDebtSeizureThreshold() external view returns (int256);\\n\\n    function getPnLAcrossMarkets(address account) external view returns (int256);\\n\\n    function getDebtAcrossMarkets(address account) external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function allowListPerpetual(IPerpetual perp) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function sellDust(\\n        uint256 idx,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external;\\n\\n    function setParameters(ClearingHouseParams memory params) external;\\n\\n    function addStakingContract(IStakingContract staking) external;\\n\\n    function deposit(uint256 amount, IERC20Metadata token) external;\\n\\n    function withdraw(uint256 amount, IERC20Metadata token) external;\\n\\n    function withdrawAll(IERC20Metadata token) external;\\n\\n    function changePosition(\\n        uint256 idx,\\n        uint256 amount,\\n        uint256 minAmount,\\n        LibPerpetual.Side direction\\n    ) external;\\n\\n    function extendPositionWithCollateral(\\n        uint256 idx,\\n        uint256 collateralAmount,\\n        IERC20Metadata token,\\n        uint256 positionAmount,\\n        LibPerpetual.Side direction,\\n        uint256 minAmount\\n    ) external;\\n\\n    function closePositionWithdrawCollateral(\\n        uint256 idx,\\n        uint256 proposedAmount,\\n        uint256 minAmount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function openReversePosition(\\n        uint256 idx,\\n        uint256 closeProposedAmount,\\n        uint256 closeMinAmount,\\n        uint256 openProposedAmount,\\n        uint256 openMinAmount,\\n        LibPerpetual.Side direction\\n    ) external;\\n\\n    function liquidate(\\n        uint256 idx,\\n        address liquidatee,\\n        uint256 proposedAmount,\\n        bool isTrader\\n    ) external;\\n\\n    function seizeCollateral(address liquidatee) external;\\n\\n    function provideLiquidity(\\n        uint256 idx,\\n        uint256[2] calldata amounts,\\n        uint256 minLpAmount\\n    ) external;\\n\\n    function removeLiquidity(\\n        uint256 idx,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5b42c943b3bc17c9f30a485892abc1e37227a1d782f2572fbb90ac74fb2a8f41\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ICryptoSwap.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n/// @dev Contract https://github.com/curvefi/curve-crypto-contract/blob/master/deployment-logs/2021-11-01.%20EURS%20on%20mainnet/CryptoSwap.vy\\ninterface ICryptoSwap {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function price_oracle() external view returns (uint256);\\n\\n    function mid_fee() external view returns (uint256);\\n\\n    function out_fee() external view returns (uint256);\\n\\n    function admin_fee() external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    // Swap token i to j with amount dx and min amount min_dy\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external returns (uint256); // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external; // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\\n\\n    function last_prices() external view returns (uint256);\\n\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5952e746ce8024e5ad42258df6c5adfcf61302c0e776c6682c64fdb3332bc1ba\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IIncreAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IIncreAccessControl is IAccessControl {\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function isGovernor(address account) external view returns (bool);\\n\\n    function isManager(address account) external view returns (bool);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0xb5ae4cbf7c064a5408ccff0ad110e69607a273c4b121f6d35edf11539c2ddfcd\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\ninterface IInsurance {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Insurance_ZeroAddressConstructor(uint8 paramIndex);\\n\\n    /// @notice Emitted when the sender is not the vault address\\n    error Insurance_SenderNotVault();\\n\\n    /// @notice Emitted when the sender is not the clearingHouse address\\n    error Insurance_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when the balance of the vault is less than the amount to be settled\\n    error Insurance_InsufficientBalance();\\n\\n    /// @notice Emitted when locked insurance falls below insurance ratio\\n    error Insurance_InsufficientInsurance();\\n\\n    /// @notice Emitted when the proposed clearingHouse address is equal to the zero address\\n    error Insurance_ClearingHouseZeroAddress();\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when a new ClearingHouse is connected to the issuer\\n    /// @param newClearingHouse New ClearingHouse contract address\\n    event ClearingHouseChanged(IClearingHouse newClearingHouse);\\n\\n    /// @notice Emitted when (exceeding) insurance reserves are withdrawn by governance\\n    /// @param amount Amount of insurance reserves withdrawn. 18 decimals\\n    event InsuranceRemoved(uint256 amount);\\n\\n    /// @notice Emitted when a bail out cant be fully served\\n    /// @param newSystemDebt New amount of system debt. 18 decimals (accounted for in UA)\\n    event SystemDebtChanged(uint256 newSystemDebt);\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function fundInsurance(uint256 amount) external;\\n\\n    function settleDebt(uint256 amount) external;\\n\\n    function removeInsurance(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa11803c6a6dde11512822c0a5c16dc1210576651223404f807424ee511d189c7\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/// @notice Oracle interface created to ease oracle contract switch\\ninterface IOracle {\\n    struct AssetOracle {\\n        uint24 heartBeat;\\n        AggregatorV3Interface aggregator; // aggregator of the ERC20 token for ERC4626 tokens\\n        bool isVaultAsset;\\n        int256 fixedPrice;\\n    }\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when oracle heart beat is updated\\n    /// @param asset Asset that got linked to an oracle\\n    /// @param aggregator Chainlink aggregator used as the asset oracle\\n    /// @param isVault True if the asset is a ERC-4626 vault asset\\n    event OracleUpdated(address asset, AggregatorV3Interface aggregator, bool isVault);\\n\\n    /// @notice Emitted when an asset got a fixed price when requesting an oracle\\n    /// @param asset Asset which got a fixed price\\n    /// @param fixedPrice Fixed price that the asset got\\n    event AssetGotFixedPrice(address asset, int256 fixedPrice);\\n\\n    /// @notice Emitted when oracle heart beat is updated\\n    /// @param asset Asset whose heartBeat is updated\\n    /// @param newHeartBeat New heart beat value\\n    event HeartBeatUpdated(address asset, uint24 newHeartBeat);\\n\\n    /// @notice Emitted when sequencer uptime feed is updated\\n    /// @param newSequencerUptimeFeed New sequencer uptime feed\\n    event SequencerUptimeFeedUpdated(AggregatorV3Interface newSequencerUptimeFeed);\\n\\n    /// @notice Emitted when grace period is updated\\n    /// @param newGracePeriod New grace period\\n    event GracePeriodUpdated(uint256 newGracePeriod);\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the latest round is incomplete\\n    error Oracle_InvalidRoundTimestamp();\\n\\n    /// @notice Emitted when the latest round's price is invalid\\n    error Oracle_InvalidRoundPrice();\\n\\n    /// @notice Emitted when the latest round's data is older than the oracle's max refresh time\\n    error Oracle_DataNotFresh();\\n\\n    /// @notice Emitted when the proposed asset address is equal to the zero address\\n    error Oracle_AssetZeroAddress();\\n\\n    /// @notice Emitted when the proposed aggregator address is equal to the zero address\\n    error Oracle_AggregatorZeroAddress();\\n\\n    /// @notice Emitted when the proposed sequencer uptime feed address is equal to the zero address\\n    error Oracle_SequencerUptimeFeedZeroAddress();\\n\\n    /// @notice Emitted when owner tries to set fixed price to an unsupported asset\\n    error Oracle_UnsupportedAsset();\\n\\n    /// @notice Emitted when Zksync sequencer is down\\n    error Oracle_SequencerDown();\\n\\n    /// @notice Emitted when Zksync sequencer hasn't been back up for long enough\\n    error Oracle_GracePeriodNotOver();\\n\\n    /// @notice Emitted when proposed grace period doesn't fit in the defined bounds\\n    error Oracle_IncorrectGracePeriod();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function gracePeriod() external view returns (uint256);\\n\\n    function sequencerUptimeFeed() external view returns (AggregatorV3Interface);\\n\\n    function getPrice(address asset, int256 erc4626Shares) external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function setOracle(\\n        address asset,\\n        AggregatorV3Interface aggregator,\\n        uint24 heartBeat,\\n        bool isVault\\n    ) external;\\n\\n    function setFixedPrice(address asset, int256 fixedPrice) external;\\n\\n    function setHeartBeat(address asset, uint24 newHeartBeat) external;\\n\\n    function setSequencerUptimeFeed(AggregatorV3Interface newSequencerUptimeFeed) external;\\n\\n    function setGracePeriod(uint256 newGracePeriod) external;\\n}\\n\",\"keccak256\":\"0x10beffd43046f42d1f2325e37d2926a42fbfd5d26b37943c0ec38c3421817a60\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPerpetual.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IVBase} from \\\"./IVBase.sol\\\";\\nimport {IVQuote} from \\\"./IVQuote.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\n// libraries\\nimport {LibPerpetual} from \\\"../lib/LibPerpetual.sol\\\";\\n\\ninterface IPerpetual {\\n    struct PerpetualParams {\\n        uint256 riskWeight;\\n        uint256 maxLiquidityProvided;\\n        uint256 twapFrequency;\\n        int256 sensitivity;\\n        uint256 maxBlockTradeAmount;\\n        int256 insuranceFee;\\n        int256 tradingFee;\\n        int256 lpDebtCoef;\\n        uint256 lockPeriod;\\n    }\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Perpetual_ZeroAddressConstructor(uint256 paramIndex);\\n\\n    /// @notice Emitted when the constructor fails to give approval of a virtual token to the market\\n    error Perpetual_VirtualTokenApprovalConstructor(uint256 tokenIndex);\\n\\n    /// @notice Emitted when market mid fee does not equal out fee\\n    error Perpetual_MarketEqualFees();\\n\\n    /// @notice Emitted when the curve admin fee is invalid\\n    error Perpetual_InvalidAdminFee();\\n\\n    /// @notice Emitted when the sender is not the clearing house\\n    error Perpetual_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when the sender is not the clearing house owner\\n    error Perpetual_SenderNotClearingHouseOwner();\\n\\n    /// @notice Emitted when the user attempts to reduce their position using extendPosition\\n    error Perpetual_AttemptReducePosition();\\n\\n    /// @notice Emitted when the user attempts to reverse their position using changePosition\\n    error Perpetual_AttemptReversePosition();\\n\\n    /// @notice Emitted when the price impact of a position is too high\\n    error Perpetual_ExcessiveBlockTradeAmount();\\n\\n    /// @notice Emitted when the user does not have an open position\\n    error Perpetual_NoOpenPosition();\\n\\n    /// @notice Emitted when the user attempts to withdraw more liquidity than they have deposited\\n    error Perpetual_LPWithdrawExceedsBalance();\\n\\n    /// @notice Emitted when the proposed twap frequency is insufficient/excessive\\n    error Perpetual_TwapFrequencyInvalid(uint256 twapFrequency);\\n\\n    /// @notice Emitted when the proposed funding rate sensitivity is insufficient/excessive\\n    error Perpetual_SensitivityInvalid(int256 sensitivity);\\n\\n    /// @notice Emitted when the proposed maximum block trade amount is insufficient\\n    error Perpetual_MaxBlockAmountInvalid(uint256 maxBlockTradeAmount);\\n\\n    /// @notice Emitted when the proposed insurance fee is insufficient/excessive\\n    error Perpetual_InsuranceFeeInvalid(int256 fee);\\n\\n    /// @notice Emitted when the proposed trading fee is insufficient/excessive\\n    error Perpetual_TradingFeeInvalid(int256 fee);\\n\\n    /// @notice Emitted when the proposed lp debt coefficient is insufficient/excessive\\n    error Perpetual_LpDebtCoefInvalid(int256 lpDebtCoef);\\n\\n    /// @notice Emitted when the proposed lp lock period is insufficient/excessive\\n    error Perpetual_LockPeriodInvalid(uint256 lockPeriod);\\n\\n    /// @notice Emitted when a token balance of the market is lte 1\\n    error Perpetual_MarketBalanceTooLow();\\n\\n    /// @notice Emitted when the liquidity provider has an open position\\n    error Perpetual_LPOpenPosition();\\n\\n    /// @notice Emitted when proposed amount is greater than position size\\n    error Perpetual_ProposedAmountExceedsPositionSize();\\n\\n    /// @notice Emitted when proposed amount is greater than maxVQuoteAmount\\n    error Perpetual_ProposedAmountExceedsMaxMarketPrice();\\n\\n    /// @notice Emitted when the max tvl is reached\\n    error Perpetual_MaxLiquidityProvided();\\n\\n    /// @notice Emitted when the position exceeds the max position size\\n    error Perpetual_MaxPositionSize();\\n\\n    /// @notice Emitted when the user attempts provide liquidity with skewed ratios\\n    error Perpetual_LpAmountDeviation();\\n\\n    /// @notice Emitted when the user attempts remove liquidity too early\\n    error Perpetual_LockPeriodNotReached(uint256 withdrawTime);\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when twap is updated\\n    /// @param newOracleTwap Latest oracle Time-weighted-average-price\\n    /// @param newMarketTwap Latest market Time-weighted-average-price\\n    event TwapUpdated(int256 newOracleTwap, int256 newMarketTwap);\\n\\n    /// @notice Emitted when funding rate is updated\\n    /// @param cumulativeFundingRate Cumulative sum of all funding rate updates\\n    /// @param fundingRate Latest fundingRate update\\n    event FundingRateUpdated(int256 cumulativeFundingRate, int256 fundingRate);\\n\\n    /// @notice Emitted when swap with cryptoswap pool fails\\n    /// @param errorMessage Return error message\\n    event Log(string errorMessage);\\n\\n    /// @notice Emitted when (base) dust is generated\\n    /// @param vBaseAmount Amount of dust\\n    event DustGenerated(uint256 vBaseAmount);\\n\\n    /// @notice Emitted when parameters are changed\\n    event PerpetualParametersChanged(\\n        uint256 newRiskWeight,\\n        uint256 newMaxLiquidityProvided,\\n        uint256 newTwapFrequency,\\n        int256 newSensitivity,\\n        uint256 newMaxBlockTradeAmount,\\n        int256 newInsuranceFee,\\n        int256 newTradingFee,\\n        int256 newLpDebtCoef,\\n        uint256 lockPeriod\\n    );\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function market() external view returns (ICryptoSwap);\\n\\n    function vBase() external view returns (IVBase);\\n\\n    function vQuote() external view returns (IVQuote);\\n\\n    function clearingHouse() external view returns (IClearingHouse);\\n\\n    function maxLiquidityProvided() external view returns (uint256);\\n\\n    function riskWeight() external view returns (uint256);\\n\\n    function twapFrequency() external view returns (uint256);\\n\\n    function sensitivity() external view returns (int256);\\n\\n    function maxBlockTradeAmount() external view returns (uint256);\\n\\n    function maxPosition() external view returns (uint256);\\n\\n    function tradingFee() external view returns (int256);\\n\\n    function insuranceFee() external view returns (int256);\\n\\n    function lpDebtCoef() external view returns (int256);\\n\\n    function lockPeriod() external view returns (uint256);\\n\\n    function oracleTwap() external view returns (int256);\\n\\n    function marketTwap() external view returns (int256);\\n\\n    function getTraderPosition(address account) external view returns (LibPerpetual.TraderPosition memory);\\n\\n    function getLpPositionAfterWithdrawal(address account) external view returns (LibPerpetual.TraderPosition memory);\\n\\n    function getLpLiquidity(address account) external view returns (uint256);\\n\\n    function getLpPosition(address account) external view returns (LibPerpetual.LiquidityProviderPosition memory);\\n\\n    function getGlobalPosition() external view returns (LibPerpetual.GlobalPosition memory);\\n\\n    function getTraderUnrealizedPnL(address account) external view returns (int256);\\n\\n    function getTraderFundingPayments(address account) external view returns (int256);\\n\\n    function getLpUnrealizedPnL(address account) external view returns (int256);\\n\\n    function getLpFundingPayments(address account) external view returns (int256);\\n\\n    function getLpTradingFees(address account) external view returns (uint256);\\n\\n    function marketPrice() external view returns (uint256);\\n\\n    function indexPrice() external view returns (int256);\\n\\n    function getTotalLiquidityProvided() external view returns (uint256);\\n\\n    function getPendingPnL(address account) external view returns (int256 pnL);\\n\\n    function getUserDebt(address account) external view returns (int256 debt);\\n\\n    function isTraderPositionOpen(address account) external view returns (bool);\\n\\n    function isLpPositionOpen(address account) external view returns (bool);\\n\\n    function getLpOpenNotional(address account) external view returns (int256);\\n\\n    /* ************* */\\n    /*    Helpers    */\\n    /* ************* */\\n\\n    function removeLiquiditySwap(\\n        address user,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount\\n    ) external;\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function changePosition(\\n        address account,\\n        uint256 amount,\\n        uint256 minAmount,\\n        LibPerpetual.Side direction,\\n        bool isLiquidation\\n    )\\n        external\\n        returns (\\n            int256 openNotional,\\n            int256 positionSize,\\n            int256 profit,\\n            bool isPositionIncreased\\n        );\\n\\n    function provideLiquidity(\\n        address account,\\n        uint256[2] calldata amounts,\\n        uint256 minLpAmount\\n    ) external returns (int256 tradingFees);\\n\\n    function removeLiquidity(\\n        address account,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        uint256 minAmount,\\n        bool isLiquidation\\n    )\\n        external\\n        returns (\\n            int256 profit,\\n            uint256 reductionRatio,\\n            int256 quoteProceeds\\n        );\\n\\n    function settleTrader(address account) external returns (int256 fundingPayments);\\n\\n    function settleLp(address account) external returns (int256 fundingPayments);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function setParameters(PerpetualParams memory params) external;\\n}\\n\",\"keccak256\":\"0x40dcc765bf45f63ce667760253ae705509847a0200cf274dc9839902b85d6d2c\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IStakingContract.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\ninterface IStakingContract {\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function updateStakingPosition(uint256 idx, address lp) external;\\n}\\n\",\"keccak256\":\"0x8832855e64e76138b1024b14eb9ec4aa715c63173b0c2e0994321d7beb84443b\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IVirtualToken} from \\\"../interfaces/IVirtualToken.sol\\\";\\n\\ninterface IVBase is IVirtualToken {\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when oracle heart beat is updated\\n    /// @param newHeartBeat New heart beat value\\n    event HeartBeatUpdated(uint256 newHeartBeat);\\n\\n    /// @notice Emitted when sequencer uptime feed is updated\\n    /// @param newSequencerUptimeFeed New sequencer uptime feed\\n    event SequencerUptimeFeedUpdated(AggregatorV3Interface newSequencerUptimeFeed);\\n\\n    /// @notice Emitted when grace period is updated\\n    /// @param newGracePeriod New grace period\\n    event GracePeriodUpdated(uint256 newGracePeriod);\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the proposed aggregators decimals are less than PRECISION\\n    error VBase_InsufficientPrecision();\\n\\n    /// @notice Emitted when the latest round is incomplete\\n    error VBase_InvalidRoundTimestamp();\\n\\n    /// @notice Emitted when the latest round's price is invalid\\n    error VBase_InvalidRoundPrice();\\n\\n    /// @notice Emitted when the latest round's data is older than the oracle's max refresh time\\n    error VBase_DataNotFresh();\\n\\n    /// @notice Emitted when proposed sequencer uptime feed address is equal to the zero address\\n    error VBase_SequencerUptimeFeedZeroAddress();\\n\\n    /// @notice Emitted when proposed grace period is outside of the bounds\\n    error VBase_IncorrectGracePeriod();\\n\\n    /// @notice Emitted when Zksync sequencer is down\\n    error VBase_SequencerDown();\\n\\n    /// @notice Emitted when Zksync sequencer hasn't been back up for long enough\\n    error VBase_GracePeriodNotOver();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function getIndexPrice() external view returns (int256);\\n\\n    function heartBeat() external view returns (uint256);\\n\\n    function sequencerUptimeFeed() external view returns (AggregatorV3Interface);\\n\\n    function gracePeriod() external view returns (uint256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function setHeartBeat(uint256 newHeartBeat) external;\\n\\n    function setSequencerUptimeFeed(AggregatorV3Interface newSequencerUptimeFeed) external;\\n\\n    function setGracePeriod(uint256 newGracePeriod) external;\\n}\\n\",\"keccak256\":\"0xdd755b91ebf39942b92635950a1a4a086919652ab229042e3d6c98f82d96021c\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVQuote.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IVirtualToken} from \\\"../interfaces/IVirtualToken.sol\\\";\\n\\ninterface IVQuote is IVirtualToken {}\\n\",\"keccak256\":\"0xf3c21b1973b431c9e0fd63e60544be3e5a7e51bfb4d6f8b4dbac26f38dc3f17b\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {IOracle} from \\\"./IOracle.sol\\\";\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\n// @dev: deposit uint and withdraw int\\n// @author: The interface used in other contracts\\ninterface IVault {\\n    struct Collateral {\\n        IERC20Metadata asset;\\n        uint256 weight;\\n        uint8 decimals;\\n        uint256 currentAmount;\\n        uint256 maxAmount;\\n    }\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Vault_ZeroAddressConstructor(uint8 paramIndex);\\n\\n    /// @notice Emitted when user tries to withdraw collateral while having a UA debt\\n    error Vault_UADebt();\\n\\n    /// @notice Emitted when the sender is not the clearing house\\n    error Vault_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when the sender is not the clearing house, nor the insurance\\n    error Vault_SenderNotClearingHouseNorInsurance();\\n\\n    /// @notice Emitted when a user attempts to use a token which is not whitelisted as collateral\\n    error Vault_UnsupportedCollateral();\\n\\n    /// @notice Emitted when owner tries to whitelist a collateral already whitelisted\\n    error Vault_CollateralAlreadyWhiteListed();\\n\\n    /// @notice Emitted when a user attempts to withdraw with a reduction ratio above 1e18\\n    error Vault_WithdrawReductionRatioTooHigh();\\n\\n    /// @notice Emitted when a user attempts to withdraw more than their balance\\n    error Vault_WithdrawExcessiveAmount();\\n\\n    /// @notice Emitted when the proposed clearingHouse address is equal to the zero address\\n    error Vault_ClearingHouseZeroAddress();\\n\\n    /// @notice Emitted when the proposed insurance address is equal to the zero address\\n    error Vault_InsuranceZeroAddress();\\n\\n    /// @notice Emitted when the proposed oracle address is equal to the zero address\\n    error Vault_OracleZeroAddress();\\n\\n    /// @notice Emitted when the proposed collateral weight is under the limit\\n    error Vault_InsufficientCollateralWeight();\\n\\n    /// @notice Emitted when the proposed collateral weight is above the limit\\n    error Vault_ExcessiveCollateralWeight();\\n\\n    /// @notice Emitted when a user attempts to withdraw more collateral than available in vault\\n    error Vault_InsufficientBalance();\\n\\n    /// @notice Emitted when a user attempts to withdraw more collateral than available in vault\\n    error Vault_MaxCollateralAmountExceeded();\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when collateral is deposited into the vault\\n    /// @param user User who deposited collateral\\n    /// @param asset Token to be used for the collateral\\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\\n    event Deposit(address indexed user, address indexed asset, uint256 amount);\\n\\n    /// @notice Emitted when collateral is withdrawn from the vault\\n    /// @param user User who deposited collateral\\n    /// @param asset Token to be used for the collateral\\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\\n    event Withdraw(address indexed user, address indexed asset, uint256 amount);\\n\\n    /// @notice Emitted when bad debt is settled for by the insurance reserve\\n    /// @param beneficiary Beneficiary of the insurance payment\\n    /// @param amount Amount of bad insurance requested\\n    event TraderBadDebtGenerated(address beneficiary, uint256 amount);\\n\\n    /// @notice Emitted when a new ClearingHouse is connected to the vault\\n    /// @param newClearingHouse New ClearingHouse contract address\\n    event ClearingHouseChanged(IClearingHouse newClearingHouse);\\n\\n    /// @notice Emitted when a new Insurance is connected to the vault\\n    /// @param newInsurance New Insurance contract address\\n    event InsuranceChanged(IInsurance newInsurance);\\n\\n    /// @notice Emitted when a new Oracle is connected to the vault\\n    /// @param newOracle New Oracle contract address\\n    event OracleChanged(IOracle newOracle);\\n\\n    /// @notice Emitted when a new Oracle is connected to the vault\\n    /// @param asset Asset added as collateral\\n    /// @param weight Volatility measure of the asset\\n    /// @param maxAmount weight for the collateral\\n    event CollateralAdded(IERC20Metadata asset, uint256 weight, uint256 maxAmount);\\n\\n    /// @notice Emitted when a collateral weight changed\\n    /// @param asset Asset targeted by the change\\n    /// @param newWeight New volatility measure for the collateral\\n    event CollateralWeightChanged(IERC20Metadata asset, uint256 newWeight);\\n\\n    /// @notice Emitted when a collateral max amount changed\\n    /// @param asset Asset targeted by the change\\n    /// @param newMaxAmount New weight for the collateral\\n    event CollateralMaxAmountChanged(IERC20Metadata asset, uint256 newMaxAmount);\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n    function insurance() external view returns (IInsurance);\\n\\n    function oracle() external view returns (IOracle);\\n\\n    function clearingHouse() external view returns (IClearingHouse);\\n\\n    // slither-disable-next-line naming-convention\\n    function UA() external view returns (IERC20Metadata);\\n\\n    function tokenToCollateralIdx(IERC20Metadata token) external view returns (uint256);\\n\\n    function getTotalValueLocked() external view returns (int256);\\n\\n    function getWhiteListedCollateral(uint256 idx) external view returns (Collateral memory);\\n\\n    function getNumberOfCollaterals() external view returns (uint256);\\n\\n    function getReserveValue(address trader, bool isDiscounted) external view returns (int256);\\n\\n    function getBalance(address user, uint256 tokenIdx) external view returns (int256);\\n\\n    function getDiscountedCollateralUSDValue(uint256 tokenIdx, int256 collateralBalance) external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function deposit(\\n        address user,\\n        uint256 amount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function settlePnL(address user, int256 amount) external;\\n\\n    function withdraw(\\n        address user,\\n        uint256 amount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function withdrawAll(address user, IERC20Metadata withdrawToken) external;\\n\\n    function settleLiquidationOnCollaterals(address liquidator, address liquidatee) external;\\n\\n    function transferUa(address user, uint256 amount) external;\\n\\n    /* ****************** */\\n    /*     Governance     */\\n    /* ****************** */\\n\\n    function setClearingHouse(IClearingHouse newClearingHouse) external;\\n\\n    function setInsurance(IInsurance newInsurance) external;\\n\\n    function setOracle(IOracle newOracle) external;\\n\\n    function addWhiteListedCollateral(\\n        IERC20Metadata asset,\\n        uint256 weight,\\n        uint256 maxAmount\\n    ) external;\\n\\n    function changeCollateralWeight(IERC20Metadata asset, uint256 newWeight) external;\\n\\n    function changeCollateralMaxAmount(IERC20Metadata asset, uint256 newMaxAmount) external;\\n}\\n\",\"keccak256\":\"0xb4db72b0434b42029ba2791044df5ebc38cef05a596d2002951f04169639cd62\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVirtualToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IVirtualToken is IERC20Metadata {\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0dda9dc3d416b9aaeb6e93915b33c2b358b4ee5b9e477fa3b7ff9be8198e95ec\",\"license\":\"AGPL-3.0\"},\"contracts/lib/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// libraries\\nimport {PRBMathUD60x18} from \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\nimport {PRBMathSD59x18} from \\\"prb-math/contracts/PRBMathSD59x18.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\n\\n/*\\n * To be used if `b` decimals make `b` larger than what it would be otherwise.\\n * Especially useful for fixed point numbers, i.e. a way to represent decimal\\n * values without using decimals. E.g. 25e2 with 3 decimals represents 2.5%\\n *\\n * In our case, we get exchange rates with a 18 decimal precision\\n * (Solidity doesn't support decimal values natively).\\n * So if we have a EUR positions and want to get the equivalent USD amount\\n * we have to do: EUR_position * EUR_USD / 1e18 else the value would be way too high.\\n * To move from USD to EUR: (USD_position * 1e18) / EUR_USD else the value would\\n * be way too low.\\n *\\n * In essence,\\n * wadMul: a.mul(b).div(WAY)\\n * wadDiv: a.mul(WAY).div(b)\\n * where `WAY` represents the number of decimals\\n */\\nlibrary LibMath {\\n    // safe casting\\n    function toInt256(uint256 x) internal pure returns (int256) {\\n        return SafeCast.toInt256(x);\\n    }\\n\\n    function toUint256(int256 x) internal pure returns (uint256) {\\n        return SafeCast.toUint256(x);\\n    }\\n\\n    // absolute value\\n    function abs(int256 x) internal pure returns (int256) {\\n        return PRBMathSD59x18.abs(x);\\n    }\\n\\n    // min value\\n    function min(int256 x, int256 y) internal pure returns (int256) {\\n        return SignedMath.min(x, y);\\n    }\\n\\n    // int256: wad division / multiplication\\n    function wadDiv(int256 x, int256 y) internal pure returns (int256) {\\n        return PRBMathSD59x18.div(x, y);\\n    }\\n\\n    function wadMul(int256 x, int256 y) internal pure returns (int256) {\\n        return PRBMathSD59x18.mul(x, y);\\n    }\\n\\n    // uint256: wad division / multiplication\\n    function wadMul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return PRBMathUD60x18.mul(x, y);\\n    }\\n\\n    function wadDiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return PRBMathUD60x18.div(x, y);\\n    }\\n}\\n\",\"keccak256\":\"0xb1d13b2474f7f79f6338b60b919bde399e3b9d2153aab813a575f9c265057c97\",\"license\":\"AGPL-3.0\"},\"contracts/lib/LibPerpetual.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// libraries\\nimport {LibMath} from \\\"./LibMath.sol\\\";\\n\\nlibrary LibPerpetual {\\n    using LibMath for int256;\\n    using LibMath for uint256;\\n\\n    enum Side {\\n        // long position\\n        Long,\\n        // short position\\n        Short\\n    }\\n\\n    struct LiquidityProviderPosition {\\n        // quote assets or liabilities\\n        int256 openNotional;\\n        // base assets or liabilities\\n        int256 positionSize;\\n        // user cumulative funding rate (updated when open/close position)\\n        int256 cumFundingRate;\\n        // lp token owned (is zero for traders)\\n        uint256 liquidityBalance;\\n\\n        // last time when liquidity was provided\\n        uint256 depositTime;\\n\\n\\n        // total percentage return of liquidity providers index\\n        uint256 totalTradingFeesGrowth;\\n        // total base fees paid in cryptoswap pool\\n        uint256 totalBaseFeesGrowth;\\n        // total quote fees paid in cryptoswap pool\\n        uint256 totalQuoteFeesGrowth;\\n    }\\n\\n    struct TraderPosition {\\n        // quote assets or liabilities\\n        int256 openNotional;\\n        // base assets or liabilities\\n        int256 positionSize;\\n        // user cumulative funding rate (updated when open/close position)\\n        int256 cumFundingRate;\\n    }\\n\\n    struct GlobalPosition {\\n        /* twap state */\\n\\n        // timestamp of last trade\\n        uint128 timeOfLastTrade;\\n        // timestamp of last TWAP update\\n        uint128 timeOfLastTwapUpdate;\\n        // global cumulative funding rate (updated every trade)\\n        int256 cumFundingRate;\\n        // current trade amount in the block\\n        uint256 currentBlockTradeAmount;\\n        /* fees state */\\n\\n        // total percentage return of liquidity providers index\\n        uint256 totalTradingFeesGrowth;\\n        // total liquidity provided (in vQuote)\\n        uint256 totalLiquidityProvided;\\n        // total base fees paid in cryptoswap pool\\n        uint256 totalBaseFeesGrowth;\\n        // total quote fees paid in cryptoswap pool\\n        uint256 totalQuoteFeesGrowth;\\n    }\\n}\\n\",\"keccak256\":\"0xb9c99a4897cd5a6d674d882ccfe63f58adeb1812ed023dda696097d4a5334ee0\",\"license\":\"AGPL-3.0\"},\"contracts/lib/LibReserve.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// libraries\\nimport {LibMath} from \\\"./LibMath.sol\\\";\\n\\nlibrary LibReserve {\\n    using LibMath for uint256;\\n\\n    uint8 internal constant PROTOCOL_DECIMALS = 18;\\n\\n    /// @notice Convert amount from 'tokenDecimals' to 18 decimals precision\\n    /// @param tokenDecimals Decimals of the token. 8 decimals uint like in the ERC20 standard\\n    /// @param tokenAmount Amount with tokenDecimals precision\\n    /// @return wadAmount Scaled amount to the proper number of decimals\\n    function tokenToWad(uint8 tokenDecimals, uint256 tokenAmount) internal pure returns (uint256) {\\n        if (tokenDecimals == PROTOCOL_DECIMALS) {\\n            return tokenAmount;\\n        } else if (tokenDecimals < PROTOCOL_DECIMALS) {\\n            return tokenAmount * (10**(PROTOCOL_DECIMALS - tokenDecimals));\\n        }\\n\\n        return tokenAmount / (10**(tokenDecimals - PROTOCOL_DECIMALS));\\n    }\\n\\n    /// @notice Convert amount from 'tokenDecimals' decimals to 18 decimals precision\\n    /// @param tokenDecimals Decimals of the token. 8 decimals uint like in the ERC20 standard\\n    /// @param wadAmount Amount with 18 decimals precision\\n    /// @return amount Amount scaled back to the initial amount of decimals\\n    function wadToToken(uint8 tokenDecimals, uint256 wadAmount) internal pure returns (uint256) {\\n        if (tokenDecimals == PROTOCOL_DECIMALS) {\\n            return wadAmount;\\n        } else if (tokenDecimals < PROTOCOL_DECIMALS) {\\n            return wadAmount / (10**(PROTOCOL_DECIMALS - tokenDecimals));\\n        }\\n\\n        return wadAmount * 10**(tokenDecimals - PROTOCOL_DECIMALS);\\n    }\\n}\\n\",\"keccak256\":\"0x6e16256d8f91afe75a106dfe46c1d0f192e31556466b092ba5a73b2a5c47a306\",\"license\":\"AGPL-3.0\"},\"contracts/utils/IncreAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n// interfaces\\nimport {IIncreAccessControl} from \\\"../interfaces/IIncreAccessControl.sol\\\";\\n\\n/// @notice Increment access control contract.\\ncontract IncreAccessControl is AccessControl {\\n    bytes32 public constant GOVERNANCE = keccak256(\\\"GOVERNANCE\\\");\\n    bytes32 public constant MANAGER = keccak256(\\\"MANAGER\\\");\\n\\n    constructor() {\\n        _setupRole(GOVERNANCE, msg.sender);\\n        _setRoleAdmin(GOVERNANCE, GOVERNANCE);\\n\\n        _setupRole(MANAGER, msg.sender);\\n        _setRoleAdmin(MANAGER, GOVERNANCE);\\n    }\\n\\n    // utils\\n    function isGovernor(address account) external view returns (bool) {\\n        return hasRole(GOVERNANCE, account);\\n    }\\n\\n    function isManager(address account) external view returns (bool) {\\n        return hasRole(MANAGER, account);\\n    }\\n}\\n\",\"keccak256\":\"0x5e53b6d6dd249e521fef214100871de5529c733ef9a258d3ce2b701f3b066cf7\",\"license\":\"AGPL-3.0\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathSD59x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\n\\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_WHOLE_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\n\\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_WHOLE_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Calculate the absolute value of x.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than MIN_SD59x18.\\n    ///\\n    /// @param x The number to calculate the absolute value for.\\n    /// @param result The absolute value of x.\\n    function abs(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x == MIN_SD59x18) {\\n                revert PRBMathSD59x18__AbsInputTooSmall();\\n            }\\n            result = x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            int256 sum = (x >> 1) + (y >> 1);\\n            if (sum < 0) {\\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\\n                // right rounds down to infinity.\\n                assembly {\\n                    result := add(sum, and(or(x, y), 1))\\n                }\\n            } else {\\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\\n                // remainder gets truncated twice.\\n                result = sum + (x & y & 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function ceil(int256 x) internal pure returns (int256 result) {\\n        if (x > MAX_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__CeilOverflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x > 0) {\\n                    result += SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    /// - None of the inputs can be MIN_SD59x18.\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within int256.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    ///\\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__DivInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x and y.\\n        uint256 ax;\\n        uint256 ay;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n        }\\n\\n        // Compute the absolute value of (x*SCALE)\\u00f7y. The result must fit within int256.\\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__DivOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x and y.\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n\\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\\n        // should be positive. Otherwise, it should be negative.\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (int256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\".\\n    /// - For any x less than -41.446531673892822322, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59.794705707972522261.\\n        if (x < -41_446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathSD59x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59.794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^(-x) = 1/2^x.\\n        if (x < 0) {\\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n            if (x < -59_794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked {\\n                result = 1e36 / exp2(-x);\\n            }\\n        } else {\\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n            if (x >= 192e18) {\\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\\n            }\\n\\n            unchecked {\\n                // Convert x to the 192.64-bit fixed-point format.\\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\\n                result = int256(PRBMath.exp2(x192x64));\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function floor(int256 x) internal pure returns (int256 result) {\\n        if (x < MIN_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__FloorUnderflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x < 0) {\\n                    result -= SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\\n    /// of the radix point for negative numbers.\\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\\n    function frac(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x % SCALE;\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\\n    function fromInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < MIN_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntUnderflow(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\\n    /// - x * y cannot be negative.\\n    ///\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            int256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathSD59x18__GmOverflow(x, y);\\n            }\\n\\n            // The product cannot be negative.\\n            if (xy < 0) {\\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = int256(PRBMath.sqrt(uint256(xy)));\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\\n    function inv(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\\n    function ln(int256 x) internal pure returns (int256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 195205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\\n    function log10(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            default {\\n                result := MAX_SD59x18\\n            }\\n        }\\n\\n        if (result == MAX_SD59x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n                assembly {\\n                    x := div(1000000000000000000000000000000000000, x)\\n                }\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\\n\\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n            result = int256(n) * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            int256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result * sign;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result *= sign;\\n        }\\n    }\\n\\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\\n    /// fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers and employs constant folding, i.e. the denominator is\\n    /// always 1e18.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - None of the inputs can be MIN_SD59x18\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    ///\\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__MulInputTooSmall();\\n        }\\n\\n        unchecked {\\n            uint256 ax;\\n            uint256 ay;\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n\\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\\n            if (rAbs > uint256(MAX_SD59x18)) {\\n                revert PRBMathSD59x18__MulOverflow(rAbs);\\n            }\\n\\n            uint256 sx;\\n            uint256 sy;\\n            assembly {\\n                sx := sgt(x, sub(0, 1))\\n                sy := sgt(y, sub(0, 1))\\n            }\\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n        }\\n    }\\n\\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\\n    function pi() internal pure returns (int256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - z cannot be zero.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : int256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"abs\\\" and \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\\n        uint256 xAbs = uint256(abs(x));\\n\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        uint256 yAux = y;\\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (yAux & 1 > 0) {\\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\\n            }\\n        }\\n\\n        // The result must fit within the 59.18-decimal fixed-point representation.\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\\n        }\\n\\n        // Is the base negative and the exponent an odd number?\\n        bool isNegative = x < 0 && y & 1 == 1;\\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\\n    function scale() internal pure returns (int256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x cannot be negative.\\n    /// - x must be less than MAX_SD59x18 / SCALE.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as a signed 59.18-decimal fixed-point .\\n    function sqrt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < 0) {\\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\\n        }\\n    }\\n\\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1886d687eace717c05b7dcc20e43a088df0e549df86b453c2222961b520308f0\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620051e4380380620051e4833981016040819052620000349162000a68565b6200004f600080516020620051c483398151915233620001b1565b6200006a600080516020620051c483398151915280620001c1565b62000085600080516020620051a483398151915233620001b1565b620000af600080516020620051a4833981519152600080516020620051c4833981519152620001c1565b6001805460ff191681556002556001600160a01b038316620000e45760405163059d8acb60e01b815260040160405180910390fd5b6001600160a01b0382166200010c5760405163059d8acb60e01b815260040160405180910390fd5b600c80546001600160a01b038086166001600160a01b031992831617909255600d805492851692909116919091179055604080516101208101825282518152602080840151908201528282015191810191909152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e080830151908201526101008281015190820152620001a8906200020c565b50505062000d09565b620001bd828262000360565b5050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b600080516020620051c4833981519152620002278162000400565b602082015162000237906200040f565b8151620002449062000461565b60408201516200025490620004dc565b606082015162000264906200050d565b6080820151620002749062000573565b60a08201516200028490620005cc565b60c08201516200029490620005fb565b60e0820151620002a4906200064d565b610100820151620002b5906200069e565b7f46fdb7eba5bc556294a8e95d7c0fce002a6272aa7229e1fc1c9dec41b17b2460826000015183602001518460400151856060015186608001518760a001518860c001518960e001518a61010001516040516200035499989796959493929190988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200190565b60405180910390a15050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620001bd576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003bc3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6200040c8133620006ce565b50565b6003548113620004325760405163278ec69160e11b815260040160405180910390fd5b6706f05b59d3b200008113156200045c57604051632294dbdf60e21b815260040160405180910390fd5b600455565b6658d15e176280008112156200048a576040516380f0583d60e01b815260040160405180910390fd5b670429d069189e0000811315620004b457604051632bea3b4760e11b815260040160405180910390fd5b8060045413620004d7576040516380f0583d60e01b815260040160405180910390fd5b600355565b69021e19e0c9bab24000008111156200050857604051636ec81ebd60e01b815260040160405180910390fd5b600555565b662386f26fc10000811015620005365760405163876d264d60e01b815260040160405180910390fd5b6200054e6003546200077260201b620021871760201c565b81106200056e5760405163caaa4f4d60e01b815260040160405180910390fd5b600655565b67016345785d8a00008110156200059d57604051637cf84fa760e01b815260040160405180910390fd5b6706f05b59d3b20000811115620005c75760405163395357bf60e11b815260040160405180910390fd5b600755565b670de0b6b3a7640000811115620005f65760405163720daaa360e01b815260040160405180910390fd5b600855565b62000611816200079060201b620021921760201c565b600a5462000628906702c68af0bb14000062000c0c565b13156200064857604051630a8caa0f60e11b815260040160405180910390fd5b600955565b620006656009546200079060201b620021921760201c565b62000679826702c68af0bb14000062000c0c565b13156200069957604051630a8caa0f60e11b815260040160405180910390fd5b600a55565b68056bc75e2d63100000811215620006c95760405163b518654d60e01b815260040160405180910390fd5b600b55565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620001bd5762000718816001600160a01b03166014620007a860201b6200219d1760201c565b6200072e8360206200219d620007a8821b17811c565b6040516020016200074192919062000b26565b60408051601f198184030181529082905262461bcd60e51b8252620007699160040162000b9f565b60405180910390fd5b60006200078a82620009a460201b620023861760201c565b92915050565b60006200078a82620009fc60201b620023dc1760201c565b60606000620007b983600262000c6e565b620007c690600262000c53565b6001600160401b03811115620007ec57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801562000817576020820181803683370190505b509050600360fc1b816000815181106200084157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200087f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000620008a584600262000c6e565b620008b290600162000c53565b90505b60018111156200094c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620008f657634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106200091b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93620009448162000cc3565b9050620008b5565b5083156200099d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000769565b9392505050565b600080821215620009f85760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015260640162000769565b5090565b60006001600160ff1b03821115620009f85760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b606482015260840162000769565b600080600083850361016081121562000a7f578384fd5b845162000a8c8162000cf3565b602086015190945062000a9f8162000cf3565b9250610120603f19820181131562000ab5578283fd5b62000abf62000bd4565b915060408601518252606086015160208301526080860151604083015260a0860151606083015260c0860151608083015260e086015160a08301526101008087015160c08401528187015160e0840152610140870151818401525050809150509250925092565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162000b6081601785016020880162000c90565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162000b9381602884016020880162000c90565b01602801949350505050565b602081526000825180602084015262000bc081604085016020870162000c90565b601f01601f19169190910160400192915050565b60405161012081016001600160401b038111828210171562000c0657634e487b7160e01b600052604160045260246000fd5b60405290565b600080821280156001600160ff1b038490038513161562000c315762000c3162000cdd565b600160ff1b839003841281161562000c4d5762000c4d62000cdd565b50500190565b6000821982111562000c695762000c6962000cdd565b500190565b600081600019048311821515161562000c8b5762000c8b62000cdd565b500290565b60005b8381101562000cad57818101518382015260200162000c93565b8381111562000cbd576000848401525b50505050565b60008162000cd55762000cd562000cdd565b506000190190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146200040c57600080fd5b61448b8062000d196000396000f3fe608060405234801561001057600080fd5b50600436106102945760003560e01c80637ef8a2d311610167578063b339b368116100ce578063f3fa326d11610087578063f3fa326d1461057b578063f48cba7c1461058e578063f609ce1b14610597578063fa09e630146105a0578063fbfa77cf146105b3578063fe45fe17146105c657600080fd5b8063b339b36814610513578063d547741f1461051c578063e43581b81461052f578063ee99205c14610542578063f0dc2c2014610555578063f3ae24151461056857600080fd5b80639039c639116101205780639039c639146104b657806391d14854146104c9578063a1ac05e1146104dc578063a217fddf146104ef578063a9753e65146104f7578063adf1ab9b1461050057600080fd5b80637ef8a2d3146104635780638053fcbe1461047657806381be72ab1461047f5780638456cb591461049257806384f6721b1461049a57806389cf3204146104a357600080fd5b80632f2ff15d1161020b57806359a1ecaa116101c457806359a1ecaa146103eb57806359f77e2d146104165780635c975abb146104295780636e553f65146104345780637a26414a146104475780637d5d95351461045a57600080fd5b80632f2ff15d1461039857806336568abe146103ab57806339c294be146103be5780633f4ba83a146103c75780634cd74c8f146103cf578063570ca7f2146103e257600080fd5b80631aa053451161025d5780631aa053451461031f5780631b2df850146103325780631d48cd96146103475780632046cc2e1461035a578063248a9ca31461036d578063295c39a51461039057600080fd5b8062f714ce1461029957806301ffc9a7146102ae5780630c94154f146102d657806314627834146102e957806318994a871461030c575b600080fd5b6102ac6102a7366004613bab565b6105d9565b005b6102c16102bc366004613bda565b6106ae565b60405190151581526020015b60405180910390f35b6102ac6102e4366004613ca3565b6106e5565b6102fe60008051602061443683398151915281565b6040519081526020016102cd565b6102fe61031a366004613b4c565b61081b565b6102ac61032d366004613f35565b61086f565b6102fe60008051602061441683398151915281565b6102ac610355366004613b30565b610985565b6102ac610368366004613ec2565b610ac9565b6102fe61037b366004613b93565b60009081526020819052604090206001015490565b600f546102fe565b6102ac6103a6366004613bab565b610c7b565b6102ac6103b9366004613bab565b610ca5565b6102fe60035481565b6102ac610d23565b6102fe6103dd366004613b4c565b610d46565b6102fe60045481565b6103fe6103f9366004613b93565b610d66565b6040516001600160a01b0390911681526020016102cd565b6102ac610424366004613e3e565b610d90565b60015460ff166102c1565b6102ac610442366004613bab565b610dd4565b6102ac610455366004613d84565b610e0c565b6102fe60075481565b6102fe610471366004613b30565b6111a9565b6102fe60095481565b6102ac61048d366004613ef7565b61133c565b6102ac611381565b6102fe600a5481565b600d546103fe906001600160a01b031681565b6102ac6104c4366004613dc2565b6113a1565b6102c16104d7366004613bab565b6113e4565b6102ac6104ea366004613df7565b61140d565b6102fe600081565b6102fe60055481565b6102fe61050e366004613b30565b6116ef565b6102fe60065481565b6102ac61052a366004613bab565b6117c2565b6102c161053d366004613b30565b6117e7565b600e546103fe906001600160a01b031681565b6102ac610563366004613b30565b611801565b6102c1610576366004613b30565b61188e565b6102ac610589366004613e97565b6118a8565b6102fe60085481565b6102fe600b5481565b6102ac6105ae366004613b30565b611cc9565b600c546103fe906001600160a01b031681565b6102ac6105d4366004613b30565b611d8d565b6002805414156106045760405162461bcd60e51b81526004016105fb906141a0565b60405180910390fd5b60028055610610612446565b600c54604051631a4ca37b60e21b8152336004820152602481018490526001600160a01b038381166044830152909116906369328dec90606401600060405180830381600087803b15801561066457600080fd5b505af1158015610678573d6000803e3d6000fd5b505050506106883360045461248e565b6106a55760405163b28c857b60e01b815260040160405180910390fd5b50506001600255565b60006001600160e01b03198216637965db0b60e01b14806106df57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000805160206144368339815191526106fd816124a4565b61070a82602001516124ae565b8151610715906124fe565b6107228260400151612576565b61072f82606001516125a6565b61073c82608001516125fd565b6107498260a00151612654565b6107568260c00151612682565b6107638260e001516126c4565b610771826101000151612705565b7f46fdb7eba5bc556294a8e95d7c0fce002a6272aa7229e1fc1c9dec41b17b2460826000015183602001518460400151856060015186608001518760a001518860c001518960e001518a610100015160405161080f99989796959493929190988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200190565b60405180910390a15050565b600080610827846116ef565b90506000610836856001612734565b905060006108448686610d46565b90508061085b610854858561420f565b84906127bb565b610865919061430a565b9695505050505050565b6002805414156108915760405162461bcd60e51b81526004016105fb906141a0565b6002805561089d612446565b6108a9868686846127c7565b600f86815481106108ca57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051635216b30160e11b81523360048201526001600160a01b039091169063a42d66029060240160206040518083038186803b15801561091657600080fd5b505afa15801561092a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094e9190613b77565b1561096c5760405163022cdbe760e61b815260040160405180910390fd5b610978868484846127c7565b5050600160025550505050565b60008051602061443683398151915261099d816124a4565b6001600160a01b0382166109c45760405163059d8acb60e01b815260040160405180910390fd5b60005b600f54811015610a4257826001600160a01b0316600f82815481106109fc57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415610a305760405163039684cd60e01b815260040160405180910390fd5b80610a3a816143a7565b9150506109c7565b50600f805460018101825560008290527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b03851690811790915590546040519081527fa64754291535175942be6f35fba8deab36d97ea608b17d06cc5efb985e17215f9060200160405180910390a25050565b600280541415610aeb5760405162461bcd60e51b81526004016105fb906141a0565b60028055610af7612446565b6000610b038533612aeb565b6020015190506000808213610b19576000610b1c565b60015b9050610b2a868686846127c7565b600f8681548110610b4b57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051635216b30160e11b81523360048201526001600160a01b039091169063a42d66029060240160206040518083038186803b158015610b9757600080fd5b505afa158015610bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcf9190613b77565b15610bed5760405163022cdbe760e61b815260040160405180910390fd5b600c546040516301395c5960e31b81523360048201526001600160a01b038581166024830152909116906309cae2c890604401600060405180830381600087803b158015610c3a57600080fd5b505af1158015610c4e573d6000803e3d6000fd5b50505050610c5e3360045461248e565b6109785760405163b28c857b60e01b815260040160405180910390fd5b600082815260208190526040902060010154610c96816124a4565b610ca08383612bb6565b505050565b6001600160a01b0381163314610d155760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105fb565b610d1f8282612c3a565b5050565b600080516020614416833981519152610d3b816124a4565b610d43612c9f565b50565b600080610d52846111a9565b9050610d5e8184612cf1565b949350505050565b600f8181548110610d7657600080fd5b6000918252602090912001546001600160a01b0316905081565b600280541415610db25760405162461bcd60e51b81526004016105fb906141a0565b60028055610dbe612446565b610dc88585612cfd565b610978868483856127c7565b600280541415610df65760405162461bcd60e51b81526004016105fb906141a0565b60028055610e02612446565b6106a58282612cfd565b600280541415610e2e5760405162461bcd60e51b81526004016105fb906141a0565b60028055610e3a612446565b3360008215610e7b57610e56610e508787612aeb565b51612d6e565b905080610e7657604051632977d16360e11b815260040160405180910390fd5b610f54565b600f8681548110610e9c57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051639d36b75960e01b81526001600160a01b03878116600483015290911690639d36b7599060240160206040518083038186803b158015610eea57600080fd5b505afa158015610efe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f229190613b77565b610f3f57604051632977d16360e11b815260040160405180910390fd5b610f51610f4c8787612d79565b612d6e565b90505b610f5d85612dd7565b610f698560035461248e565b15610f875760405163389fcd8960e11b815260040160405180910390fd5b600083610f9e57610f99878787612f9f565b610fa9565b610fa9878787613083565b90506000610fc2600654610fbc85612187565b90613230565b90506000610fdb6008548361323090919063ffffffff16565b90506000610fe98284614349565b600c549091506001600160a01b03166362990d2f8a61100786612192565b611011908861430a565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561105757600080fd5b505af115801561106b573d6000803e3d6000fd5b5050600c546001600160a01b031691506362990d2f90508761108c84612192565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156110d257600080fd5b505af11580156110e6573d6000803e3d6000fd5b5050600d546040516352ac183b60e01b8152600481018690526001600160a01b0390911692506352ac183b9150602401600060405180830381600087803b15801561113057600080fd5b505af1158015611144573d6000803e3d6000fd5b50505050856001600160a01b0316896001600160a01b03168b7f19a800bd1189221901c32c4ced18afe41c45969c0b5e97b8ebf4124e169339cc61118789612187565b60405190815260200160405180910390a4505060016002555050505050505050565b6000805b600f54811015611336576000600f82815481106111da57634e487b7160e01b600052603260045260246000fd5b600091825260209182902001546040805163632b6b1160e01b815290516001600160a01b039092169263632b6b1192600480840193829003018186803b15801561122357600080fd5b505afa158015611237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125b9190613c1e565b905061131661126982612192565b600f848154811061128a57634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460405163e65896c960e01b81526001600160a01b0388811660048301529091169063e65896c99060240160206040518083038186803b1580156112d857600080fd5b505afa1580156112ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113109190613c1e565b90612cf1565b611320908461420f565b925050808061132e906143a7565b9150506111ad565b50919050565b60028054141561135e5760405162461bcd60e51b81526004016105fb906141a0565b6002805561136a612446565b611376848484846127c7565b505060016002555050565b600080516020614416833981519152611399816124a4565b610d4361323c565b6002805414156113c35760405162461bcd60e51b81526004016105fb906141a0565b600280556113cf612446565b6113da838383613277565b5050600160025550565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60028054141561142f5760405162461bcd60e51b81526004016105fb906141a0565b6002805561143b612446565b61144433612dd7565b6000806000600f888154811061146a57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516323e8659f60e21b81526001600160a01b0390911691638fa1967c916114aa9133918c918c918c918c91600401614060565b606060405180830381600087803b1580156114c457600080fd5b505af11580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc9190613c76565b92509250925060006115b2600f8a8154811061152857634e487b7160e01b600052603260045260246000fd5b60009182526020918290200154604080516397c4fac760e01b815290516001600160a01b03909216926397c4fac792600480840193829003018186803b15801561157157600080fd5b505afa158015611585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a99190613c1e565b61131084612d6e565b600d549091506001600160a01b03166352ac183b6115cf83612187565b6040518263ffffffff1660e01b81526004016115ed91815260200190565b600060405180830381600087803b15801561160757600080fd5b505af115801561161b573d6000803e3d6000fd5b5050600c546001600160a01b031691506362990d2f90503361163d848861420f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561168357600080fd5b505af1158015611697573d6000803e3d6000fd5b505050506116a78933600061353f565b5060405183815233908a907f7cd78db3fa0f169740484c879803073b63a35c4c5d82f02312e7aa988eee85549060200160405180910390a35050600160025550505050505050565b6000805b600f5481101561133657600f818154811061171e57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051637439aabd60e11b81526001600160a01b0385811660048301529091169063e873557a9060240160206040518083038186803b15801561176c57600080fd5b505afa158015611780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a49190613c1e565b6117ae908361420f565b9150806117ba816143a7565b9150506116f3565b6000828152602081905260409020600101546117dd816124a4565b610ca08383612c3a565b60006106df600080516020614436833981519152836113e4565b600080516020614436833981519152611819816124a4565b6001600160a01b0382166118405760405163059d8acb60e01b815260040160405180910390fd5b600e80546001600160a01b0319166001600160a01b0384169081179091556040519081527f37f339b442273d59b9ccb58c1ed2c06e695bd9b0a68db21495afb7fc86de692c9060200161080f565b60006106df600080516020614416833981519152836113e4565b6000805160206144168339815191526118c0816124a4565b6002805414156118e25760405162461bcd60e51b81526004016105fb906141a0565b600280819055506000600f858154811061190c57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516394b661e960e01b81526001600160a01b03909116916394b661e99161194c91309189918991600191906004016140fe565b608060405180830381600087803b15801561196657600080fd5b505af115801561197a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199e9190613c36565b50600c546040516362990d2f60e01b8152306004820152602481018390529194506001600160a01b031692506362990d2f9150604401600060405180830381600087803b1580156119ee57600080fd5b505af1158015611a02573d6000803e3d6000fd5b5050600c546040805163c52e8c4160e01b815290516001600160a01b0390921693506309cae2c892503091849163c52e8c41916004808301926020929190829003018186803b158015611a5457600080fd5b505afa158015611a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8c9190613c02565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401600060405180830381600087803b158015611ad457600080fd5b505af1158015611ae8573d6000803e3d6000fd5b5050600d54600c546040805163c52e8c4160e01b81529051611c8395506001600160a01b039384169450919092169163c52e8c41916004808301926020929190829003018186803b158015611b3c57600080fd5b505afa158015611b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b749190613c02565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015611bb557600080fd5b505afa158015611bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bed9190613c1e565b600c60009054906101000a90046001600160a01b03166001600160a01b031663c52e8c416040518163ffffffff1660e01b815260040160206040518083038186803b158015611c3b57600080fd5b505afa158015611c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c739190613c02565b6001600160a01b03169190613599565b847f96d0284e042317c02550d6522426b8938bc365bc6c2fd42594b358ff2fbdd5e682604051611cb591815260200190565b60405180910390a250506001600255505050565b600280541415611ceb5760405162461bcd60e51b81526004016105fb906141a0565b60028055611cf7612446565b600c546040516301395c5960e31b81523360048201526001600160a01b038381166024830152909116906309cae2c890604401600060405180830381600087803b158015611d4457600080fd5b505af1158015611d58573d6000803e3d6000fd5b50505050611d683360045461248e565b611d855760405163b28c857b60e01b815260040160405180910390fd5b506001600255565b600280541415611daf5760405162461bcd60e51b81526004016105fb906141a0565b60028055611dbb612446565b3360005b600f54811015611f4d57600f8181548110611dea57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051635216b30160e11b81526001600160a01b0385811660048301529091169063a42d66029060240160206040518083038186803b158015611e3857600080fd5b505afa158015611e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e709190613b77565b80611f1d5750600f8181548110611e9757634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051639d36b75960e01b81526001600160a01b03858116600483015290911690639d36b7599060240160206040518083038186803b158015611ee557600080fd5b505afa158015611ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1d9190613b77565b15611f3b576040516302c2ecad60e51b815260040160405180910390fd5b80611f45816143a7565b915050611dbf565b50600c5460405162ac13a160e61b81526001600160a01b038481166004830152600060248301819052921690632b04e8409060440160206040518083038186803b158015611f9a57600080fd5b505afa158015611fae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd29190613c1e565b600c5460405163029122eb60e41b81526001600160a01b03868116600483015260016024830152929350600092909116906329122eb09060440160206040518083038186803b15801561202457600080fd5b505afa158015612038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205c9190613c1e565b9050600061206a838361430a565b90506000831261208d5760405163449e6f1360e11b815260040160405180910390fd5b600a5461209b908290612cf1565b6120a4846143c2565b13806120b95750600b546120b7846143c2565b135b1561216257600c5460405163161ad3b360e21b81526001600160a01b03868116600483015287811660248301529091169063586b4ecc90604401600060405180830381600087803b15801561210d57600080fd5b505af1158015612121573d6000803e3d6000fd5b50506040516001600160a01b038088169350881691507fe3bf82689d5393dcc1c3be2e48e2279199f8bf891f818b717e30a42622f3be0c90600090a361217b565b60405163f04aeccb60e01b815260040160405180910390fd5b50506001600255505050565b60006106df82612386565b60006106df826123dc565b606060006121ac8360026142eb565b6121b7906002614250565b67ffffffffffffffff8111156121dd57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612207576020820181803683370190505b509050600360fc1b8160008151811061223057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061226d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006122918460026142eb565b61229c906001614250565b90505b6001811115612330576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106122de57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061230257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361232981614390565b905061229f565b50831561237f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105fb565b9392505050565b6000808212156123d85760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016105fb565b5090565b60006001600160ff1b038211156123d85760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016105fb565b60015460ff161561248c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105fb565b565b60008061249b848461081b565b12159392505050565b610d4381336135eb565b60035481136124d05760405163278ec69160e11b815260040160405180910390fd5b6706f05b59d3b200008113156124f957604051632294dbdf60e21b815260040160405180910390fd5b600455565b6658d15e17628000811215612526576040516380f0583d60e01b815260040160405180910390fd5b670429d069189e000081131561254f57604051632bea3b4760e11b815260040160405180910390fd5b8060045413612571576040516380f0583d60e01b815260040160405180910390fd5b600355565b69021e19e0c9bab24000008111156125a157604051636ec81ebd60e01b815260040160405180910390fd5b600555565b662386f26fc100008110156125ce5760405163876d264d60e01b815260040160405180910390fd5b6125d9600354612187565b81106125f85760405163caaa4f4d60e01b815260040160405180910390fd5b600655565b67016345785d8a000081101561262657604051637cf84fa760e01b815260040160405180910390fd5b6706f05b59d3b2000081111561264f5760405163395357bf60e11b815260040160405180910390fd5b600755565b670de0b6b3a764000081111561267d5760405163720daaa360e01b815260040160405180910390fd5b600855565b61268b81612192565b600a546126a0906702c68af0bb14000061420f565b13156126bf57604051630a8caa0f60e11b815260040160405180910390fd5b600955565b6126cf600954612192565b6126e1826702c68af0bb14000061420f565b131561270057604051630a8caa0f60e11b815260040160405180910390fd5b600a55565b68056bc75e2d6310000081121561272f5760405163b518654d60e01b815260040160405180910390fd5b600b55565b600c5460405163029122eb60e41b81526001600160a01b038481166004830152831515602483015260009216906329122eb0906044015b60206040518083038186803b15801561278357600080fd5b505afa158015612797573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237f9190613c1e565b600061237f838361364f565b826127e5576040516321d7db4360e01b815260040160405180910390fd5b6127ee33612dd7565b600080600080600f888154811061281557634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516394b661e960e01b81526001600160a01b03909116916394b661e9916128549133918c918c918c91906004016140fe565b608060405180830381600087803b15801561286e57600080fd5b505af1158015612882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a69190613c36565b9350935093509350600081156129d257612964600f8a815481106128da57634e487b7160e01b600052603260045260246000fd5b60009182526020918290200154604080516397c4fac760e01b815290516001600160a01b03909216926397c4fac792600480840193829003018186803b15801561292357600080fd5b505afa158015612937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295b9190613c1e565b61131087612d6e565b600d549091506001600160a01b03166352ac183b61298183612187565b6040518263ffffffff1660e01b815260040161299f91815260200190565b600060405180830381600087803b1580156129b957600080fd5b505af11580156129cd573d6000803e3d6000fd5b505050505b60006129de828561430a565b600c546040516362990d2f60e01b8152336004820152602481018390529192506001600160a01b0316906362990d2f90604401600060405180830381600087803b158015612a2b57600080fd5b505af1158015612a3f573d6000803e3d6000fd5b50505050612a4f3360045461248e565b612a6c5760405163afd1ab8560e01b815260040160405180910390fd5b612a788a33600161353f565b612a955760405163282c809760e01b815260040160405180910390fd5b336001600160a01b03168a7f091f919d14dc90f5cbb30eade032cfd3afd9fd470a0ec42392db347fc3cacca48989898689604051612ad795949392919061413b565b60405180910390a350505050505050505050565b612b0f60405180606001604052806000815260200160008152602001600081525090565b600f8381548110612b3057634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051630f272c5b60e31b81526001600160a01b0384811660048301529091169063793962d89060240160606040518083038186803b158015612b7e57600080fd5b505afa158015612b92573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237f9190613d1d565b612bc082826113e4565b610d1f576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055612bf63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612c4482826113e4565b15610d1f576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b612ca7613665565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600061237f83836136ae565b600c54604051633d14d1b760e21b8152336004820152602481018490526001600160a01b0383811660448301529091169063f45346dc906064015b600060405180830381600087803b158015612d5257600080fd5b505af1158015612d66573d6000803e3d6000fd5b505050505050565b60006106df82613773565b6000600f8381548110612d9c57634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460405163151d7fad60e01b81526001600160a01b0384811660048301529091169063151d7fad9060240161276b565b6000805b600f54811015612f5f57600f8181548110612e0657634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051633876d05560e01b81526001600160a01b03858116600483015290911690633876d05590602401602060405180830381600087803b158015612e5657600080fd5b505af1158015612e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8e9190613c1e565b600f8281548110612eaf57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051631a4e577d60e21b81526001600160a01b038681166004830152909116906369395df490602401602060405180830381600087803b158015612eff57600080fd5b505af1158015612f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f379190613c1e565b612f41919061420f565b612f4b908361420f565b915080612f57816143a7565b915050612ddb565b508015610d1f57600c546040516362990d2f60e01b81526001600160a01b03848116600483015260248201849052909116906362990d2f90604401612d38565b600080600f8581548110612fc357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316638fa1967c85612fe888826137af565b60408051808201825260008082526020820181905291516001600160e01b031960e087901b1681526130239493928a9160019060040161409d565b606060405180830381600087803b15801561303d57600080fd5b505af1158015613051573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130759190613c76565b50509050610d5e858561380d565b60008060006130928686612aeb565b6020015112156130a35760006130a6565b60015b90506000600f86815481106130cb57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516394b661e960e01b81526001600160a01b03909116916394b661e99161310b91899189919088906001906004016140fe565b608060405180830381600087803b15801561312557600080fd5b505af1158015613139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315d9190613c36565b5092505050600f868154811061318357634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051635216b30160e11b81526001600160a01b0387811660048301529091169063a42d66029060240160206040518083038186803b1580156131d157600080fd5b505afa1580156131e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132099190613b77565b156132275760405163120dbeb360e01b815260040160405180910390fd5b95945050505050565b600061237f8383613857565b613244612446565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833612cd4565b813515801561328857506020820135155b156132a6576040516338d22a8b60e11b815260040160405180910390fd5b6132af33612dd7565b60006132bd3360045461081b565b90506132ca816002614268565b613380600f86815481106132ee57634e487b7160e01b600052603260045260246000fd5b600091825260209182902001546040805163042eb3a360e21b815290516001600160a01b03909216926310bace8c92600480840193829003018186803b15801561333757600080fd5b505afa15801561334b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336f9190613c1e565b6113108660015b6020020135612192565b61338b856000613376565b613395919061420f565b13156133b457604051630cdb992360e01b815260040160405180910390fd5b6000600f85815481106133d757634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460405163021d27f760e51b81526001600160a01b03909116906343a4fee09061341490339088908890600401614038565b602060405180830381600087803b15801561342e57600080fd5b505af1158015613442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134669190613c1e565b905080156134d357600c546040516362990d2f60e01b8152336004820152602481018390526001600160a01b03909116906362990d2f90604401600060405180830381600087803b1580156134ba57600080fd5b505af11580156134ce573d6000803e3d6000fd5b505050505b6134dd853361380d565b6134e98533600061353f565b506134f63360045461248e565b50604080518535815260208087013590820152339187917f413fcc4add68f16703d76130cf98a76591f34707ceaa9abd83774f3776483a81910160405180910390a35050505050565b60008082613556576135518585612d79565b613562565b6135608585612aeb565b515b9050600061357761357283612d6e565b612187565b9050801561358d5760055481119250505061237f565b50600195945050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610ca0908490613863565b6135f582826113e4565b610d1f5761360d816001600160a01b0316601461219d565b61361883602061219d565b604051602001613629929190613fc3565b60408051601f198184030181529082905262461bcd60e51b82526105fb9160040161416d565b600081831261365e578161237f565b5090919050565b60015460ff1661248c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105fb565b6000600160ff1b8314806136c55750600160ff1b82145b156136e357604051630d01a11b60e21b815260040160405180910390fd5b600080600085126136f457846136f9565b846000035b915060008412613709578361370e565b836000035b9050600061371c8383613935565b90506001600160ff1b038111156137495760405163bf79e8d960e01b8152600481018290526024016105fb565b6000198087139086138082186001146137625782613767565b826000035b98975050505050505050565b6000600160ff1b82141561379a57604051631d0742e360e21b815260040160405180910390fd5b600082126137a857816106df565b5060000390565b6000600f83815481106137d257634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051637f338ecf60e01b81526001600160a01b03848116600483015290911690637f338ecf9060240161276b565b600e546001600160a01b031615610d1f57600e546040516322146e3360e01b8152600481018490526001600160a01b038381166024830152909116906322146e3390604401612d38565b600061237f8383613935565b60006138b8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166139f79092919063ffffffff16565b805190915015610ca057808060200190518101906138d69190613b77565b610ca05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105fb565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106139795760405163698d9a0160e11b8152600481018290526024016105fb565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826139b35780670de0b6b3a76400008504019450505050506106df565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6060610d5e8484600085856001600160a01b0385163b613a595760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105fb565b600080866001600160a01b03168587604051613a759190613fa7565b60006040518083038185875af1925050503d8060008114613ab2576040519150601f19603f3d011682016040523d82523d6000602084013e613ab7565b606091505b5091509150613ac7828286613ad2565b979650505050505050565b60608315613ae157508161237f565b825115613af15782518084602001fd5b8160405162461bcd60e51b81526004016105fb919061416d565b80604081018310156106df57600080fd5b803560028110613b2b57600080fd5b919050565b600060208284031215613b41578081fd5b813561237f816143f2565b60008060408385031215613b5e578081fd5b8235613b69816143f2565b946020939093013593505050565b600060208284031215613b88578081fd5b815161237f81614407565b600060208284031215613ba4578081fd5b5035919050565b60008060408385031215613bbd578182fd5b823591506020830135613bcf816143f2565b809150509250929050565b600060208284031215613beb578081fd5b81356001600160e01b03198116811461237f578182fd5b600060208284031215613c13578081fd5b815161237f816143f2565b600060208284031215613c2f578081fd5b5051919050565b60008060008060808587031215613c4b578182fd5b8451935060208501519250604085015191506060850151613c6b81614407565b939692955090935050565b600080600060608486031215613c8a578081fd5b8351925060208401519150604084015190509250925092565b60006101208284031215613cb5578081fd5b613cbd6141d7565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152508091505092915050565b600060608284031215613d2e578081fd5b6040516060810181811067ffffffffffffffff82111715613d5d57634e487b7160e01b83526041600452602483fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b60008060008060808587031215613d99578182fd5b843593506020850135613dab816143f2565b9250604085013591506060850135613c6b81614407565b600080600060808486031215613dd6578081fd5b83359250613de78560208601613b0b565b9150606084013590509250925092565b600080600080600060c08688031215613e0e578283fd5b8535945060208601359350613e268760408801613b0b565b949793965093946080810135945060a0013592915050565b60008060008060008060c08789031215613e56578384fd5b86359550602087013594506040870135613e6f816143f2565b935060608701359250613e8460808801613b1c565b915060a087013590509295509295509295565b600080600060608486031215613eab578081fd5b505081359360208301359350604090920135919050565b60008060008060808587031215613ed7578182fd5b8435935060208501359250604085013591506060850135613c6b816143f2565b60008060008060808587031215613f0c578182fd5b843593506020850135925060408501359150613f2a60608601613b1c565b905092959194509250565b60008060008060008060c08789031215613f4d578384fd5b8635955060208701359450604087013593506060870135925060808701359150613f7960a08801613b1c565b90509295509295509295565b60028110613fa357634e487b7160e01b600052602160045260246000fd5b9052565b60008251613fb9818460208701614360565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613ffb816017850160208801614360565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161402c816028840160208801614360565b01602801949350505050565b6001600160a01b03841681526080810160408460208401376060919091019190915292915050565b6001600160a01b03871681526020810186905260e0810160408681840137608082019490945260a0810192909252151560c0909101529392505050565b6001600160a01b0387168152602080820187905260e0820190604083018760005b60028110156140db578151835291830191908301906001016140be565b505050508460808301528360a083015282151560c0830152979650505050505050565b6001600160a01b0386168152602081018590526040810184905260a081016141296060830185613f85565b82151560808301529695505050505050565b60a081016141498288613f85565b85602083015284604083015283606083015282151560808301529695505050505050565b602081526000825180602084015261418c816040850160208701614360565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051610120810167ffffffffffffffff8111828210171561420957634e487b7160e01b600052604160045260246000fd5b60405290565b600080821280156001600160ff1b0384900385131615614231576142316143dc565b600160ff1b839003841281161561424a5761424a6143dc565b50500190565b60008219821115614263576142636143dc565b500190565b60006001600160ff1b038184138284138082168684048611161561428e5761428e6143dc565b600160ff1b848712828116878305891216156142ac576142ac6143dc565b8587129250878205871284841616156142c7576142c76143dc565b878505871281841616156142dd576142dd6143dc565b505050929093029392505050565b6000816000190483118215151615614305576143056143dc565b500290565b60008083128015600160ff1b850184121615614328576143286143dc565b6001600160ff1b0384018313811615614343576143436143dc565b50500390565b60008282101561435b5761435b6143dc565b500390565b60005b8381101561437b578181015183820152602001614363565b8381111561438a576000848401525b50505050565b60008161439f5761439f6143dc565b506000190190565b60006000198214156143bb576143bb6143dc565b5060010190565b6000600160ff1b8214156143d8576143d86143dc565b0390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610d4357600080fd5b8015158114610d4357600080fdfeaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771a26469706673582212208d52d10d172f0284251fc4017902d0e38ce90e0efbe390e07beaaed96f38cc8664736f6c63430008040033af290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102945760003560e01c80637ef8a2d311610167578063b339b368116100ce578063f3fa326d11610087578063f3fa326d1461057b578063f48cba7c1461058e578063f609ce1b14610597578063fa09e630146105a0578063fbfa77cf146105b3578063fe45fe17146105c657600080fd5b8063b339b36814610513578063d547741f1461051c578063e43581b81461052f578063ee99205c14610542578063f0dc2c2014610555578063f3ae24151461056857600080fd5b80639039c639116101205780639039c639146104b657806391d14854146104c9578063a1ac05e1146104dc578063a217fddf146104ef578063a9753e65146104f7578063adf1ab9b1461050057600080fd5b80637ef8a2d3146104635780638053fcbe1461047657806381be72ab1461047f5780638456cb591461049257806384f6721b1461049a57806389cf3204146104a357600080fd5b80632f2ff15d1161020b57806359a1ecaa116101c457806359a1ecaa146103eb57806359f77e2d146104165780635c975abb146104295780636e553f65146104345780637a26414a146104475780637d5d95351461045a57600080fd5b80632f2ff15d1461039857806336568abe146103ab57806339c294be146103be5780633f4ba83a146103c75780634cd74c8f146103cf578063570ca7f2146103e257600080fd5b80631aa053451161025d5780631aa053451461031f5780631b2df850146103325780631d48cd96146103475780632046cc2e1461035a578063248a9ca31461036d578063295c39a51461039057600080fd5b8062f714ce1461029957806301ffc9a7146102ae5780630c94154f146102d657806314627834146102e957806318994a871461030c575b600080fd5b6102ac6102a7366004613bab565b6105d9565b005b6102c16102bc366004613bda565b6106ae565b60405190151581526020015b60405180910390f35b6102ac6102e4366004613ca3565b6106e5565b6102fe60008051602061443683398151915281565b6040519081526020016102cd565b6102fe61031a366004613b4c565b61081b565b6102ac61032d366004613f35565b61086f565b6102fe60008051602061441683398151915281565b6102ac610355366004613b30565b610985565b6102ac610368366004613ec2565b610ac9565b6102fe61037b366004613b93565b60009081526020819052604090206001015490565b600f546102fe565b6102ac6103a6366004613bab565b610c7b565b6102ac6103b9366004613bab565b610ca5565b6102fe60035481565b6102ac610d23565b6102fe6103dd366004613b4c565b610d46565b6102fe60045481565b6103fe6103f9366004613b93565b610d66565b6040516001600160a01b0390911681526020016102cd565b6102ac610424366004613e3e565b610d90565b60015460ff166102c1565b6102ac610442366004613bab565b610dd4565b6102ac610455366004613d84565b610e0c565b6102fe60075481565b6102fe610471366004613b30565b6111a9565b6102fe60095481565b6102ac61048d366004613ef7565b61133c565b6102ac611381565b6102fe600a5481565b600d546103fe906001600160a01b031681565b6102ac6104c4366004613dc2565b6113a1565b6102c16104d7366004613bab565b6113e4565b6102ac6104ea366004613df7565b61140d565b6102fe600081565b6102fe60055481565b6102fe61050e366004613b30565b6116ef565b6102fe60065481565b6102ac61052a366004613bab565b6117c2565b6102c161053d366004613b30565b6117e7565b600e546103fe906001600160a01b031681565b6102ac610563366004613b30565b611801565b6102c1610576366004613b30565b61188e565b6102ac610589366004613e97565b6118a8565b6102fe60085481565b6102fe600b5481565b6102ac6105ae366004613b30565b611cc9565b600c546103fe906001600160a01b031681565b6102ac6105d4366004613b30565b611d8d565b6002805414156106045760405162461bcd60e51b81526004016105fb906141a0565b60405180910390fd5b60028055610610612446565b600c54604051631a4ca37b60e21b8152336004820152602481018490526001600160a01b038381166044830152909116906369328dec90606401600060405180830381600087803b15801561066457600080fd5b505af1158015610678573d6000803e3d6000fd5b505050506106883360045461248e565b6106a55760405163b28c857b60e01b815260040160405180910390fd5b50506001600255565b60006001600160e01b03198216637965db0b60e01b14806106df57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000805160206144368339815191526106fd816124a4565b61070a82602001516124ae565b8151610715906124fe565b6107228260400151612576565b61072f82606001516125a6565b61073c82608001516125fd565b6107498260a00151612654565b6107568260c00151612682565b6107638260e001516126c4565b610771826101000151612705565b7f46fdb7eba5bc556294a8e95d7c0fce002a6272aa7229e1fc1c9dec41b17b2460826000015183602001518460400151856060015186608001518760a001518860c001518960e001518a610100015160405161080f99989796959493929190988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200190565b60405180910390a15050565b600080610827846116ef565b90506000610836856001612734565b905060006108448686610d46565b90508061085b610854858561420f565b84906127bb565b610865919061430a565b9695505050505050565b6002805414156108915760405162461bcd60e51b81526004016105fb906141a0565b6002805561089d612446565b6108a9868686846127c7565b600f86815481106108ca57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051635216b30160e11b81523360048201526001600160a01b039091169063a42d66029060240160206040518083038186803b15801561091657600080fd5b505afa15801561092a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094e9190613b77565b1561096c5760405163022cdbe760e61b815260040160405180910390fd5b610978868484846127c7565b5050600160025550505050565b60008051602061443683398151915261099d816124a4565b6001600160a01b0382166109c45760405163059d8acb60e01b815260040160405180910390fd5b60005b600f54811015610a4257826001600160a01b0316600f82815481106109fc57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415610a305760405163039684cd60e01b815260040160405180910390fd5b80610a3a816143a7565b9150506109c7565b50600f805460018101825560008290527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b03851690811790915590546040519081527fa64754291535175942be6f35fba8deab36d97ea608b17d06cc5efb985e17215f9060200160405180910390a25050565b600280541415610aeb5760405162461bcd60e51b81526004016105fb906141a0565b60028055610af7612446565b6000610b038533612aeb565b6020015190506000808213610b19576000610b1c565b60015b9050610b2a868686846127c7565b600f8681548110610b4b57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051635216b30160e11b81523360048201526001600160a01b039091169063a42d66029060240160206040518083038186803b158015610b9757600080fd5b505afa158015610bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcf9190613b77565b15610bed5760405163022cdbe760e61b815260040160405180910390fd5b600c546040516301395c5960e31b81523360048201526001600160a01b038581166024830152909116906309cae2c890604401600060405180830381600087803b158015610c3a57600080fd5b505af1158015610c4e573d6000803e3d6000fd5b50505050610c5e3360045461248e565b6109785760405163b28c857b60e01b815260040160405180910390fd5b600082815260208190526040902060010154610c96816124a4565b610ca08383612bb6565b505050565b6001600160a01b0381163314610d155760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105fb565b610d1f8282612c3a565b5050565b600080516020614416833981519152610d3b816124a4565b610d43612c9f565b50565b600080610d52846111a9565b9050610d5e8184612cf1565b949350505050565b600f8181548110610d7657600080fd5b6000918252602090912001546001600160a01b0316905081565b600280541415610db25760405162461bcd60e51b81526004016105fb906141a0565b60028055610dbe612446565b610dc88585612cfd565b610978868483856127c7565b600280541415610df65760405162461bcd60e51b81526004016105fb906141a0565b60028055610e02612446565b6106a58282612cfd565b600280541415610e2e5760405162461bcd60e51b81526004016105fb906141a0565b60028055610e3a612446565b3360008215610e7b57610e56610e508787612aeb565b51612d6e565b905080610e7657604051632977d16360e11b815260040160405180910390fd5b610f54565b600f8681548110610e9c57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051639d36b75960e01b81526001600160a01b03878116600483015290911690639d36b7599060240160206040518083038186803b158015610eea57600080fd5b505afa158015610efe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f229190613b77565b610f3f57604051632977d16360e11b815260040160405180910390fd5b610f51610f4c8787612d79565b612d6e565b90505b610f5d85612dd7565b610f698560035461248e565b15610f875760405163389fcd8960e11b815260040160405180910390fd5b600083610f9e57610f99878787612f9f565b610fa9565b610fa9878787613083565b90506000610fc2600654610fbc85612187565b90613230565b90506000610fdb6008548361323090919063ffffffff16565b90506000610fe98284614349565b600c549091506001600160a01b03166362990d2f8a61100786612192565b611011908861430a565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561105757600080fd5b505af115801561106b573d6000803e3d6000fd5b5050600c546001600160a01b031691506362990d2f90508761108c84612192565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156110d257600080fd5b505af11580156110e6573d6000803e3d6000fd5b5050600d546040516352ac183b60e01b8152600481018690526001600160a01b0390911692506352ac183b9150602401600060405180830381600087803b15801561113057600080fd5b505af1158015611144573d6000803e3d6000fd5b50505050856001600160a01b0316896001600160a01b03168b7f19a800bd1189221901c32c4ced18afe41c45969c0b5e97b8ebf4124e169339cc61118789612187565b60405190815260200160405180910390a4505060016002555050505050505050565b6000805b600f54811015611336576000600f82815481106111da57634e487b7160e01b600052603260045260246000fd5b600091825260209182902001546040805163632b6b1160e01b815290516001600160a01b039092169263632b6b1192600480840193829003018186803b15801561122357600080fd5b505afa158015611237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125b9190613c1e565b905061131661126982612192565b600f848154811061128a57634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460405163e65896c960e01b81526001600160a01b0388811660048301529091169063e65896c99060240160206040518083038186803b1580156112d857600080fd5b505afa1580156112ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113109190613c1e565b90612cf1565b611320908461420f565b925050808061132e906143a7565b9150506111ad565b50919050565b60028054141561135e5760405162461bcd60e51b81526004016105fb906141a0565b6002805561136a612446565b611376848484846127c7565b505060016002555050565b600080516020614416833981519152611399816124a4565b610d4361323c565b6002805414156113c35760405162461bcd60e51b81526004016105fb906141a0565b600280556113cf612446565b6113da838383613277565b5050600160025550565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60028054141561142f5760405162461bcd60e51b81526004016105fb906141a0565b6002805561143b612446565b61144433612dd7565b6000806000600f888154811061146a57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516323e8659f60e21b81526001600160a01b0390911691638fa1967c916114aa9133918c918c918c918c91600401614060565b606060405180830381600087803b1580156114c457600080fd5b505af11580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc9190613c76565b92509250925060006115b2600f8a8154811061152857634e487b7160e01b600052603260045260246000fd5b60009182526020918290200154604080516397c4fac760e01b815290516001600160a01b03909216926397c4fac792600480840193829003018186803b15801561157157600080fd5b505afa158015611585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a99190613c1e565b61131084612d6e565b600d549091506001600160a01b03166352ac183b6115cf83612187565b6040518263ffffffff1660e01b81526004016115ed91815260200190565b600060405180830381600087803b15801561160757600080fd5b505af115801561161b573d6000803e3d6000fd5b5050600c546001600160a01b031691506362990d2f90503361163d848861420f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561168357600080fd5b505af1158015611697573d6000803e3d6000fd5b505050506116a78933600061353f565b5060405183815233908a907f7cd78db3fa0f169740484c879803073b63a35c4c5d82f02312e7aa988eee85549060200160405180910390a35050600160025550505050505050565b6000805b600f5481101561133657600f818154811061171e57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051637439aabd60e11b81526001600160a01b0385811660048301529091169063e873557a9060240160206040518083038186803b15801561176c57600080fd5b505afa158015611780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a49190613c1e565b6117ae908361420f565b9150806117ba816143a7565b9150506116f3565b6000828152602081905260409020600101546117dd816124a4565b610ca08383612c3a565b60006106df600080516020614436833981519152836113e4565b600080516020614436833981519152611819816124a4565b6001600160a01b0382166118405760405163059d8acb60e01b815260040160405180910390fd5b600e80546001600160a01b0319166001600160a01b0384169081179091556040519081527f37f339b442273d59b9ccb58c1ed2c06e695bd9b0a68db21495afb7fc86de692c9060200161080f565b60006106df600080516020614416833981519152836113e4565b6000805160206144168339815191526118c0816124a4565b6002805414156118e25760405162461bcd60e51b81526004016105fb906141a0565b600280819055506000600f858154811061190c57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516394b661e960e01b81526001600160a01b03909116916394b661e99161194c91309189918991600191906004016140fe565b608060405180830381600087803b15801561196657600080fd5b505af115801561197a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199e9190613c36565b50600c546040516362990d2f60e01b8152306004820152602481018390529194506001600160a01b031692506362990d2f9150604401600060405180830381600087803b1580156119ee57600080fd5b505af1158015611a02573d6000803e3d6000fd5b5050600c546040805163c52e8c4160e01b815290516001600160a01b0390921693506309cae2c892503091849163c52e8c41916004808301926020929190829003018186803b158015611a5457600080fd5b505afa158015611a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8c9190613c02565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401600060405180830381600087803b158015611ad457600080fd5b505af1158015611ae8573d6000803e3d6000fd5b5050600d54600c546040805163c52e8c4160e01b81529051611c8395506001600160a01b039384169450919092169163c52e8c41916004808301926020929190829003018186803b158015611b3c57600080fd5b505afa158015611b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b749190613c02565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015611bb557600080fd5b505afa158015611bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bed9190613c1e565b600c60009054906101000a90046001600160a01b03166001600160a01b031663c52e8c416040518163ffffffff1660e01b815260040160206040518083038186803b158015611c3b57600080fd5b505afa158015611c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c739190613c02565b6001600160a01b03169190613599565b847f96d0284e042317c02550d6522426b8938bc365bc6c2fd42594b358ff2fbdd5e682604051611cb591815260200190565b60405180910390a250506001600255505050565b600280541415611ceb5760405162461bcd60e51b81526004016105fb906141a0565b60028055611cf7612446565b600c546040516301395c5960e31b81523360048201526001600160a01b038381166024830152909116906309cae2c890604401600060405180830381600087803b158015611d4457600080fd5b505af1158015611d58573d6000803e3d6000fd5b50505050611d683360045461248e565b611d855760405163b28c857b60e01b815260040160405180910390fd5b506001600255565b600280541415611daf5760405162461bcd60e51b81526004016105fb906141a0565b60028055611dbb612446565b3360005b600f54811015611f4d57600f8181548110611dea57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051635216b30160e11b81526001600160a01b0385811660048301529091169063a42d66029060240160206040518083038186803b158015611e3857600080fd5b505afa158015611e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e709190613b77565b80611f1d5750600f8181548110611e9757634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051639d36b75960e01b81526001600160a01b03858116600483015290911690639d36b7599060240160206040518083038186803b158015611ee557600080fd5b505afa158015611ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1d9190613b77565b15611f3b576040516302c2ecad60e51b815260040160405180910390fd5b80611f45816143a7565b915050611dbf565b50600c5460405162ac13a160e61b81526001600160a01b038481166004830152600060248301819052921690632b04e8409060440160206040518083038186803b158015611f9a57600080fd5b505afa158015611fae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd29190613c1e565b600c5460405163029122eb60e41b81526001600160a01b03868116600483015260016024830152929350600092909116906329122eb09060440160206040518083038186803b15801561202457600080fd5b505afa158015612038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205c9190613c1e565b9050600061206a838361430a565b90506000831261208d5760405163449e6f1360e11b815260040160405180910390fd5b600a5461209b908290612cf1565b6120a4846143c2565b13806120b95750600b546120b7846143c2565b135b1561216257600c5460405163161ad3b360e21b81526001600160a01b03868116600483015287811660248301529091169063586b4ecc90604401600060405180830381600087803b15801561210d57600080fd5b505af1158015612121573d6000803e3d6000fd5b50506040516001600160a01b038088169350881691507fe3bf82689d5393dcc1c3be2e48e2279199f8bf891f818b717e30a42622f3be0c90600090a361217b565b60405163f04aeccb60e01b815260040160405180910390fd5b50506001600255505050565b60006106df82612386565b60006106df826123dc565b606060006121ac8360026142eb565b6121b7906002614250565b67ffffffffffffffff8111156121dd57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612207576020820181803683370190505b509050600360fc1b8160008151811061223057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061226d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006122918460026142eb565b61229c906001614250565b90505b6001811115612330576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106122de57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061230257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361232981614390565b905061229f565b50831561237f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105fb565b9392505050565b6000808212156123d85760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016105fb565b5090565b60006001600160ff1b038211156123d85760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016105fb565b60015460ff161561248c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105fb565b565b60008061249b848461081b565b12159392505050565b610d4381336135eb565b60035481136124d05760405163278ec69160e11b815260040160405180910390fd5b6706f05b59d3b200008113156124f957604051632294dbdf60e21b815260040160405180910390fd5b600455565b6658d15e17628000811215612526576040516380f0583d60e01b815260040160405180910390fd5b670429d069189e000081131561254f57604051632bea3b4760e11b815260040160405180910390fd5b8060045413612571576040516380f0583d60e01b815260040160405180910390fd5b600355565b69021e19e0c9bab24000008111156125a157604051636ec81ebd60e01b815260040160405180910390fd5b600555565b662386f26fc100008110156125ce5760405163876d264d60e01b815260040160405180910390fd5b6125d9600354612187565b81106125f85760405163caaa4f4d60e01b815260040160405180910390fd5b600655565b67016345785d8a000081101561262657604051637cf84fa760e01b815260040160405180910390fd5b6706f05b59d3b2000081111561264f5760405163395357bf60e11b815260040160405180910390fd5b600755565b670de0b6b3a764000081111561267d5760405163720daaa360e01b815260040160405180910390fd5b600855565b61268b81612192565b600a546126a0906702c68af0bb14000061420f565b13156126bf57604051630a8caa0f60e11b815260040160405180910390fd5b600955565b6126cf600954612192565b6126e1826702c68af0bb14000061420f565b131561270057604051630a8caa0f60e11b815260040160405180910390fd5b600a55565b68056bc75e2d6310000081121561272f5760405163b518654d60e01b815260040160405180910390fd5b600b55565b600c5460405163029122eb60e41b81526001600160a01b038481166004830152831515602483015260009216906329122eb0906044015b60206040518083038186803b15801561278357600080fd5b505afa158015612797573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237f9190613c1e565b600061237f838361364f565b826127e5576040516321d7db4360e01b815260040160405180910390fd5b6127ee33612dd7565b600080600080600f888154811061281557634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516394b661e960e01b81526001600160a01b03909116916394b661e9916128549133918c918c918c91906004016140fe565b608060405180830381600087803b15801561286e57600080fd5b505af1158015612882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a69190613c36565b9350935093509350600081156129d257612964600f8a815481106128da57634e487b7160e01b600052603260045260246000fd5b60009182526020918290200154604080516397c4fac760e01b815290516001600160a01b03909216926397c4fac792600480840193829003018186803b15801561292357600080fd5b505afa158015612937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295b9190613c1e565b61131087612d6e565b600d549091506001600160a01b03166352ac183b61298183612187565b6040518263ffffffff1660e01b815260040161299f91815260200190565b600060405180830381600087803b1580156129b957600080fd5b505af11580156129cd573d6000803e3d6000fd5b505050505b60006129de828561430a565b600c546040516362990d2f60e01b8152336004820152602481018390529192506001600160a01b0316906362990d2f90604401600060405180830381600087803b158015612a2b57600080fd5b505af1158015612a3f573d6000803e3d6000fd5b50505050612a4f3360045461248e565b612a6c5760405163afd1ab8560e01b815260040160405180910390fd5b612a788a33600161353f565b612a955760405163282c809760e01b815260040160405180910390fd5b336001600160a01b03168a7f091f919d14dc90f5cbb30eade032cfd3afd9fd470a0ec42392db347fc3cacca48989898689604051612ad795949392919061413b565b60405180910390a350505050505050505050565b612b0f60405180606001604052806000815260200160008152602001600081525090565b600f8381548110612b3057634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051630f272c5b60e31b81526001600160a01b0384811660048301529091169063793962d89060240160606040518083038186803b158015612b7e57600080fd5b505afa158015612b92573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237f9190613d1d565b612bc082826113e4565b610d1f576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055612bf63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612c4482826113e4565b15610d1f576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b612ca7613665565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600061237f83836136ae565b600c54604051633d14d1b760e21b8152336004820152602481018490526001600160a01b0383811660448301529091169063f45346dc906064015b600060405180830381600087803b158015612d5257600080fd5b505af1158015612d66573d6000803e3d6000fd5b505050505050565b60006106df82613773565b6000600f8381548110612d9c57634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460405163151d7fad60e01b81526001600160a01b0384811660048301529091169063151d7fad9060240161276b565b6000805b600f54811015612f5f57600f8181548110612e0657634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051633876d05560e01b81526001600160a01b03858116600483015290911690633876d05590602401602060405180830381600087803b158015612e5657600080fd5b505af1158015612e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8e9190613c1e565b600f8281548110612eaf57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051631a4e577d60e21b81526001600160a01b038681166004830152909116906369395df490602401602060405180830381600087803b158015612eff57600080fd5b505af1158015612f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f379190613c1e565b612f41919061420f565b612f4b908361420f565b915080612f57816143a7565b915050612ddb565b508015610d1f57600c546040516362990d2f60e01b81526001600160a01b03848116600483015260248201849052909116906362990d2f90604401612d38565b600080600f8581548110612fc357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316638fa1967c85612fe888826137af565b60408051808201825260008082526020820181905291516001600160e01b031960e087901b1681526130239493928a9160019060040161409d565b606060405180830381600087803b15801561303d57600080fd5b505af1158015613051573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130759190613c76565b50509050610d5e858561380d565b60008060006130928686612aeb565b6020015112156130a35760006130a6565b60015b90506000600f86815481106130cb57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516394b661e960e01b81526001600160a01b03909116916394b661e99161310b91899189919088906001906004016140fe565b608060405180830381600087803b15801561312557600080fd5b505af1158015613139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315d9190613c36565b5092505050600f868154811061318357634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051635216b30160e11b81526001600160a01b0387811660048301529091169063a42d66029060240160206040518083038186803b1580156131d157600080fd5b505afa1580156131e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132099190613b77565b156132275760405163120dbeb360e01b815260040160405180910390fd5b95945050505050565b600061237f8383613857565b613244612446565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833612cd4565b813515801561328857506020820135155b156132a6576040516338d22a8b60e11b815260040160405180910390fd5b6132af33612dd7565b60006132bd3360045461081b565b90506132ca816002614268565b613380600f86815481106132ee57634e487b7160e01b600052603260045260246000fd5b600091825260209182902001546040805163042eb3a360e21b815290516001600160a01b03909216926310bace8c92600480840193829003018186803b15801561333757600080fd5b505afa15801561334b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336f9190613c1e565b6113108660015b6020020135612192565b61338b856000613376565b613395919061420f565b13156133b457604051630cdb992360e01b815260040160405180910390fd5b6000600f85815481106133d757634e487b7160e01b600052603260045260246000fd5b60009182526020909120015460405163021d27f760e51b81526001600160a01b03909116906343a4fee09061341490339088908890600401614038565b602060405180830381600087803b15801561342e57600080fd5b505af1158015613442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134669190613c1e565b905080156134d357600c546040516362990d2f60e01b8152336004820152602481018390526001600160a01b03909116906362990d2f90604401600060405180830381600087803b1580156134ba57600080fd5b505af11580156134ce573d6000803e3d6000fd5b505050505b6134dd853361380d565b6134e98533600061353f565b506134f63360045461248e565b50604080518535815260208087013590820152339187917f413fcc4add68f16703d76130cf98a76591f34707ceaa9abd83774f3776483a81910160405180910390a35050505050565b60008082613556576135518585612d79565b613562565b6135608585612aeb565b515b9050600061357761357283612d6e565b612187565b9050801561358d5760055481119250505061237f565b50600195945050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610ca0908490613863565b6135f582826113e4565b610d1f5761360d816001600160a01b0316601461219d565b61361883602061219d565b604051602001613629929190613fc3565b60408051601f198184030181529082905262461bcd60e51b82526105fb9160040161416d565b600081831261365e578161237f565b5090919050565b60015460ff1661248c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105fb565b6000600160ff1b8314806136c55750600160ff1b82145b156136e357604051630d01a11b60e21b815260040160405180910390fd5b600080600085126136f457846136f9565b846000035b915060008412613709578361370e565b836000035b9050600061371c8383613935565b90506001600160ff1b038111156137495760405163bf79e8d960e01b8152600481018290526024016105fb565b6000198087139086138082186001146137625782613767565b826000035b98975050505050505050565b6000600160ff1b82141561379a57604051631d0742e360e21b815260040160405180910390fd5b600082126137a857816106df565b5060000390565b6000600f83815481106137d257634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051637f338ecf60e01b81526001600160a01b03848116600483015290911690637f338ecf9060240161276b565b600e546001600160a01b031615610d1f57600e546040516322146e3360e01b8152600481018490526001600160a01b038381166024830152909116906322146e3390604401612d38565b600061237f8383613935565b60006138b8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166139f79092919063ffffffff16565b805190915015610ca057808060200190518101906138d69190613b77565b610ca05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105fb565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106139795760405163698d9a0160e11b8152600481018290526024016105fb565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826139b35780670de0b6b3a76400008504019450505050506106df565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6060610d5e8484600085856001600160a01b0385163b613a595760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105fb565b600080866001600160a01b03168587604051613a759190613fa7565b60006040518083038185875af1925050503d8060008114613ab2576040519150601f19603f3d011682016040523d82523d6000602084013e613ab7565b606091505b5091509150613ac7828286613ad2565b979650505050505050565b60608315613ae157508161237f565b825115613af15782518084602001fd5b8160405162461bcd60e51b81526004016105fb919061416d565b80604081018310156106df57600080fd5b803560028110613b2b57600080fd5b919050565b600060208284031215613b41578081fd5b813561237f816143f2565b60008060408385031215613b5e578081fd5b8235613b69816143f2565b946020939093013593505050565b600060208284031215613b88578081fd5b815161237f81614407565b600060208284031215613ba4578081fd5b5035919050565b60008060408385031215613bbd578182fd5b823591506020830135613bcf816143f2565b809150509250929050565b600060208284031215613beb578081fd5b81356001600160e01b03198116811461237f578182fd5b600060208284031215613c13578081fd5b815161237f816143f2565b600060208284031215613c2f578081fd5b5051919050565b60008060008060808587031215613c4b578182fd5b8451935060208501519250604085015191506060850151613c6b81614407565b939692955090935050565b600080600060608486031215613c8a578081fd5b8351925060208401519150604084015190509250925092565b60006101208284031215613cb5578081fd5b613cbd6141d7565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152508091505092915050565b600060608284031215613d2e578081fd5b6040516060810181811067ffffffffffffffff82111715613d5d57634e487b7160e01b83526041600452602483fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b60008060008060808587031215613d99578182fd5b843593506020850135613dab816143f2565b9250604085013591506060850135613c6b81614407565b600080600060808486031215613dd6578081fd5b83359250613de78560208601613b0b565b9150606084013590509250925092565b600080600080600060c08688031215613e0e578283fd5b8535945060208601359350613e268760408801613b0b565b949793965093946080810135945060a0013592915050565b60008060008060008060c08789031215613e56578384fd5b86359550602087013594506040870135613e6f816143f2565b935060608701359250613e8460808801613b1c565b915060a087013590509295509295509295565b600080600060608486031215613eab578081fd5b505081359360208301359350604090920135919050565b60008060008060808587031215613ed7578182fd5b8435935060208501359250604085013591506060850135613c6b816143f2565b60008060008060808587031215613f0c578182fd5b843593506020850135925060408501359150613f2a60608601613b1c565b905092959194509250565b60008060008060008060c08789031215613f4d578384fd5b8635955060208701359450604087013593506060870135925060808701359150613f7960a08801613b1c565b90509295509295509295565b60028110613fa357634e487b7160e01b600052602160045260246000fd5b9052565b60008251613fb9818460208701614360565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613ffb816017850160208801614360565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161402c816028840160208801614360565b01602801949350505050565b6001600160a01b03841681526080810160408460208401376060919091019190915292915050565b6001600160a01b03871681526020810186905260e0810160408681840137608082019490945260a0810192909252151560c0909101529392505050565b6001600160a01b0387168152602080820187905260e0820190604083018760005b60028110156140db578151835291830191908301906001016140be565b505050508460808301528360a083015282151560c0830152979650505050505050565b6001600160a01b0386168152602081018590526040810184905260a081016141296060830185613f85565b82151560808301529695505050505050565b60a081016141498288613f85565b85602083015284604083015283606083015282151560808301529695505050505050565b602081526000825180602084015261418c816040850160208701614360565b601f01601f19169190910160400192915050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051610120810167ffffffffffffffff8111828210171561420957634e487b7160e01b600052604160045260246000fd5b60405290565b600080821280156001600160ff1b0384900385131615614231576142316143dc565b600160ff1b839003841281161561424a5761424a6143dc565b50500190565b60008219821115614263576142636143dc565b500190565b60006001600160ff1b038184138284138082168684048611161561428e5761428e6143dc565b600160ff1b848712828116878305891216156142ac576142ac6143dc565b8587129250878205871284841616156142c7576142c76143dc565b878505871281841616156142dd576142dd6143dc565b505050929093029392505050565b6000816000190483118215151615614305576143056143dc565b500290565b60008083128015600160ff1b850184121615614328576143286143dc565b6001600160ff1b0384018313811615614343576143436143dc565b50500390565b60008282101561435b5761435b6143dc565b500390565b60005b8381101561437b578181015183820152602001614363565b8381111561438a576000848401525b50505050565b60008161439f5761439f6143dc565b506000190190565b60006000198214156143bb576143bb6143dc565b5060010190565b6000600160ff1b8214156143d8576143d86143dc565b0390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610d4357600080fd5b8015158114610d4357600080fdfeaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c35a7846a2a701fff6f9d61a46ebff5da578c5dcee8bdf361c569f9ea4ee64771a26469706673582212208d52d10d172f0284251fc4017902d0e38ce90e0efbe390e07beaaed96f38cc8664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addStakingContract(address)": {
        "params": {
          "staking": "Staking Contract"
        }
      },
      "allowListPerpetual(address)": {
        "params": {
          "perp": "Market to add to the list of supported market"
        }
      },
      "changePosition(uint256,uint256,uint256,uint8)": {
        "details": "No number for the leverage is given but the amount in the vault must be bigger than minMarginAtCreationNo checks are done if bought amount exceeds allowance",
        "params": {
          "amount": "Represent amount in vQuote (if long) or vBase (if short) to sell. 18 decimals",
          "direction": "Whether the trade should buy or sell vBase (LONG) or sell vBase(SHORT)",
          "idx": "Index of the perpetual market",
          "minAmount": "Minimum amount that the user is willing to accept. 18 decimals"
        }
      },
      "closePositionWithdrawCollateral(uint256,uint256,uint256,address)": {
        "params": {
          "idx": "Index of the perpetual market",
          "minAmount": "Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals",
          "proposedAmount": "Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals",
          "token": "Token used for the collateral"
        }
      },
      "deposit(uint256,address)": {
        "params": {
          "amount": "Amount to be used as collateral. Might not be 18 decimals",
          "token": "Token to be used for the collateral"
        }
      },
      "extendPositionWithCollateral(uint256,uint256,address,uint256,uint8,uint256)": {
        "params": {
          "collateralAmount": "Amount to be used as the collateral of the position. Might not be 18 decimals",
          "direction": "Whether the position is LONG or SHORT",
          "idx": "Index of the perpetual market",
          "minAmount": "Minimum amount that the user is willing to accept. 18 decimals",
          "positionAmount": "Amount to be sold, in vQuote (if long) or vBase (if short). Must be 18 decimals",
          "token": "Token to be used for the collateral of the position"
        }
      },
      "getNumMarkets()": {
        "returns": {
          "_0": "Number of active markets"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "liquidate(uint256,address,uint256,bool)": {
        "params": {
          "idx": "Index of the perpetual market",
          "isTrader": "Whether or not the position to liquidate is a trading position",
          "liquidatee": "Address of the account to liquidate",
          "proposedAmount": "Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "provideLiquidity(uint256,uint256[2],uint256)": {
        "params": {
          "amounts": "Amount of virtual tokens ([vQuote, vBase]) provided. 18 decimals",
          "idx": "Index of the perpetual market",
          "minLpAmount": "Minimum amount of Lp tokens minted. 18 decimals"
        }
      },
      "removeLiquidity(uint256,uint256,uint256[2],uint256,uint256)": {
        "params": {
          "idx": "Index of the perpetual market",
          "liquidityAmountToRemove": "Amount of liquidity (in LP tokens) to be removed from the pool. 18 decimals",
          "minAmount": "Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals",
          "minVTokenAmounts": "Minimum amount of virtual tokens [vQuote, vBase] withdrawn from the curve pool. 18 decimals",
          "proposedAmount": "Amount at which to get the LP position (in vBase if LONG, in vQuote if SHORT). 18 decimals"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "seizeCollateral(address)": {
        "params": {
          "liquidatee": "Address of the account to liquidate"
        }
      },
      "sellDust(uint256,uint256,uint256)": {
        "params": {
          "idx": "Index of the perpetual market",
          "minAmount": "Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals",
          "proposedAmount": "Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "withdraw(uint256,address)": {
        "params": {
          "amount": "Amount of collateral to withdraw. Might not be 18 decimals (decimals of `token`)",
          "token": "Token of the collateral"
        }
      },
      "withdrawAll(address)": {
        "details": "Should only be called by the trader",
        "params": {
          "token": "Token of the collateral"
        }
      }
    },
    "stateVariables": {
      "insuranceRatio": {
        "details": "Once the insurance reserve exceed this ratio of the tvl, governance can withdraw exceeding insurance fee"
      },
      "liquidationReward": {
        "details": "Paid on dollar value of an trader position. important: liquidationReward < minMargin or liquidations will result in protocol losses"
      },
      "nonUACollSeizureDiscount": {
        "details": "Must be lower than liquidationDiscount to ensure liquidation don't generate bad debt"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ClearingHouse_AmountProvidedTooLarge()": [
        {
          "notice": "Emitted when a user attempts to provide liquidity with amount larger than his free collateral or collateral balance"
        }
      ],
      "ClearingHouse_ClosePositionStillOpen()": [
        {
          "notice": "Emitted when the position is not reduced entirely using closePositionWithdrawCollateral"
        }
      ],
      "ClearingHouse_ExcessiveInsuranceRatio()": [
        {
          "notice": "Emitted when the proposed insurance ratio is too high"
        }
      ],
      "ClearingHouse_ExcessiveLiquidationReward()": [
        {
          "notice": "Emitted when the proposed liquidation reward is too high"
        }
      ],
      "ClearingHouse_ExcessiveLiquidationRewardInsuranceShare()": [
        {
          "notice": "Emitted when the proposed share of the liquidation reward for the insurance is too high"
        }
      ],
      "ClearingHouse_ExcessiveMinMargin()": [
        {
          "notice": "Emitted when the proposed minMargin is too high"
        }
      ],
      "ClearingHouse_ExcessiveMinMarginAtCreation()": [
        {
          "notice": "Emitted when the proposed minMarginAtCreation is too low"
        }
      ],
      "ClearingHouse_ExtendPositionInsufficientMargin()": [
        {
          "notice": "Emitted when there is not enough margin to extend to the proposed position amount"
        }
      ],
      "ClearingHouse_ExtendPositionZeroAmount()": [
        {
          "notice": "Emitted when a user attempts to extend their position with amount equal to 0"
        }
      ],
      "ClearingHouse_InsufficientDiffBtwLiquidationDiscountAndNonUACollSeizureDiscount()": [
        {
          "notice": "Emitted when the difference between liquidationDiscount and nonUACollSeizureDiscount isn't large enough"
        }
      ],
      "ClearingHouse_InsufficientInsuranceRatio()": [
        {
          "notice": "Emitted when the proposed insurance ratio is too low"
        }
      ],
      "ClearingHouse_InsufficientLiquidationReward()": [
        {
          "notice": "Emitted when the proposed liquidation reward is too low"
        }
      ],
      "ClearingHouse_InsufficientMinMargin()": [
        {
          "notice": "Emitted when the proposed minMargin is too low"
        }
      ],
      "ClearingHouse_InsufficientMinMarginAtCreation()": [
        {
          "notice": "Emitted when the proposed minMarginAtCreation is too low"
        }
      ],
      "ClearingHouse_InsufficientUaDebtSeizureThreshold()": [
        {
          "notice": "Emitted when the proposed UA debt limit is lower than the minimum acceptable value"
        }
      ],
      "ClearingHouse_LiquidateInsufficientProposedAmount()": [
        {
          "notice": "Emitted when the attempted liquidation does not close the full position"
        }
      ],
      "ClearingHouse_LiquidateInvalidPosition()": [
        {
          "notice": "Emitted when the liquidatee does not have an open position"
        }
      ],
      "ClearingHouse_LiquidateValidMargin()": [
        {
          "notice": "Emitted when the margin of the liquidatee's position is still valid"
        }
      ],
      "ClearingHouse_LiquidationDebtSizeZero()": [
        {
          "notice": "Emitted when a collateral liquidation for a user with no UA debt is tried"
        }
      ],
      "ClearingHouse_PerpetualMarketAlreadyAssigned()": [
        {
          "notice": "Emitted when passing the address of a perpetual market which has already been added"
        }
      ],
      "ClearingHouse_ProvideLiquidityZeroAmount()": [
        {
          "notice": "Emitted when a user attempts to provide liquidity with amount equal to 0"
        }
      ],
      "ClearingHouse_ReducePositionZeroAmount()": [
        {
          "notice": "Emitted when a user attempts to reduce their position with amount equal to 0"
        }
      ],
      "ClearingHouse_RemoveLiquidityInsufficientFunds()": [
        {
          "notice": "Emitted when a user attempts to withdraw more liquidity than they have"
        }
      ],
      "ClearingHouse_SeizeCollateralStillOpen()": [
        {
          "notice": "Emitted when attempting to seize collateral of a user with an open position"
        }
      ],
      "ClearingHouse_SufficientUserCollateral()": [
        {
          "notice": "Emitted when a liquidator tries seizing collateral of user with sufficient collaterals level"
        }
      ],
      "ClearingHouse_UnderOpenNotionalAmountRequired()": [
        {
          "notice": "Emitted when a user tries to open a position with an incorrect open notional amount"
        }
      ],
      "ClearingHouse_VaultWithdrawUnsuccessful()": [
        {
          "notice": "Emitted when vault withdrawal is unsuccessful"
        }
      ],
      "ClearingHouse_WithdrawInsufficientMargin()": [
        {
          "notice": "Emitted when there is not enough margin to withdraw the requested amount"
        }
      ],
      "ClearingHouse_ZeroAddress()": [
        {
          "notice": "Emitted when the zero address is provided"
        }
      ],
      "PRBMathSD59x18__AbsInputTooSmall()": [
        {
          "notice": "Emitted when the input is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__MulInputTooSmall()": [
        {
          "notice": "Emitted when one of the inputs is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__MulOverflow(uint256)": [
        {
          "notice": "Emitted when the intermediary absolute result overflows SD59x18."
        }
      ],
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "events": {
      "ChangePosition(uint256,address,uint8,int256,int256,int256,bool)": {
        "notice": "Emitted when a position is extended/opened"
      },
      "ClearingHouseParametersChanged(int256,int256,uint256,uint256,uint256,uint256,uint256,int256,int256)": {
        "notice": "Emitted when parameters are changed"
      },
      "DustSold(uint256,int256)": {
        "notice": "Emitted when dust is sold by governance"
      },
      "LiquidationCall(uint256,address,address,uint256)": {
        "notice": "Emitted when a trader position is liquidated"
      },
      "LiquidityProvided(uint256,address,uint256,uint256)": {
        "notice": "Emitted when (additional) liquidity is provided"
      },
      "LiquidityRemoved(uint256,address,uint256)": {
        "notice": "Emitted when liquidity is removed"
      },
      "MarketAdded(address,uint256)": {
        "notice": "Emitted when new perpetual market is added"
      },
      "SeizeCollateral(address,address)": {
        "notice": "Emitted when a trader position is liquidated"
      }
    },
    "kind": "user",
    "methods": {
      "addStakingContract(address)": {
        "notice": "Add a staking contract"
      },
      "allowListPerpetual(address)": {
        "notice": "Add one perpetual market to the list of markets"
      },
      "changePosition(uint256,uint256,uint256,uint8)": {
        "notice": "Open or increase or reduce a position, either long or short"
      },
      "closePositionWithdrawCollateral(uint256,uint256,uint256,address)": {
        "notice": "Single close position function, groups close position and withdraw collateralImportant: `proposedAmount` must be large enough to close the entire position else the function call will fail"
      },
      "deposit(uint256,address)": {
        "notice": "Deposit tokens into the vault"
      },
      "extendPositionWithCollateral(uint256,uint256,address,uint256,uint8,uint256)": {
        "notice": "Single open position function, group collateral deposit and extend position"
      },
      "getNumMarkets()": {
        "notice": "Return the number of active markets"
      },
      "insurance()": {
        "notice": "Insurance contract"
      },
      "insuranceRatio()": {
        "notice": "Insurance ratio"
      },
      "liquidate(uint256,address,uint256,bool)": {
        "notice": "Submit the address of an user whose position is worth liquidating for a reward"
      },
      "liquidationDiscount()": {
        "notice": "Discount on the collateral price for the liquidator"
      },
      "liquidationReward()": {
        "notice": "liquidation reward payed to liquidators"
      },
      "liquidationRewardInsuranceShare()": {
        "notice": "Portion of the liquidation reward that the insurance gets"
      },
      "minMargin()": {
        "notice": "minimum maintenance margin"
      },
      "minMarginAtCreation()": {
        "notice": "minimum margin when opening a position"
      },
      "minPositiveOpenNotional()": {
        "notice": "minimum positive open notional when opening a position"
      },
      "nonUACollSeizureDiscount()": {
        "notice": "Discount ratio to be applied on non-UA collaterals before seizing said collaterals for some UA"
      },
      "pause()": {
        "notice": "Pause the contract"
      },
      "perpetuals(uint256)": {
        "notice": "Allowlisted Perpetual contracts"
      },
      "provideLiquidity(uint256,uint256[2],uint256)": {
        "notice": "Provide liquidity to the pool, without depositing new capital in the vault"
      },
      "removeLiquidity(uint256,uint256,uint256[2],uint256,uint256)": {
        "notice": "Remove liquidity from the pool and account profit/loss in UA"
      },
      "seizeCollateral(address)": {
        "notice": "Buy the non-UA collateral of a user at a discounted UA price to settle the debt of said user."
      },
      "sellDust(uint256,uint256,uint256)": {
        "notice": "Sell dust in market idx"
      },
      "stakingContract()": {
        "notice": "Staking contract"
      },
      "uaDebtSeizureThreshold()": {
        "notice": "UA debt amount at which non-UA collaterals can be seized to pay back the UA debt"
      },
      "unpause()": {
        "notice": "Unpause the contract"
      },
      "vault()": {
        "notice": "Vault contract"
      },
      "withdraw(uint256,address)": {
        "notice": "Withdraw tokens from the vault"
      },
      "withdrawAll(address)": {
        "notice": "Withdraw all tokens from the vault"
      }
    },
    "notice": "Entry point for users to vault and perpetual markets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 70,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)"
      },
      {
        "astId": 737,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 838,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5859,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "minMargin",
        "offset": 0,
        "slot": "3",
        "type": "t_int256"
      },
      {
        "astId": 5863,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "minMarginAtCreation",
        "offset": 0,
        "slot": "4",
        "type": "t_int256"
      },
      {
        "astId": 5867,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "minPositiveOpenNotional",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5871,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "liquidationReward",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5875,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "insuranceRatio",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5879,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "liquidationRewardInsuranceShare",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5883,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "liquidationDiscount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5887,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "nonUACollSeizureDiscount",
        "offset": 0,
        "slot": "10",
        "type": "t_int256"
      },
      {
        "astId": 5891,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "uaDebtSeizureThreshold",
        "offset": 0,
        "slot": "11",
        "type": "t_int256"
      },
      {
        "astId": 5896,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "vault",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IVault)16471"
      },
      {
        "astId": 5901,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "insurance",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IInsurance)15360"
      },
      {
        "astId": 5906,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "stakingContract",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IStakingContract)15992"
      },
      {
        "astId": 5912,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "perpetuals",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_contract(IPerpetual)15982)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IPerpetual)15982)dyn_storage": {
        "base": "t_contract(IPerpetual)15982",
        "encoding": "dynamic_array",
        "label": "contract IPerpetual[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IInsurance)15360": {
        "encoding": "inplace",
        "label": "contract IInsurance",
        "numberOfBytes": "20"
      },
      "t_contract(IPerpetual)15982": {
        "encoding": "inplace",
        "label": "contract IPerpetual",
        "numberOfBytes": "20"
      },
      "t_contract(IStakingContract)15992": {
        "encoding": "inplace",
        "label": "contract IStakingContract",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)16471": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)65_storage"
      },
      "t_struct(RoleData)65_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 62,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 64,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}