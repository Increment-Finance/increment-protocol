{
  "address": "0x3C3F800c3aa34256Ef63271b9e7D39752A2d519f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe328f2c530ef47ea55db6976f39ddacc9c57b27f415242f38fc7decc261af473",
  "receipt": {
    "to": null,
    "from": "0x69C7c048e7C286B0a8Bcf7cD7620E71Ef7569421",
    "contractAddress": "0x3C3F800c3aa34256Ef63271b9e7D39752A2d519f",
    "transactionIndex": 14,
    "gasUsed": "266397",
    "logsBloom": "0x
    "blockHash": "0x3a16fd1e1b84205d2888ef1b844594c84f2c2bd74b7477a0738c1963c36d7e0f",
    "transactionHash": "0xe328f2c530ef47ea55db6976f39ddacc9c57b27f415242f38fc7decc261af473",
    "logs": [],
    "blockNumber": 11179353,
    "cumulativeGasUsed": "2831803",
    "status": 1,
    "byzantium": true
  },
  "args": [
    8
  ],
  "numDeployments": 1,
  "solcInputHash": "e1cef607481b161ae69d7ea60025156b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Dummy implementation of the interface. Contract meant to be mocked\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MockAggregator.sol\":\"MockAggregator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/mocks/MockAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/// @dev Dummy implementation of the interface. Contract meant to be mocked\\ncontract MockAggregator is AggregatorV3Interface {\\n    uint8 public override decimals;\\n    string public override description = \\\"MockAggregator\\\";\\n    uint256 public override version = 3;\\n\\n    constructor(uint8 _decimals) {\\n        // 8 for all forex pairs: https://docs.chain.link/docs/ethereum-addresses/\\n        decimals = _decimals;\\n    }\\n\\n    function getRoundData(uint80 _roundId)\\n        external\\n        pure\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        return (_roundId, 0, 0, 0, 0);\\n    }\\n\\n    function latestRoundData()\\n        external\\n        pure\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        return (0, 0, 0, 0, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x013aeebc504bd4d842e0d0ed23e8c94bbff4a87fecdf204347e90d64988ed583\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c0604052600e60808190526d26b7b1b5a0b3b3b932b3b0ba37b960911b60a090815261002f9160019190610079565b50600360025534801561004157600080fd5b5060405161040f38038061040f83398101604081905261006091610112565b6000805460ff191660ff92909216919091179055610175565b8280546100859061013a565b90600052602060002090601f0160209004810192826100a757600085556100ed565b82601f106100c057805160ff19168380011785556100ed565b828001600101855582156100ed579182015b828111156100ed5782518255916020019190600101906100d2565b506100f99291506100fd565b5090565b5b808211156100f957600081556001016100fe565b600060208284031215610123578081fd5b815160ff81168114610133578182fd5b9392505050565b600181811c9082168061014e57607f821691505b6020821081141561016f57634e487b7160e01b600052602260045260246000fd5b50919050565b61028b806101846000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063313ce5671461005c57806354fd4d50146100805780637284e416146100975780639a6fc8f5146100ac578063feaf968c146100fd575b600080fd5b6000546100699060ff1681565b60405160ff90911681526020015b60405180910390f35b61008960025481565b604051908152602001610077565b61009f610108565b60405161007791906101c7565b6100c66100ba366004610196565b90600090819081908190565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a001610077565b6000808080806100c6565b600180546101159061021a565b80601f01602080910402602001604051908101604052809291908181526020018280546101419061021a565b801561018e5780601f106101635761010080835404028352916020019161018e565b820191906000526020600020905b81548152906001019060200180831161017157829003601f168201915b505050505081565b6000602082840312156101a7578081fd5b813569ffffffffffffffffffff811681146101c0578182fd5b9392505050565b6000602080835283518082850152825b818110156101f3578581018301518582016040015282016101d7565b818111156102045783604083870101525b50601f01601f1916929092016040019392505050565b600181811c9082168061022e57607f821691505b6020821081141561024f57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220839f8353b2a49e0f11baf4d23e51b4d961f5db8b9fcb7368e24d73e551c9b05864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063313ce5671461005c57806354fd4d50146100805780637284e416146100975780639a6fc8f5146100ac578063feaf968c146100fd575b600080fd5b6000546100699060ff1681565b60405160ff90911681526020015b60405180910390f35b61008960025481565b604051908152602001610077565b61009f610108565b60405161007791906101c7565b6100c66100ba366004610196565b90600090819081908190565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a001610077565b6000808080806100c6565b600180546101159061021a565b80601f01602080910402602001604051908101604052809291908181526020018280546101419061021a565b801561018e5780601f106101635761010080835404028352916020019161018e565b820191906000526020600020905b81548152906001019060200180831161017157829003601f168201915b505050505081565b6000602082840312156101a7578081fd5b813569ffffffffffffffffffff811681146101c0578182fd5b9392505050565b6000602080835283518082850152825b818110156101f3578581018301518582016040015282016101d7565b818111156102045783604083870101525b50601f01601f1916929092016040019392505050565b600181811c9082168061022e57607f821691505b6020821081141561024f57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220839f8353b2a49e0f11baf4d23e51b4d961f5db8b9fcb7368e24d73e551c9b05864736f6c63430008040033",
  "devdoc": {
    "details": "Dummy implementation of the interface. Contract meant to be mocked",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16830,
        "contract": "contracts/mocks/MockAggregator.sol:MockAggregator",
        "label": "decimals",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 16834,
        "contract": "contracts/mocks/MockAggregator.sol:MockAggregator",
        "label": "description",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 16838,
        "contract": "contracts/mocks/MockAggregator.sol:MockAggregator",
        "label": "version",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}