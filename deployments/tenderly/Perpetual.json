{
  "address": "0xA68480a789c5964C09f1c6D68BF2C78028945A0c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVBase",
          "name": "_vBase",
          "type": "address"
        },
        {
          "internalType": "contract IVQuote",
          "name": "_vQuote",
          "type": "address"
        },
        {
          "internalType": "contract ICryptoSwap",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "contract IClearingHouse",
          "name": "_clearingHouse",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_insuranceFee",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_perpTradingFee",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__AbsInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__DivInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAbs",
          "type": "uint256"
        }
      ],
      "name": "PRBMathSD59x18__DivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__MulInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAbs",
          "type": "uint256"
        }
      ],
      "name": "PRBMathSD59x18__MulOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Perpetual_AttemptReducePosition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Perpetual_ExcessivePriceImpact",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "fee",
          "type": "int256"
        }
      ],
      "name": "Perpetual_InsuranceFeeExcessive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "fee",
          "type": "int256"
        }
      ],
      "name": "Perpetual_InsuranceFeeInsufficient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Perpetual_LPOpenPosition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Perpetual_LPWithdrawExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "Perpetual_MarketBalanceTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Perpetual_MarketEqualFees",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Perpetual_NoOpenPosition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Perpetual_ProposedAmountExceedsMaxMarketPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Perpetual_ProposedAmountExceedsPositionSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Perpetual_SenderNotClearingHouse",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Perpetual_SenderNotClearingHouseOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "fee",
          "type": "int256"
        }
      ],
      "name": "Perpetual_TradingFeeExcessive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "fee",
          "type": "int256"
        }
      ],
      "name": "Perpetual_TradingFeeInsufficient",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "Perpetual_VirtualTokenApprovalConstructor",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paramIndex",
          "type": "uint256"
        }
      ],
      "name": "Perpetual_ZeroAddressConstructor",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vBaseAmount",
          "type": "uint256"
        }
      ],
      "name": "DustGenerated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "cumulativeFundingRate",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingRate",
          "type": "int256"
        }
      ],
      "name": "FundingRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "newInsuranceFee",
          "type": "int256"
        }
      ],
      "name": "InsuranceFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "errorMessage",
          "type": "string"
        }
      ],
      "name": "Log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "newTradingFee",
          "type": "int256"
        }
      ],
      "name": "TradingFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "newOracleTwap",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "newMarketTwap",
          "type": "int256"
        }
      ],
      "name": "TwapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "clearingHouse",
      "outputs": [
        {
          "internalType": "contract IClearingHouse",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum LibPerpetual.Side",
          "name": "direction",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "extendPosition",
      "outputs": [
        {
          "internalType": "int256",
          "name": "openNotional",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "positionSize",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "tradingFees",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGlobalPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "timeOfLastTrade",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "timeOfLastTwapUpdate",
              "type": "uint128"
            },
            {
              "internalType": "int256",
              "name": "cumFundingRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "blockStartPrice",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "totalTradingFeesGrowth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLiquidityProvided",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBaseFeesGrowth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalQuoteFeesGrowth",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibPerpetual.GlobalPosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInsuranceFee",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLpFundingPayments",
      "outputs": [
        {
          "internalType": "int256",
          "name": "upcomingFundingPayment",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLpPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "openNotional",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "positionSize",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "cumFundingRate",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalTradingFeesGrowth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBaseFeesGrowth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalQuoteFeesGrowth",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibPerpetual.LiquidityProviderPosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLpPositionAfterWithdrawal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "openNotional",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "positionSize",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "cumFundingRate",
              "type": "int256"
            }
          ],
          "internalType": "struct LibPerpetual.TraderPosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLpTradingFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tradingFeesEarned",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLpUnrealizedPnL",
      "outputs": [
        {
          "internalType": "int256",
          "name": "pnl",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketTwap",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracleTwap",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalLiquidityProvided",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTraderFundingPayments",
      "outputs": [
        {
          "internalType": "int256",
          "name": "upcomingFundingPayment",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTraderPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "openNotional",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "positionSize",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "cumFundingRate",
              "type": "int256"
            }
          ],
          "internalType": "struct LibPerpetual.TraderPosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTraderUnrealizedPnL",
      "outputs": [
        {
          "internalType": "int256",
          "name": "pnl",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTradingFee",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "indexPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "contract ICryptoSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wadAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLpAmount",
          "type": "uint256"
        }
      ],
      "name": "provideLiquidity",
      "outputs": [
        {
          "internalType": "int256",
          "name": "tradingFees",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "reducePosition",
      "outputs": [
        {
          "internalType": "int256",
          "name": "vQuoteProceeds",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "vBaseAmount",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "profit",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAmountToRemove",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "minVTokenAmounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "proposedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "int256",
          "name": "profit",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "reductionRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "newInsuranceFee",
          "type": "int256"
        }
      ],
      "name": "setInsuranceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "newTradingFee",
          "type": "int256"
        }
      ],
      "name": "setTradingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "settleLp",
      "outputs": [
        {
          "internalType": "int256",
          "name": "fundingPayments",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "settleTrader",
      "outputs": [
        {
          "internalType": "int256",
          "name": "fundingPayments",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vBase",
      "outputs": [
        {
          "internalType": "contract IVBase",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vQuote",
      "outputs": [
        {
          "internalType": "contract IVQuote",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x647446bc9905b8b3cc0bedda8b2e4c290798b2f0d882449621d14f679b6d6e64",
  "receipt": {
    "to": null,
    "from": "0x69C7c048e7C286B0a8Bcf7cD7620E71Ef7569421",
    "contractAddress": "0xA68480a789c5964C09f1c6D68BF2C78028945A0c",
    "transactionIndex": 0,
    "gasUsed": "4026672",
    "logsBloom": "0x
    "blockHash": "0x5023b754fb0e3ee966335da5adcc9695c86912776466074d3b1c4f0a572ce436",
    "transactionHash": "0x647446bc9905b8b3cc0bedda8b2e4c290798b2f0d882449621d14f679b6d6e64",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14861829,
        "transactionHash": "0x647446bc9905b8b3cc0bedda8b2e4c290798b2f0d882449621d14f679b6d6e64",
        "address": "0x23c1c427b1FDBe271eb715B080AB2C92F1d4B5C0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a68480a789c5964c09f1c6d68bf2c78028945a0c",
          "0x000000000000000000000000fd484a99d21ca118f22871134f467b1ca3f842aa"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x5023b754fb0e3ee966335da5adcc9695c86912776466074d3b1c4f0a572ce436"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14861829,
        "transactionHash": "0x647446bc9905b8b3cc0bedda8b2e4c290798b2f0d882449621d14f679b6d6e64",
        "address": "0x457901AC17450b6448F85ccbD362aF10910634B4",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a68480a789c5964c09f1c6d68bf2c78028945a0c",
          "0x000000000000000000000000fd484a99d21ca118f22871134f467b1ca3f842aa"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x5023b754fb0e3ee966335da5adcc9695c86912776466074d3b1c4f0a572ce436"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14861829,
        "transactionHash": "0x647446bc9905b8b3cc0bedda8b2e4c290798b2f0d882449621d14f679b6d6e64",
        "address": "0xA68480a789c5964C09f1c6D68BF2C78028945A0c",
        "topics": [
          "0xef28986cbeea1cfa825493dd6fbd7516f7a3c29e5768fe75301d23055a3ea1bc"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002386f26fc10000",
        "logIndex": 0,
        "blockHash": "0x5023b754fb0e3ee966335da5adcc9695c86912776466074d3b1c4f0a572ce436"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14861829,
        "transactionHash": "0x647446bc9905b8b3cc0bedda8b2e4c290798b2f0d882449621d14f679b6d6e64",
        "address": "0xA68480a789c5964C09f1c6D68BF2C78028945A0c",
        "topics": [
          "0x5a87dbe22e27a84149d288703849709529ac46ee9095f32ec6d21ca85b6edb27"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002386f26fc10000",
        "logIndex": 0,
        "blockHash": "0x5023b754fb0e3ee966335da5adcc9695c86912776466074d3b1c4f0a572ce436"
      }
    ],
    "blockNumber": 14861829,
    "cumulativeGasUsed": "4026672",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x23c1c427b1FDBe271eb715B080AB2C92F1d4B5C0",
    "0x457901AC17450b6448F85ccbD362aF10910634B4",
    "0xFD484A99d21CA118f22871134f467B1ca3F842Aa",
    "0x9893AFB20987973bFbA9469EA7B288A9827c99cb",
    "10000000000000000",
    "10000000000000000"
  ],
  "solcInputHash": "0e343dabaf86f1433359bcaf3343f5ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVBase\",\"name\":\"_vBase\",\"type\":\"address\"},{\"internalType\":\"contract IVQuote\",\"name\":\"_vQuote\",\"type\":\"address\"},{\"internalType\":\"contract ICryptoSwap\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"contract IClearingHouse\",\"name\":\"_clearingHouse\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_insuranceFee\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_perpTradingFee\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__AbsInputTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__DivInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\"}],\"name\":\"PRBMathSD59x18__DivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__MulInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\"}],\"name\":\"PRBMathSD59x18__MulOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Perpetual_AttemptReducePosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Perpetual_ExcessivePriceImpact\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"fee\",\"type\":\"int256\"}],\"name\":\"Perpetual_InsuranceFeeExcessive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"fee\",\"type\":\"int256\"}],\"name\":\"Perpetual_InsuranceFeeInsufficient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Perpetual_LPOpenPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Perpetual_LPWithdrawExceedsBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"Perpetual_MarketBalanceTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Perpetual_MarketEqualFees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Perpetual_NoOpenPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Perpetual_ProposedAmountExceedsMaxMarketPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Perpetual_ProposedAmountExceedsPositionSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Perpetual_SenderNotClearingHouse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Perpetual_SenderNotClearingHouseOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"fee\",\"type\":\"int256\"}],\"name\":\"Perpetual_TradingFeeExcessive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"fee\",\"type\":\"int256\"}],\"name\":\"Perpetual_TradingFeeInsufficient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"Perpetual_VirtualTokenApprovalConstructor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paramIndex\",\"type\":\"uint256\"}],\"name\":\"Perpetual_ZeroAddressConstructor\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vBaseAmount\",\"type\":\"uint256\"}],\"name\":\"DustGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cumulativeFundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingRate\",\"type\":\"int256\"}],\"name\":\"FundingRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newInsuranceFee\",\"type\":\"int256\"}],\"name\":\"InsuranceFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newTradingFee\",\"type\":\"int256\"}],\"name\":\"TradingFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newOracleTwap\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newMarketTwap\",\"type\":\"int256\"}],\"name\":\"TwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"clearingHouse\",\"outputs\":[{\"internalType\":\"contract IClearingHouse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum LibPerpetual.Side\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"extendPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"openNotional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"positionSize\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradingFees\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"timeOfLastTrade\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeOfLastTwapUpdate\",\"type\":\"uint128\"},{\"internalType\":\"int256\",\"name\":\"cumFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"blockStartPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"totalTradingFeesGrowth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidityProvided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBaseFeesGrowth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalQuoteFeesGrowth\",\"type\":\"uint256\"}],\"internalType\":\"struct LibPerpetual.GlobalPosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInsuranceFee\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpFundingPayments\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"upcomingFundingPayment\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"openNotional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"positionSize\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cumFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTradingFeesGrowth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBaseFeesGrowth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalQuoteFeesGrowth\",\"type\":\"uint256\"}],\"internalType\":\"struct LibPerpetual.LiquidityProviderPosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpPositionAfterWithdrawal\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"openNotional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"positionSize\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cumFundingRate\",\"type\":\"int256\"}],\"internalType\":\"struct LibPerpetual.TraderPosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpTradingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingFeesEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpUnrealizedPnL\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketTwap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleTwap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLiquidityProvided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTraderFundingPayments\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"upcomingFundingPayment\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTraderPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"openNotional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"positionSize\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cumFundingRate\",\"type\":\"int256\"}],\"internalType\":\"struct LibPerpetual.TraderPosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTraderUnrealizedPnL\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradingFee\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"contract ICryptoSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wadAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLpAmount\",\"type\":\"uint256\"}],\"name\":\"provideLiquidity\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"tradingFees\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"reducePosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"vQuoteProceeds\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"vBaseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"profit\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmountToRemove\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"minVTokenAmounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"proposedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"profit\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"reductionRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"newInsuranceFee\",\"type\":\"int256\"}],\"name\":\"setInsuranceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"newTradingFee\",\"type\":\"int256\"}],\"name\":\"setTradingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"settleLp\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"fundingPayments\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"settleTrader\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"fundingPayments\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBase\",\"outputs\":[{\"internalType\":\"contract IVBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vQuote\",\"outputs\":[{\"internalType\":\"contract IVQuote\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DustGenerated(uint256)\":{\"params\":{\"vBaseAmount\":\"Amount of dust\"}},\"FundingRateUpdated(int256,int256)\":{\"params\":{\"cumulativeFundingRate\":\"Cumulative sum of all funding rate updates\",\"fundingRate\":\"Latest fundingRate update\"}},\"InsuranceFeeChanged(int256)\":{\"params\":{\"newInsuranceFee\":\"New value of insurance fee\"}},\"Log(string)\":{\"params\":{\"errorMessage\":\"Return error message\"}},\"TradingFeeChanged(int256)\":{\"params\":{\"newTradingFee\":\"New value of trading fee\"}},\"TwapUpdated(int256,int256)\":{\"params\":{\"newMarketTwap\":\"Latest market Time-weighted-average-price\",\"newOracleTwap\":\"Latest oracle Time-weighted-average-price\"}}},\"kind\":\"dev\",\"methods\":{\"extendPosition(address,uint256,uint8,uint256)\":{\"params\":{\"account\":\"Address of the trader\",\"amount\":\"to be sold, in vQuote (if long) or vBase (if short)\",\"direction\":\"Long or Short\",\"minAmount\":\"Minimum amount received back, in vBase (if long) or vQuote (if short)\"},\"returns\":{\"openNotional\":\"Additional quote asset / liabilities accrued\",\"positionSize\":\"Additional base asset / liabilities accrued\",\"tradingFees\":\"Settled funding payments & Trading\"}},\"getGlobalPosition()\":{\"returns\":{\"_0\":\"Global position\"}},\"getInsuranceFee()\":{\"returns\":{\"_0\":\"insuranceFee\"}},\"getLpFundingPayments(address)\":{\"params\":{\"account\":\"Liquidity Provider\"},\"returns\":{\"upcomingFundingPayment\":\"Funding payment. 18 decimals\"}},\"getLpPosition(address)\":{\"params\":{\"account\":\"Address to get the LP position from\"},\"returns\":{\"_0\":\"Liquidity Provider position\"}},\"getLpPositionAfterWithdrawal(address)\":{\"params\":{\"account\":\"Liquidity Provider\"},\"returns\":{\"_0\":\"(Active) Liquidity Provider position\"}},\"getLpTradingFees(address)\":{\"params\":{\"account\":\"Liquidity Provider\"},\"returns\":{\"tradingFeesEarned\":\"Trading fees earned by the Liquidity Provider. 18 decimals\"}},\"getLpUnrealizedPnL(address)\":{\"params\":{\"account\":\"Liquidity Provider\"},\"returns\":{\"pnl\":\"Unrealized profit and loss. 18 decimals\"}},\"getMarketTwap()\":{\"returns\":{\"_0\":\"market twap. 18 decimals\"}},\"getOracleTwap()\":{\"returns\":{\"_0\":\"oracle twap. 18 decimals\"}},\"getTotalLiquidityProvided()\":{\"returns\":{\"_0\":\"market twap. 18 decimals\"}},\"getTraderFundingPayments(address)\":{\"params\":{\"account\":\"Trader\"},\"returns\":{\"upcomingFundingPayment\":\"Funding payment. 18 decimals\"}},\"getTraderPosition(address)\":{\"params\":{\"account\":\"Address to get the trading position from\"},\"returns\":{\"_0\":\"Trader position\"}},\"getTraderUnrealizedPnL(address)\":{\"params\":{\"account\":\"Trader\"},\"returns\":{\"pnl\":\"Unrealized profit and loss. 18 decimals\"}},\"getTradingFee()\":{\"returns\":{\"_0\":\"tradingFee\"}},\"indexPrice()\":{\"returns\":{\"_0\":\"Index price\"}},\"marketPrice()\":{\"returns\":{\"_0\":\"lastPrice Last traded price\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"provideLiquidity(address,uint256,uint256)\":{\"params\":{\"account\":\"Liquidity provider\",\"minLpAmount\":\"Minimum amount of Lp tokens minted. 18 decimals\",\"wadAmount\":\"Amount of vQuote provided. 18 decimals\"},\"returns\":{\"tradingFees\":\"Generated profit generated from trading fees\"}},\"reducePosition(address,uint256,uint256)\":{\"params\":{\"account\":\"Trader account to close position for.\",\"minAmount\":\"Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\",\"proposedAmount\":\"Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\"},\"returns\":{\"profit\":\"Profit realized\",\"vBaseAmount\":\"Position size reduction\",\"vQuoteProceeds\":\"Realized quote proceeds from closing the position\"}},\"removeLiquidity(address,uint256,uint256[2],uint256,uint256)\":{\"params\":{\"account\":\"Account of the LP to remove liquidity from\",\"liquidityAmountToRemove\":\"Amount of liquidity to be removed from the pool. 18 decimals\",\"minAmount\":\"Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\",\"minVTokenAmounts\":\"Minimum amount of virtual tokens [vQuote, vBase] withdrawn from the curve pool. 18 decimals\",\"proposedAmount\":\"Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\"},\"returns\":{\"profit\":\"Profit realized\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMathSD59x18__AbsInputTooSmall()\":[{\"notice\":\"Emitted when the input is MIN_SD59x18.\"}],\"PRBMathSD59x18__DivInputTooSmall()\":[{\"notice\":\"Emitted when one of the inputs is MIN_SD59x18.\"}],\"PRBMathSD59x18__DivOverflow(uint256)\":[{\"notice\":\"Emitted when one of the intermediary unsigned results overflows SD59x18.\"}],\"PRBMathSD59x18__MulInputTooSmall()\":[{\"notice\":\"Emitted when one of the inputs is MIN_SD59x18.\"}],\"PRBMathSD59x18__MulOverflow(uint256)\":[{\"notice\":\"Emitted when the intermediary absolute result overflows SD59x18.\"}],\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"Perpetual_AttemptReducePosition()\":[{\"notice\":\"Emitted when the user attempts to reduce their position using extendPosition\"}],\"Perpetual_ExcessivePriceImpact()\":[{\"notice\":\"Emitted when the price impact of a position is too high\"}],\"Perpetual_InsuranceFeeExcessive(int256)\":[{\"notice\":\"Emitted when the proposed insurance fee is excessive\"}],\"Perpetual_InsuranceFeeInsufficient(int256)\":[{\"notice\":\"Emitted when the proposed insurance fee is insufficient\"}],\"Perpetual_LPOpenPosition()\":[{\"notice\":\"Emitted when the liquidity provider has an open position\"}],\"Perpetual_LPWithdrawExceedsBalance()\":[{\"notice\":\"Emitted when the user attempts to withdraw more liquidity than they have deposited\"}],\"Perpetual_MarketBalanceTooLow(uint256)\":[{\"notice\":\"Emitted when a token balance of the market is lte 0\"}],\"Perpetual_MarketEqualFees()\":[{\"notice\":\"Emitted when market mid fee does not equal out fee\"}],\"Perpetual_NoOpenPosition()\":[{\"notice\":\"Emitted when the user does not have an open position\"}],\"Perpetual_ProposedAmountExceedsMaxMarketPrice()\":[{\"notice\":\"Emitted when proposed amount is greater than maxVQuoteAmount\"}],\"Perpetual_ProposedAmountExceedsPositionSize()\":[{\"notice\":\"Emitted when proposed amount is greater than position size\"}],\"Perpetual_SenderNotClearingHouse()\":[{\"notice\":\"Emitted when the sender is not the clearing house\"}],\"Perpetual_SenderNotClearingHouseOwner()\":[{\"notice\":\"Emitted when the sender is not the clearing house owner\"}],\"Perpetual_TradingFeeExcessive(int256)\":[{\"notice\":\"Emitted when the proposed trading fee is excessive\"}],\"Perpetual_TradingFeeInsufficient(int256)\":[{\"notice\":\"Emitted when the proposed trading fee is insufficient\"}],\"Perpetual_VirtualTokenApprovalConstructor(uint256)\":[{\"notice\":\"Emitted when the constructor fails to give approval of a virtual token to the market\"}],\"Perpetual_ZeroAddressConstructor(uint256)\":[{\"notice\":\"Emitted when the zero address is provided as a parameter in the constructor\"}]},\"events\":{\"DustGenerated(uint256)\":{\"notice\":\"Emitted when (base) dust is generated\"},\"FundingRateUpdated(int256,int256)\":{\"notice\":\"Emitted when funding rate is updated\"},\"InsuranceFeeChanged(int256)\":{\"notice\":\"Emitted when insuranceFee is changed\"},\"Log(string)\":{\"notice\":\"Emitted when swap with cryptoswap pool fails\"},\"TradingFeeChanged(int256)\":{\"notice\":\"Emitted when tradingFee is changed\"},\"TwapUpdated(int256,int256)\":{\"notice\":\"Emitted when twap is updated\"}},\"kind\":\"user\",\"methods\":{\"clearingHouse()\":{\"notice\":\"Clearing House contract\"},\"extendPosition(address,uint256,uint8,uint256)\":{\"notice\":\"Open or increase a position, either long or short\"},\"getGlobalPosition()\":{\"notice\":\"Get global market position\"},\"getInsuranceFee()\":{\"notice\":\"Get the insurance fee of the market (the more volatile the market, the large the insurance fee)\"},\"getLpFundingPayments(address)\":{\"notice\":\"Get the approximate funding payments for a Liquidity Provider\"},\"getLpPosition(address)\":{\"notice\":\"Get the position of a liquidity provider\"},\"getLpPositionAfterWithdrawal(address)\":{\"notice\":\"Get the (active) position of a liquidity provider after withdrawing liquidity\"},\"getLpTradingFees(address)\":{\"notice\":\"Get the trading fees earned by a Liquidity Provider\"},\"getLpUnrealizedPnL(address)\":{\"notice\":\"Get the unrealized profit and Loss of a Liquidity Provider\"},\"getMarketTwap()\":{\"notice\":\"Get the market Time-weighted-average-price\"},\"getOracleTwap()\":{\"notice\":\"Get the oracle Time-weighted-average-price\"},\"getTotalLiquidityProvided()\":{\"notice\":\"Get the market Total Liquidity provided to the Crypto Swap pool\"},\"getTraderFundingPayments(address)\":{\"notice\":\"Get the approximate funding payments for a trader\"},\"getTraderPosition(address)\":{\"notice\":\"Get the position of a trader\"},\"getTraderUnrealizedPnL(address)\":{\"notice\":\"Get the unrealized profit and Loss of a trader\"},\"getTradingFee()\":{\"notice\":\"Get the trading fee of the market\"},\"indexPrice()\":{\"notice\":\"Return the current off-chain exchange rate for vBase/vQuote\"},\"market()\":{\"notice\":\"Curve CryptoSwap pool\"},\"marketPrice()\":{\"notice\":\"Return the last traded price (used for TWAP)\"},\"pause()\":{\"notice\":\"Pause the contract\"},\"provideLiquidity(address,uint256,uint256)\":{\"notice\":\"Provide liquidity to the pool\"},\"reducePosition(address,uint256,uint256)\":{\"notice\":\"Closes position from account holder\"},\"removeLiquidity(address,uint256,uint256[2],uint256,uint256)\":{\"notice\":\"Remove liquidity from the pool\"},\"unpause()\":{\"notice\":\"Unpause the contract\"},\"vBase()\":{\"notice\":\"vBase token (traded on CryptoSwap pool)\"},\"vQuote()\":{\"notice\":\"vQuote token (traded on CryptoSwap pool)\"}},\"notice\":\"Handles all the trading logic. Interact with the CryptoSwap pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Perpetual.sol\":\"Perpetual\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x6881efb8fa7b41a7a7c2e6e5b31f0f19d0735a6485f2912f8db5802546aeaf16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x47c0131bd8a972c31596958aa86752ea18d60e33f1cd94d412b9e29fd6ab25a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\"},\"contracts/Perpetual.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// contracts\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n// interfaces\\nimport {IPerpetual} from \\\"./interfaces/IPerpetual.sol\\\";\\nimport {IVBase} from \\\"./interfaces/IVBase.sol\\\";\\nimport {IVQuote} from \\\"./interfaces/IVQuote.sol\\\";\\nimport {ICryptoSwap} from \\\"./interfaces/ICryptoSwap.sol\\\";\\nimport {IClearingHouse} from \\\"./interfaces/IClearingHouse.sol\\\";\\n\\n// libraries\\nimport {LibMath} from \\\"./lib/LibMath.sol\\\";\\nimport {LibPerpetual} from \\\"./lib/LibPerpetual.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @notice Handles all the trading logic. Interact with the CryptoSwap pool\\ncontract Perpetual is IPerpetual, Pausable {\\n    using LibMath for int256;\\n    using LibMath for uint256;\\n\\n    // parameterization\\n    uint256 internal constant VQUOTE_INDEX = 0; // index of quote asset in curve pool\\n    uint256 internal constant VBASE_INDEX = 1; // index of base asset in curve pool\\n    uint256 internal constant TWAP_FREQUENCY = 15 minutes; // period over which twap is calculated\\n    int256 internal constant SENSITIVITY = 1e18; // funding rate sensitivity to price deviations\\n    int256 internal constant MAX_PRICE_DEVIATION = 5e16; // max price change per block\\n    uint256 internal constant CURVE_TRADING_FEE_PRECISION = 1e10; // curve trading fee precision\\n\\n    int256 internal tradingFee; // fee charged for each trade on the notional amount\\n    int256 internal insuranceFee; // paid on dollar value of an opened position (used in ClearingHouse)\\n\\n    // dependencies\\n\\n    /// @notice vBase token (traded on CryptoSwap pool)\\n    IVBase public override vBase;\\n\\n    /// @notice vQuote token (traded on CryptoSwap pool)\\n    IVQuote public override vQuote;\\n\\n    /// @notice Clearing House contract\\n    IClearingHouse public override clearingHouse;\\n\\n    /// @notice Curve CryptoSwap pool\\n    ICryptoSwap public override market;\\n\\n    // global state\\n    LibPerpetual.GlobalPosition internal globalPosition;\\n\\n    int256 internal oracleCumulativeAmount;\\n    int256 internal oracleCumulativeAmountAtBeginningOfPeriod;\\n    int256 internal oracleTwap;\\n\\n    int256 internal marketCumulativeAmount;\\n    // slither-disable-next-line similar-names\\n    int256 internal marketCumulativeAmountAtBeginningOfPeriod;\\n    int256 internal marketTwap;\\n\\n    // user state\\n    mapping(address => LibPerpetual.TraderPosition) internal traderPosition;\\n    mapping(address => LibPerpetual.LiquidityProviderPosition) internal lpPosition;\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when twap is updated\\n    /// @param newOracleTwap Latest oracle Time-weighted-average-price\\n    /// @param newMarketTwap Latest market Time-weighted-average-price\\n    event TwapUpdated(int256 newOracleTwap, int256 newMarketTwap);\\n\\n    /// @notice Emitted when funding rate is updated\\n    /// @param cumulativeFundingRate Cumulative sum of all funding rate updates\\n    /// @param fundingRate Latest fundingRate update\\n    event FundingRateUpdated(int256 cumulativeFundingRate, int256 fundingRate);\\n\\n    /// @notice Emitted when swap with cryptoswap pool fails\\n    /// @param errorMessage Return error message\\n    event Log(string errorMessage);\\n\\n    /// @notice Emitted when (base) dust is generated\\n    /// @param vBaseAmount Amount of dust\\n    event DustGenerated(uint256 vBaseAmount);\\n\\n    /// @notice Emitted when insuranceFee is changed\\n    /// @param newInsuranceFee New value of insurance fee\\n    event InsuranceFeeChanged(int256 newInsuranceFee);\\n\\n    /// @notice Emitted when tradingFee is changed\\n    /// @param newTradingFee New value of trading fee\\n    event TradingFeeChanged(int256 newTradingFee);\\n\\n    constructor(\\n        IVBase _vBase,\\n        IVQuote _vQuote,\\n        ICryptoSwap _market,\\n        IClearingHouse _clearingHouse,\\n        int256 _insuranceFee,\\n        int256 _perpTradingFee\\n    ) {\\n        if (address(_vBase) == address(0)) revert Perpetual_ZeroAddressConstructor(0);\\n        if (address(_vQuote) == address(0)) revert Perpetual_ZeroAddressConstructor(1);\\n        if (address(_market) == address(0)) revert Perpetual_ZeroAddressConstructor(2);\\n        if (address(_clearingHouse) == address(0)) revert Perpetual_ZeroAddressConstructor(3);\\n\\n        vBase = _vBase;\\n        vQuote = _vQuote;\\n        market = _market;\\n        clearingHouse = _clearingHouse;\\n\\n        // approve all future transfers between Perpetual and market (curve pool)\\n        if (!vBase.approve(address(_market), type(uint256).max))\\n            revert Perpetual_VirtualTokenApprovalConstructor(VBASE_INDEX);\\n        if (!vQuote.approve(address(_market), type(uint256).max))\\n            revert Perpetual_VirtualTokenApprovalConstructor(VQUOTE_INDEX);\\n\\n        // initialize global state\\n        _initGlobalState(_vBase.getIndexPrice(), _market.last_prices().toInt256());\\n\\n        // set initial parameter value for the market\\n        setInsuranceFee(_insuranceFee);\\n        setTradingFee(_perpTradingFee);\\n\\n        if (market.mid_fee() != market.out_fee()) revert Perpetual_MarketEqualFees();\\n    }\\n\\n    modifier onlyClearingHouse() {\\n        if (msg.sender != address(clearingHouse)) revert Perpetual_SenderNotClearingHouse();\\n        _;\\n    }\\n\\n    // the owner of the market is the same owner as ClearingHouse\\n    modifier onlyClearingHouseOwner() {\\n        if (msg.sender != clearingHouse.getOwner()) revert Perpetual_SenderNotClearingHouseOwner();\\n        _;\\n    }\\n\\n    /* ****************** */\\n    /*   Trader flow      */\\n    /* ****************** */\\n\\n    /// @notice Open or increase a position, either long or short\\n    /// @param account Address of the trader\\n    /// @param amount to be sold, in vQuote (if long) or vBase (if short)\\n    /// @param direction Long or Short\\n    /// @param minAmount Minimum amount received back, in vBase (if long) or vQuote (if short)\\n    /// @return openNotional Additional quote asset / liabilities accrued\\n    /// @return positionSize Additional base asset / liabilities accrued\\n    /// @return tradingFees Settled funding payments & Trading\\n    function extendPosition(\\n        address account,\\n        uint256 amount,\\n        LibPerpetual.Side direction,\\n        uint256 minAmount\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        onlyClearingHouse\\n        returns (\\n            int256 openNotional,\\n            int256 positionSize,\\n            int256 tradingFees\\n        )\\n    {\\n        /*\\n            if direction = LONG\\n\\n                trader goes long EUR\\n                trader accrues openNotional debt\\n                trader receives positionSize assets\\n\\n                openNotional = vQuote traded to market    ( < 0)\\n                positionSize = vBase received from market ( > 0)\\n\\n            else direction = SHORT\\n\\n                trader goes short EUR\\n                trader receives openNotional assets\\n                trader accrues positionSize debt\\n\\n                openNotional = vQuote received from market ( > 0)\\n                positionSize = vBase traded to market      ( < 0)\\n\\n        */\\n        LibPerpetual.TraderPosition storage trader = traderPosition[account];\\n        bool isLong = direction == LibPerpetual.Side.Long;\\n\\n        // make sure trader doesn't try to use `extendPosition` to reduce a position\\n        // to skip the settlement of due funding payments\\n        if (\\n            (isLong && traderPosition[account].positionSize < 0) ||\\n            (!isLong && traderPosition[account].positionSize > 0)\\n        ) revert Perpetual_AttemptReducePosition();\\n\\n        // open position\\n        (openNotional, positionSize) = _extendPosition(amount, isLong, minAmount);\\n\\n        // check max deviation\\n        if (!_checkPriceDeviation(marketPrice().toInt256(), globalPosition.blockStartPrice))\\n            revert Perpetual_ExcessivePriceImpact();\\n\\n        // update position\\n        tradingFees = -_chargeQuoteFees(openNotional);\\n        trader.openNotional += openNotional;\\n        trader.positionSize += positionSize;\\n\\n        return (openNotional, positionSize, tradingFees);\\n    }\\n\\n    /// @notice Closes position from account holder\\n    /// @param account Trader account to close position for.\\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\\n    /// @param minAmount Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\\n    /// @return vQuoteProceeds Realized quote proceeds from closing the position\\n    /// @return vBaseAmount Position size reduction\\n    /// @return profit Profit realized\\n    function reducePosition(\\n        address account,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        onlyClearingHouse\\n        returns (\\n            int256 vQuoteProceeds,\\n            int256 vBaseAmount,\\n            int256 profit\\n        )\\n    {\\n        /*\\n        after opening the position:\\n\\n            trader has long position:\\n                openNotional = vQuote traded   to market   ( < 0)\\n                positionSize = vBase  received from market ( > 0)\\n            trader has short position\\n                openNotional = vQuote received from market ( > 0)\\n                positionSize = vBase  traded   to market   ( < 0)\\n\\n        to close the position:\\n\\n            trader has long position:\\n                @proposedAmount := amount of vBase used to reduce the position (must be below user.positionSize)\\n                => User trades the vBase tokens with the curve pool for vQuote tokens\\n\\n            trader has short position:\\n                @proposedAmount := amount of vQuote required to repay the vBase debt (must be below 1.5 x market value of user.positionSize)\\n                => User incurred vBase debt when opening a position and must now trade enough\\n                  vQuote with the curve pool to repay his vBase debt in full.\\n                => Remaining balances can be traded with the market for vQuote.\\n\\n                @audit Note that this mechanism can be exploited by inserting a large value here, since traders\\n                will have to pay transaction fees anyways (on the curve pool). We set a limit of 1.5 x market value in _checkProposedAmount()\\n        */\\n        LibPerpetual.TraderPosition storage trader = traderPosition[account];\\n        if (trader.openNotional == 0 && trader.positionSize == 0) revert Perpetual_NoOpenPosition();\\n\\n        int256 pnl;\\n        (vBaseAmount, vQuoteProceeds, pnl) = _reducePosition(trader, proposedAmount, minAmount);\\n\\n        // check max deviation\\n        if (!_checkPriceDeviation(marketPrice().toInt256(), globalPosition.blockStartPrice))\\n            revert Perpetual_ExcessivePriceImpact();\\n\\n        // adjust trader position\\n        int256 quoteOnlyFees = _chargeQuoteFees(vQuoteProceeds);\\n        profit = pnl - quoteOnlyFees; // pnl + fundingPayments - quoteOnlyFees\\n\\n        trader.openNotional += vQuoteProceeds;\\n        trader.positionSize += vBaseAmount;\\n\\n        // if position has been closed entirely, delete it from the state\\n        if (trader.positionSize == 0) {\\n            delete traderPosition[account];\\n        }\\n\\n        return (vQuoteProceeds, vBaseAmount, profit);\\n    }\\n\\n    function settleTrader(address account)\\n        external\\n        override\\n        onlyClearingHouse\\n        whenNotPaused\\n        returns (int256 fundingPayments)\\n    {\\n        LibPerpetual.TraderPosition storage trader = traderPosition[account];\\n        LibPerpetual.GlobalPosition storage global = globalPosition;\\n\\n        // update global state\\n        _updateTwapAndFundingRate();\\n\\n        // apply funding rate on existing positionSize\\n        if (trader.positionSize != 0) {\\n            // settle trader funding rate\\n            fundingPayments = _getFundingPayments(\\n                trader.positionSize > 0,\\n                trader.cumFundingRate,\\n                global.cumFundingRate,\\n                trader.positionSize.abs()\\n            );\\n        }\\n\\n        trader.cumFundingRate = global.cumFundingRate;\\n\\n        return fundingPayments;\\n    }\\n\\n    /* ******************************/\\n    /*     Liquidity provider flow  */\\n    /* ******************************/\\n\\n    /// @notice Provide liquidity to the pool\\n    /// @param account Liquidity provider\\n    /// @param wadAmount Amount of vQuote provided. 18 decimals\\n    /// @param minLpAmount Minimum amount of Lp tokens minted. 18 decimals\\n    /// @return tradingFees Generated profit generated from trading fees\\n    function provideLiquidity(\\n        address account,\\n        uint256 wadAmount,\\n        uint256 minLpAmount\\n    ) external override whenNotPaused onlyClearingHouse returns (int256 tradingFees) {\\n        _updateTwapAndFundingRate();\\n\\n        // reflect the added liquidity on the LP position\\n        LibPerpetual.LiquidityProviderPosition storage lp = lpPosition[account];\\n        LibPerpetual.GlobalPosition storage global = globalPosition;\\n\\n        // update when has provided liquidity before\\n        if (lp.liquidityBalance != 0) {\\n            tradingFees = _settleLpTradingFees(lp, global).toInt256();\\n\\n            // With previous liquidity providers, we must update the `totalBaseFeesGrowth` & `totalQuoteFeesGrowth` parameter\\n            // However, we do not account that for `older` liquidity we must still burn a larger share of the tokens\\n            // SOLUTION: Burn fees earned so far.\\n            (int256 baseFeesEarned, int256 quoteFeesEarned) = _getVirtualTokensEarnedAsCurveTradingFees(lp, global);\\n            lp.openNotional -= quoteFeesEarned;\\n            lp.positionSize -= baseFeesEarned;\\n        }\\n\\n        uint256 basePrice;\\n        if (getTotalLiquidityProvided() == 0) {\\n            basePrice = marketPrice();\\n        } else {\\n            basePrice = market.balances(0).wadDiv(market.balances(1));\\n        }\\n        uint256 baseAmount = wadAmount.wadDiv(basePrice); // vQuote / vBase/vQuote  <=> 1 / 1.2 = 0.8\\n\\n        // supply liquidity to curve pool\\n        vQuote.mint(wadAmount);\\n        vBase.mint(baseAmount);\\n\\n        // Question: Should we compensate liquidity providers for the fee proportion in the pool (let them provider leveraged liquidity)\\n        // Answer: No, the relative difference of earlier and later liquidity providers do not matter. We only care for the pnL of them.\\n        uint256 liquidity = market.add_liquidity([wadAmount, baseAmount], minLpAmount); //  first token in curve pool is vQuote & second token is vBase\\n\\n        // update state\\n        lp.openNotional -= wadAmount.toInt256();\\n        lp.positionSize -= baseAmount.toInt256();\\n        lp.cumFundingRate = globalPosition.cumFundingRate;\\n\\n        lp.totalTradingFeesGrowth = globalPosition.totalTradingFeesGrowth;\\n        lp.totalBaseFeesGrowth = globalPosition.totalBaseFeesGrowth;\\n        lp.totalQuoteFeesGrowth = globalPosition.totalQuoteFeesGrowth;\\n\\n        lp.cumFundingRate = globalPosition.cumFundingRate;\\n\\n        lp.liquidityBalance += liquidity;\\n\\n        global.totalLiquidityProvided += wadAmount;\\n    }\\n\\n    /// @notice Remove liquidity from the pool\\n    /// @param account Account of the LP to remove liquidity from\\n    /// @param liquidityAmountToRemove Amount of liquidity to be removed from the pool. 18 decimals\\n    /// @param minVTokenAmounts Minimum amount of virtual tokens [vQuote, vBase] withdrawn from the curve pool. 18 decimals\\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\\n    /// @param minAmount Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\\n    /// @return profit Profit realized\\n    function removeLiquidity(\\n        address account,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external override whenNotPaused onlyClearingHouse returns (int256 profit, uint256 reductionRatio) {\\n        LibPerpetual.LiquidityProviderPosition storage lp = lpPosition[account];\\n        LibPerpetual.GlobalPosition storage global = globalPosition;\\n\\n        _updateTwapAndFundingRate();\\n\\n        // slither-disable-next-line incorrect-equality\\n        if (liquidityAmountToRemove > lp.liquidityBalance) revert Perpetual_LPWithdrawExceedsBalance();\\n\\n        profit += _settleLpTradingFees(lp, global).toInt256();\\n        // remove liquidity from curve pool\\n        (uint256 quoteAmount, uint256 baseAmount) = _removeLiquidity(\\n            lp,\\n            global,\\n            liquidityAmountToRemove,\\n            minVTokenAmounts\\n        );\\n\\n        // settle previous active position\\n        reductionRatio = liquidityAmountToRemove.wadDiv(lp.liquidityBalance);\\n\\n        (int256 pnl, int256 quoteProceeds) = _settleLpPosition(\\n            LibPerpetual.TraderPosition({\\n                openNotional: quoteAmount.toInt256() + lp.openNotional.wadMul(reductionRatio.toInt256()),\\n                positionSize: baseAmount.toInt256() + lp.positionSize.wadMul(reductionRatio.toInt256()),\\n                cumFundingRate: 0\\n            }),\\n            proposedAmount,\\n            minAmount\\n        );\\n        int256 quoteOnlyFees = _chargeQuoteFees(quoteProceeds);\\n        profit += pnl - quoteOnlyFees;\\n\\n        // adjust balances to new position\\n        lp.openNotional += quoteAmount.toInt256();\\n        lp.positionSize += baseAmount.toInt256();\\n        lp.liquidityBalance -= liquidityAmountToRemove;\\n\\n        lp.cumFundingRate = global.cumFundingRate;\\n\\n        // if position has been closed entirely, delete it from the state\\n        // slither-disable-next-line incorrect-equality\\n        if (lp.liquidityBalance == 0) {\\n            delete lpPosition[account];\\n        }\\n\\n        // Question: How should we think about this parameter?\\n        global.totalLiquidityProvided -= quoteAmount;\\n    }\\n\\n    function settleLp(address account)\\n        external\\n        override\\n        whenNotPaused\\n        onlyClearingHouse\\n        returns (int256 fundingPayments)\\n    {\\n        LibPerpetual.LiquidityProviderPosition storage lp = lpPosition[account];\\n        LibPerpetual.GlobalPosition storage global = globalPosition;\\n\\n        // update global state\\n        _updateTwapAndFundingRate();\\n\\n        if (lp.liquidityBalance == 0) {\\n            return 0;\\n        }\\n\\n        // settle lp funding rate\\n        int256 virtualPositionSize = _getVBasePositionAfterVirtualWithdrawal(lp, global);\\n\\n        fundingPayments = _getFundingPayments(\\n            virtualPositionSize > 0,\\n            lp.cumFundingRate,\\n            global.cumFundingRate,\\n            virtualPositionSize.abs()\\n        );\\n\\n        lp.cumFundingRate = global.cumFundingRate;\\n\\n        return fundingPayments;\\n    }\\n\\n    ///// COMMON OPERATIONS \\\\\\\\\\\\\\\\\\\\\\n\\n    /// @notice Update Twap, Funding Rate and last traded price\\n    // TODO: combine functions\\n    function _updateTwapAndFundingRate() internal whenNotPaused {\\n        LibPerpetual.GlobalPosition storage global = globalPosition;\\n        uint256 currentTime = block.timestamp;\\n        uint256 timeOfLastTrade = uint256(global.timeOfLastTrade);\\n\\n        // Don't update the state more than once per block\\n        // slither-disable-next-line timestamp\\n        if (currentTime > timeOfLastTrade) {\\n            _recordMarketPrice();\\n            _updateTwap();\\n            _updateFundingRate();\\n        }\\n    }\\n\\n    /* ****************** */\\n    /*     Governance     */\\n    /* ****************** */\\n\\n    function setInsuranceFee(int256 newInsuranceFee) public override onlyClearingHouseOwner {\\n        if (newInsuranceFee < 1e15) revert Perpetual_InsuranceFeeInsufficient(newInsuranceFee);\\n        if (newInsuranceFee > 3e17) revert Perpetual_InsuranceFeeExcessive(newInsuranceFee);\\n\\n        insuranceFee = newInsuranceFee;\\n        emit InsuranceFeeChanged(newInsuranceFee);\\n    }\\n\\n    function setTradingFee(int256 newTradingFee) public override onlyClearingHouseOwner {\\n        if (newTradingFee < 1e15) revert Perpetual_TradingFeeInsufficient(newTradingFee);\\n        if (newTradingFee > 3e17) revert Perpetual_TradingFeeExcessive(newTradingFee);\\n\\n        tradingFee = newTradingFee;\\n        emit TradingFeeChanged(newTradingFee);\\n    }\\n\\n    /// @notice Pause the contract\\n    function pause() external override onlyClearingHouseOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause the contract\\n    function unpause() external override onlyClearingHouseOwner {\\n        _unpause();\\n    }\\n\\n    /* ****************** */\\n    /*   Global getter    */\\n    /* ****************** */\\n\\n    /// @notice Get global market position\\n    /// @return Global position\\n    function getGlobalPosition() external view override returns (LibPerpetual.GlobalPosition memory) {\\n        return globalPosition;\\n    }\\n\\n    /// @notice Return the current off-chain exchange rate for vBase/vQuote\\n    /// @return Index price\\n    function indexPrice() public view override returns (int256) {\\n        return vBase.getIndexPrice();\\n    }\\n\\n    /// @notice Return the last traded price (used for TWAP)\\n    /// @return lastPrice Last traded price\\n    function marketPrice() public view override returns (uint256) {\\n        return market.last_prices();\\n    }\\n\\n    /// @notice Get the oracle Time-weighted-average-price\\n    /// @return oracle twap. 18 decimals\\n    function getOracleTwap() public view override returns (int256) {\\n        return oracleTwap;\\n    }\\n\\n    /// @notice Get the market Time-weighted-average-price\\n    /// @return market twap. 18 decimals\\n    function getMarketTwap() public view override returns (int256) {\\n        return marketTwap;\\n    }\\n\\n    /// @notice Get the market Total Liquidity provided to the Crypto Swap pool\\n    /// @return market twap. 18 decimals\\n    function getTotalLiquidityProvided() public view override returns (uint256) {\\n        return IERC20Metadata(market.token()).totalSupply();\\n    }\\n\\n    /// @notice Get the insurance fee of the market (the more volatile the market, the large the insurance fee)\\n    /// @return insuranceFee\\n    function getInsuranceFee() external view override returns (int256) {\\n        return insuranceFee;\\n    }\\n\\n    /// @notice Get the trading fee of the market\\n    /// @return tradingFee\\n    function getTradingFee() external view override returns (int256) {\\n        return tradingFee;\\n    }\\n\\n    /* ****************** */\\n    /*   User getter      */\\n    /* ****************** */\\n\\n    // Trader\\n\\n    /// @notice Get the approximate funding payments for a trader\\n    /// @param account Trader\\n    /// @return upcomingFundingPayment Funding payment. 18 decimals\\n    function getTraderFundingPayments(address account) external view override returns (int256 upcomingFundingPayment) {\\n        LibPerpetual.TraderPosition memory trader = traderPosition[account];\\n        LibPerpetual.GlobalPosition memory global = globalPosition;\\n        bool isLong = trader.positionSize > 0;\\n\\n        return _getFundingPayments(isLong, trader.cumFundingRate, global.cumFundingRate, trader.positionSize.abs());\\n    }\\n\\n    /// @notice Get the unrealized profit and Loss of a trader\\n    /// @param account Trader\\n    /// @return pnl Unrealized profit and loss. 18 decimals\\n    function getTraderUnrealizedPnL(address account) external view override returns (int256 pnl) {\\n        LibPerpetual.TraderPosition memory trader = traderPosition[account];\\n        return _getUnrealizedPnL(trader);\\n    }\\n\\n    /// @notice Get the position of a trader\\n    /// @param account Address to get the trading position from\\n    /// @return Trader position\\n    function getTraderPosition(address account) external view override returns (LibPerpetual.TraderPosition memory) {\\n        return traderPosition[account];\\n    }\\n\\n    // LP\\n\\n    /// @notice Get the approximate funding payments for a Liquidity Provider\\n    /// @param account Liquidity Provider\\n    /// @return upcomingFundingPayment Funding payment. 18 decimals\\n    function getLpFundingPayments(address account) external view override returns (int256 upcomingFundingPayment) {\\n        LibPerpetual.LiquidityProviderPosition memory lp = lpPosition[account];\\n        LibPerpetual.GlobalPosition memory global = globalPosition;\\n        LibPerpetual.TraderPosition memory activeLpPosition = _getLpPositionAfterWithdrawal(lp, global);\\n\\n        bool isLong = activeLpPosition.positionSize > 0;\\n\\n        return\\n            _getFundingPayments(\\n                isLong,\\n                activeLpPosition.cumFundingRate,\\n                global.cumFundingRate,\\n                activeLpPosition.positionSize.abs()\\n            );\\n    }\\n\\n    /// @notice Get the trading fees earned by a Liquidity Provider\\n    /// @param account Liquidity Provider\\n    /// @return tradingFeesEarned Trading fees earned by the Liquidity Provider. 18 decimals\\n\\n    function getLpTradingFees(address account) external view override returns (uint256 tradingFeesEarned) {\\n        LibPerpetual.LiquidityProviderPosition memory lp = lpPosition[account];\\n        LibPerpetual.GlobalPosition memory global = globalPosition;\\n\\n        return _getLpTradingFees(lp, global);\\n    }\\n\\n    /// @notice Get the unrealized profit and Loss of a Liquidity Provider\\n    /// @param account Liquidity Provider\\n    /// @return pnl Unrealized profit and loss. 18 decimals\\n    function getLpUnrealizedPnL(address account) external view override returns (int256 pnl) {\\n        LibPerpetual.LiquidityProviderPosition memory lp = lpPosition[account];\\n        LibPerpetual.GlobalPosition memory global = globalPosition;\\n        uint256 tradingFeesEarned = _getLpTradingFees(lp, global);\\n\\n        LibPerpetual.TraderPosition memory activeLpPosition = _getLpPositionAfterWithdrawal(lp, global);\\n        int256 activePositionPnL = _getUnrealizedPnL(activeLpPosition);\\n\\n        return tradingFeesEarned.toInt256() + activePositionPnL;\\n    }\\n\\n    /// @notice Get the (active) position of a liquidity provider after withdrawing liquidity\\n    /// @param account Liquidity Provider\\n    /// @return (Active) Liquidity Provider position\\n    function getLpPositionAfterWithdrawal(address account)\\n        external\\n        view\\n        override\\n        returns (LibPerpetual.TraderPosition memory)\\n    {\\n        LibPerpetual.LiquidityProviderPosition memory lp = lpPosition[account];\\n        LibPerpetual.GlobalPosition memory global = globalPosition;\\n        return _getLpPositionAfterWithdrawal(lp, global);\\n    }\\n\\n    /// @notice Get the position of a liquidity provider\\n    /// @param account Address to get the LP position from\\n    /// @return Liquidity Provider position\\n    function getLpPosition(address account)\\n        external\\n        view\\n        override\\n        returns (LibPerpetual.LiquidityProviderPosition memory)\\n    {\\n        return lpPosition[account];\\n    }\\n\\n    /* ****************** */\\n    /*   Internal (Gov)   */\\n    /* ****************** */\\n\\n    function _initGlobalState(int256 lastChainlinkPrice, int256 lastMarketPrice) internal {\\n        // initialize twap\\n        oracleTwap = lastChainlinkPrice;\\n        marketTwap = lastMarketPrice;\\n\\n        // initialize funding\\n        globalPosition = LibPerpetual.GlobalPosition({\\n            timeOfLastTrade: uint128(block.timestamp),\\n            timeOfLastTwapUpdate: uint128(block.timestamp),\\n            cumFundingRate: 0,\\n            blockStartPrice: lastMarketPrice,\\n            totalTradingFeesGrowth: 0,\\n            totalLiquidityProvided: 0,\\n            totalBaseFeesGrowth: 0,\\n            totalQuoteFeesGrowth: 0\\n        });\\n    }\\n\\n    /* ****************** */\\n    /*  Internal (Trading) */\\n    /* ****************** */\\n\\n    function _extendPosition(\\n        uint256 amount,\\n        bool isLong,\\n        uint256 minAmount\\n    ) internal returns (int256 openNotional, int256 positionSize) {\\n        /*  if long:\\n                openNotional = vQuote traded   to market   (or \\\"- vQuote\\\")\\n                positionSize = vBase  received from market (or \\\"+ vBase\\\")\\n            if short:\\n                openNotional = vQuote received from market (or \\\"+ vQuote\\\")\\n                positionSize = vBase  traded   to market   (or \\\"- vBase\\\")\\n        */\\n        if (isLong) {\\n            openNotional = -amount.toInt256();\\n            positionSize = _quoteForBase(amount, minAmount).toInt256();\\n        } else {\\n            openNotional = _baseForQuote(amount, minAmount).toInt256();\\n            positionSize = -amount.toInt256();\\n        }\\n\\n        return (openNotional, positionSize);\\n    }\\n\\n    /// @dev Used both by traders closing their own positions and liquidators liquidating other people's positions\\n    /// @notice Profit is the sum of funding payments and the position PnL\\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\\n    /// @param minAmount Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\\n    function _reducePosition(\\n        LibPerpetual.TraderPosition memory user,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    )\\n        internal\\n        returns (\\n            int256 vBaseAmount,\\n            int256 vQuoteProceeds,\\n            int256 pnl\\n        )\\n    {\\n        bool isLong = user.positionSize > 0;\\n\\n        _checkProposedAmount(isLong, user.positionSize, proposedAmount);\\n\\n        // PnL of the position\\n        uint256 realizedReductionRatio;\\n        (vBaseAmount, vQuoteProceeds, realizedReductionRatio) = _reducePositionOnMarket(\\n            isLong,\\n            user.positionSize,\\n            proposedAmount,\\n            minAmount\\n        );\\n\\n        // take the realized reduction ratio when calculating the pnl\\n        int256 openNotionalToReduce = user.openNotional.wadMul(realizedReductionRatio.toInt256());\\n\\n        pnl = vQuoteProceeds + openNotionalToReduce;\\n    }\\n\\n    /// @notice Returns vBaseAmount and vQuoteProceeds to reflect how much the position has been reduced\\n    function _reducePositionOnMarket(\\n        bool isLong,\\n        int256 positionSize,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    )\\n        internal\\n        returns (\\n            int256 vBaseAmount,\\n            int256 vQuoteProceeds,\\n            uint256 realizedReductionRatio\\n        )\\n    {\\n        if (isLong) {\\n            uint256 amount = _baseForQuote(proposedAmount, minAmount);\\n\\n            vQuoteProceeds = amount.toInt256();\\n\\n            vBaseAmount = -(proposedAmount.toInt256());\\n\\n            realizedReductionRatio = proposedAmount.wadDiv(positionSize.abs().toUint256()); //  abs() in case of partial removing liquidity\\n        } else {\\n            uint256 positivePositionSize = (-positionSize).toUint256();\\n            uint256 vBaseProceeds = _quoteForBase(proposedAmount, minAmount);\\n\\n            /*\\n            Question: Why do we make up to two swap when closing a short position?\\n            Answer: We have to calculate the amount of quoteTokens needed\\n                    to close the position off-chain. (No exact-output-swap function).\\n                    Results can deviate from the expected amount.\\n\\n            Example:\\n                pay back 100 base debt (positionSize = -100)\\n\\n            1) calculate how much quote you have to sell to pay back 100 base debt (positionSize = -100)\\n                i.e. proposedAmount ~ 100 * EUR_USD ~ 110\\n\\n\\n            2) Swap 'proposedAmount' for 'baseTokensReceived' base tokens\\n\\n                Case I) baseTokensReceived > positionSize\\n\\n                    swap (baseTokensReceived - positionSize) for quoteTokens\\n\\n                        swap successful?\\n\\n                            Case I) yes, continue\\n\\n                            Case 2) no, donate (baseTokenReceived - positionSize)\\n\\n                Case II) baseTokensReceived < positionSize\\n\\n                    fail\\n\\n            */\\n            uint256 additionalProceeds = 0;\\n            uint256 baseRemaining = 0;\\n            if (vBaseProceeds > positivePositionSize) {\\n                baseRemaining = vBaseProceeds - positivePositionSize;\\n\\n                if (_canSellBase(baseRemaining)) {\\n                    // sell vBase tokens bought in excess\\n                    additionalProceeds = _baseForQuote(baseRemaining, 0);\\n                } else {\\n                    // dust vBase balance can not be sold\\n                    emit DustGenerated(baseRemaining);\\n                    _donate(baseRemaining);\\n                }\\n            }\\n\\n            vQuoteProceeds = -proposedAmount.toInt256() + additionalProceeds.toInt256();\\n\\n            // baseRemaining will be 0 if proposedAmount not more than what's needed to fully buy back short position\\n            vBaseAmount = (vBaseProceeds - baseRemaining).toInt256();\\n            realizedReductionRatio = vBaseAmount.toUint256().wadDiv(positivePositionSize);\\n        }\\n\\n        return (vBaseAmount, vQuoteProceeds, realizedReductionRatio);\\n    }\\n\\n    function _quoteForBase(uint256 quoteAmount, uint256 minAmount) internal returns (uint256 vBaseAdjusted) {\\n        // perform swap\\n\\n        // slither-disable-next-line unused-return\\n        vQuote.mint(quoteAmount);\\n        uint256 vBaseReceived = market.exchange(VQUOTE_INDEX, VBASE_INDEX, quoteAmount, minAmount);\\n        vBase.burn(vBaseReceived);\\n\\n        // adjust for fees\\n        uint256 fees = market.mid_fee(); // can be changed by curve governance, so better to to get it every time\\n        vBaseAdjusted = _compensateForCurveTradingFees(vBaseReceived, fees);\\n        uint256 feesGrowth = ((vBaseAdjusted * fees) / CURVE_TRADING_FEE_PRECISION);\\n        globalPosition.totalBaseFeesGrowth += feesGrowth.wadDiv(vBase.totalSupply());\\n    }\\n\\n    function _baseForQuote(uint256 baseAmount, uint256 minAmount) internal returns (uint256 vQuoteAdjusted) {\\n        // perform swap\\n\\n        // slither-disable-next-line unused-return\\n        vBase.mint(baseAmount);\\n        uint256 vQuoteReceived = market.exchange(VBASE_INDEX, VQUOTE_INDEX, baseAmount, minAmount);\\n        vQuote.burn(vQuoteReceived);\\n\\n        // adjust for fees\\n        uint256 fees = market.mid_fee(); // can be changed by curve governance, so better to to get it every time\\n        vQuoteAdjusted = _compensateForCurveTradingFees(vQuoteReceived, fees);\\n\\n        uint256 feesGrowth = ((vQuoteAdjusted * fees) / CURVE_TRADING_FEE_PRECISION);\\n        globalPosition.totalQuoteFeesGrowth += feesGrowth.wadDiv(vQuote.totalSupply()); // TODO: use totalSupply() vs balanceOf(CurvePool)\\n    }\\n\\n    /// @notice charge trading fee on notional amount\\n    function _chargeQuoteFees(int256 quoteProceeds) internal returns (int256) {\\n        int256 feesPayed = quoteProceeds.abs().wadMul(tradingFee);\\n        globalPosition.totalTradingFeesGrowth += feesPayed.toUint256().wadDiv(globalPosition.totalLiquidityProvided); // rate of return of this trade\\n\\n        return feesPayed;\\n    }\\n\\n    /* ****************** */\\n    /*  Internal (Liquidity) */\\n    /* ****************** */\\n\\n    function _removeLiquidity(\\n        LibPerpetual.LiquidityProviderPosition memory lp,\\n        LibPerpetual.GlobalPosition memory global,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] memory minVTokenAmounts\\n    ) internal returns (uint256 quoteAmount, uint256 baseAmount) {\\n        // remove liquidity\\n        uint256 vQuoteBalanceBefore = vQuote.balanceOf(address(this));\\n        uint256 vBaseBalanceBefore = vBase.balanceOf(address(this));\\n\\n        market.remove_liquidity(liquidityAmountToRemove, minVTokenAmounts);\\n\\n        if (vQuote.balanceOf(address(market)) <= 0) revert Perpetual_MarketBalanceTooLow(VQUOTE_INDEX);\\n        if (vBase.balanceOf(address(market)) <= 0) revert Perpetual_MarketBalanceTooLow(VBASE_INDEX);\\n\\n        uint256 vQuoteBalanceAfter = vQuote.balanceOf(address(this));\\n        uint256 vBaseBalanceAfter = vBase.balanceOf(address(this));\\n\\n        uint256 quoteAmountInclFees = vQuoteBalanceAfter - vQuoteBalanceBefore;\\n        uint256 baseAmountInclFees = vBaseBalanceAfter - vBaseBalanceBefore;\\n\\n        vQuote.burn(quoteAmountInclFees);\\n        vBase.burn(baseAmountInclFees);\\n\\n        // remove fee component from quoteAmount\\n        quoteAmount = quoteAmountInclFees.wadDiv(1e18 + global.totalQuoteFeesGrowth - lp.totalQuoteFeesGrowth);\\n        baseAmount = baseAmountInclFees.wadDiv(1e18 + global.totalBaseFeesGrowth - lp.totalBaseFeesGrowth);\\n    }\\n\\n    function _settleLpPosition(\\n        LibPerpetual.TraderPosition memory positionToClose,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) internal returns (int256 pnl, int256 vQuoteAmount) {\\n        int256 vBaseAmount;\\n\\n        (vBaseAmount, vQuoteAmount, pnl) = _reducePosition(positionToClose, proposedAmount, minAmount);\\n\\n        // check max deviation\\n        if (!_checkPriceDeviation(marketPrice().toInt256(), globalPosition.blockStartPrice))\\n            revert Perpetual_ExcessivePriceImpact();\\n\\n        int256 diff = positionToClose.positionSize + vBaseAmount;\\n\\n        if (diff < 0) revert Perpetual_LPOpenPosition();\\n    }\\n\\n    function _settleLpTradingFees(\\n        LibPerpetual.LiquidityProviderPosition storage lp,\\n        LibPerpetual.GlobalPosition storage global\\n    ) internal view returns (uint256 tradingFeesEarned) {\\n        // settle lp trading fees\\n        tradingFeesEarned = _getLpTradingFees(lp, global);\\n\\n        // reset lp.totalTradingFeesGrowth := trading fees index\\n        global.totalTradingFeesGrowth;\\n\\n        return tradingFeesEarned;\\n    }\\n\\n    /* ****************** */\\n    /*  Internal (TWAP) */\\n    /* ****************** */\\n    function _updateFundingRate() internal {\\n        LibPerpetual.GlobalPosition storage global = globalPosition;\\n        uint256 currentTime = block.timestamp;\\n\\n        int256 marketTWAP = getMarketTwap();\\n        int256 indexTWAP = getOracleTwap();\\n\\n        int256 currentTraderPremium = (marketTWAP - indexTWAP).wadDiv(indexTWAP);\\n        int256 timePassedSinceLastTrade = (currentTime - global.timeOfLastTrade).toInt256();\\n\\n        int256 fundingRate = (SENSITIVITY.wadMul(currentTraderPremium) * timePassedSinceLastTrade) / 1 days;\\n\\n        global.cumFundingRate += fundingRate;\\n        global.timeOfLastTrade = uint128(currentTime);\\n\\n        emit FundingRateUpdated(global.cumFundingRate, fundingRate);\\n    }\\n\\n    function _recordMarketPrice() internal {\\n        globalPosition.blockStartPrice = marketPrice().toInt256();\\n    }\\n\\n    function _updateTwap() internal {\\n        uint256 currentTime = block.timestamp;\\n        int256 timeElapsed = (currentTime - globalPosition.timeOfLastTrade).toInt256();\\n\\n        /*\\n            priceCumulative1 = priceCumulative0 + price1 * timeElapsed\\n        */\\n\\n        // will overflow in ~3000 years\\n        // update cumulative chainlink price feed\\n        int256 latestChainlinkPrice = indexPrice();\\n        oracleCumulativeAmount += latestChainlinkPrice * timeElapsed;\\n\\n        // update cumulative market price feed\\n        int256 latestMarketPrice = marketPrice().toInt256();\\n        marketCumulativeAmount += latestMarketPrice * timeElapsed;\\n\\n        uint256 timeElapsedSinceBeginningOfPeriod = block.timestamp - globalPosition.timeOfLastTwapUpdate;\\n\\n        // slither-disable-next-line timestamp\\n        if (timeElapsedSinceBeginningOfPeriod >= TWAP_FREQUENCY) {\\n            /*\\n                TWAP = (priceCumulative1 - priceCumulative0) / timeElapsed\\n            */\\n\\n            // calculate chainlink twap\\n            oracleTwap =\\n                (oracleCumulativeAmount - oracleCumulativeAmountAtBeginningOfPeriod) /\\n                timeElapsedSinceBeginningOfPeriod.toInt256();\\n\\n            // calculate market twap\\n            marketTwap =\\n                (marketCumulativeAmount - marketCumulativeAmountAtBeginningOfPeriod) /\\n                timeElapsedSinceBeginningOfPeriod.toInt256();\\n\\n            // reset cumulative amount and timestamp\\n            oracleCumulativeAmountAtBeginningOfPeriod = oracleCumulativeAmount;\\n            marketCumulativeAmountAtBeginningOfPeriod = marketCumulativeAmount;\\n            globalPosition.timeOfLastTwapUpdate = uint128(block.timestamp);\\n\\n            emit TwapUpdated(oracleTwap, marketTwap);\\n        }\\n    }\\n\\n    /************************** */\\n    /* Internal  (Misc)         */\\n    /************************** */\\n\\n    // @notice Donate base tokens (\\\"dust\\\") to governance\\n    function _donate(uint256 baseAmount) internal {\\n        traderPosition[address(clearingHouse)].positionSize += baseAmount.toInt256();\\n    }\\n\\n    /************************** */\\n    /* Internal Viewer (Trading) */\\n    /************************** */\\n\\n    function _checkProposedAmount(\\n        bool isLong,\\n        int256 positionSize,\\n        uint256 proposedAmount\\n    ) internal view {\\n        /*\\n        Question: Why do we have to make use the proposedAmount parameters in our function?\\n        Answer: There is no equivalent to an swapForExact function in the CryptoSwap contract.\\n                https://docs.uniswap.org/protocol/guides/swaps/single-swaps#exact-output-swaps\\n                This means we in case of someone closing a short position (positionSize < 0)\\n                we can not calculate in our contract how many quoteTokens we have to swap with\\n                the curve Pool to pay pack the debt. Instead this is done outside of the contract.\\n                (see: TEST_get_exactOutputSwap() for an typescript implementation of a binary search\\n                to find the correct input amount).\\n                We only verify inside of the contract that our proposed amount is close enough\\n                to the initial estimate. All base tokens exceeding the positionSize are either swapped\\n                back for quoteTokens (dust is donated to the protocol)\\n                See: _reducePositionOnMarket for reference\\n        */\\n\\n        if (isLong) {\\n            // proposedAmount is a vBase denominated amount\\n            // positionSize needs to be positive to allow LP positions looking like longs to be partially sold\\n            if (proposedAmount > positionSize.abs().toUint256()) revert Perpetual_ProposedAmountExceedsPositionSize();\\n        } else {\\n            // Check that `proposedAmount` isn't too far from the value in the market\\n            // to avoid creating large swings in the market (even though these swings would be cancelled out\\n            // by the fact that we sell any extra vBase bought)\\n\\n            // USD_amount = EUR_USD * EUR_amount\\n            int256 positivePositionSize = -positionSize;\\n            int256 maxVQuoteAmount = (marketTwap + marketTwap / 2).wadMul(positivePositionSize); // 50% above the TWAP\\n\\n            // Allow for a 50% deviation premium from the market vQuote TWAP price to close this position\\n            if (proposedAmount.toInt256() > maxVQuoteAmount) revert Perpetual_ProposedAmountExceedsMaxMarketPrice();\\n        }\\n    }\\n\\n    function _canSellBase(uint256 sellAmount) internal returns (bool) {\\n        // slither-disable-next-line unused-return\\n        try market.get_dy(VBASE_INDEX, VQUOTE_INDEX, sellAmount) {\\n            return true;\\n        } catch {\\n            emit Log(\\\"Swap impossible\\\");\\n\\n            return false;\\n        }\\n    }\\n\\n    function _checkPriceDeviation(int256 currentPrice, int256 startBlockPrice) internal pure returns (bool) {\\n        // check if market price has changed more than by 5% in this block\\n\\n        // price deviations of a given block does not exceed 5%\\n        // <=> 5% > (currentPrice - startBlockPrice) / currentPrice\\n        // 5 * currentPrice > (currentPrice - startBlockPrice) * 100\\n\\n        // slither-disable-next-line incorrect-equality\\n        return (MAX_PRICE_DEVIATION * currentPrice > (currentPrice - startBlockPrice).abs() * 1e18);\\n    }\\n\\n    /// @notice Calculate missed funding payments\\n    // slither-disable-next-line timestamp\\n    function _getFundingPayments(\\n        bool isLong,\\n        int256 userCumFundingRate,\\n        int256 globalCumFundingRate,\\n        int256 vBaseAmountToSettle\\n    ) internal pure returns (int256 upcomingFundingPayment) {\\n        /* Funding rates (as defined in our protocol) are paid from longs to shorts\\n\\n            case 1: user is long  => has missed making funding payments (positive or negative)\\n            case 2: user is short => has missed receiving funding payments (positive or negative)\\n\\n            comment: Making an negative funding payment is equivalent to receiving a positive one.\\n        */\\n        if (userCumFundingRate != globalCumFundingRate) {\\n            int256 upcomingFundingRate = isLong\\n                ? userCumFundingRate - globalCumFundingRate\\n                : globalCumFundingRate - userCumFundingRate;\\n\\n            // fundingPayments = fundingRate * vBaseAmountToSettle\\n            upcomingFundingPayment = upcomingFundingRate.wadMul(vBaseAmountToSettle);\\n        }\\n    }\\n\\n    /// @notice Compensate traders by fees paid on cryptoswap pool\\n\\n    function _compensateForCurveTradingFees(uint256 dyInclFees, uint256 curveTradingFee)\\n        internal\\n        pure\\n        returns (uint256 dyExclFees)\\n    {\\n        /*\\n            dy = dy ( 1 - fees )\\n\\n            dyInclFees = dyExclFees * (CURVE_TRADING_FEE_PRECISION - fees) / CURVE_TRADING_FEE_PRECISION.\\n\\n        <=> dyExclFees = dyInclFees * CURVE_TRADING_FEE_PRECISION / (CURVE_TRADING_FEE_PRECISION - curveTradingFee)\\n\\n        */\\n        dyExclFees = (dyInclFees * CURVE_TRADING_FEE_PRECISION) / (CURVE_TRADING_FEE_PRECISION - curveTradingFee);\\n    }\\n\\n    function _getUnrealizedPnL(LibPerpetual.TraderPosition memory trader) internal view returns (int256) {\\n        int256 oraclePrice = indexPrice();\\n        int256 vQuoteVirtualProceeds = trader.positionSize.wadMul(oraclePrice);\\n        int256 tradingFees = vQuoteVirtualProceeds.abs().wadMul(tradingFee);\\n\\n        // in the case of a LONG, trader.openNotional is negative but vQuoteVirtualProceeds is positive\\n        // in the case of a SHORT, trader.openNotional is positive while vQuoteVirtualProceeds is negative\\n        return trader.openNotional + vQuoteVirtualProceeds - tradingFees;\\n    }\\n\\n    /***************************** */\\n    /* Internal Viewer (Liquidity) */\\n    /***************************** */\\n\\n    function _getVBasePositionAfterVirtualWithdrawal(\\n        LibPerpetual.LiquidityProviderPosition memory lp,\\n        LibPerpetual.GlobalPosition memory global\\n    ) internal view returns (int256 positionSizeAfterWithdrawal) {\\n        // LP position\\n        uint256 totalLiquidityProvided = getTotalLiquidityProvided();\\n\\n        // adjust for trading fees earned\\n        (uint256 baseTokensExFees, ) = _getVirtualTokensWithdrawnFromCurvePool(\\n            totalLiquidityProvided,\\n            lp.liquidityBalance,\\n            market.balances(VBASE_INDEX),\\n            lp.totalBaseFeesGrowth,\\n            global.totalBaseFeesGrowth\\n        );\\n        positionSizeAfterWithdrawal = baseTokensExFees.toInt256() + lp.positionSize;\\n    }\\n\\n    function _getVirtualTokensEarnedAsCurveTradingFees(\\n        LibPerpetual.LiquidityProviderPosition memory lp,\\n        LibPerpetual.GlobalPosition memory global\\n    ) internal view returns (int256 baseFeesEarned, int256 quoteFeesEarned) {\\n        // LP position\\n        uint256 totalLiquidityProvided = getTotalLiquidityProvided();\\n\\n        (uint256 quoteTokensExFees, uint256 quoteTokensInclFees) = _getVirtualTokensWithdrawnFromCurvePool(\\n            totalLiquidityProvided,\\n            lp.liquidityBalance,\\n            market.balances(VQUOTE_INDEX),\\n            lp.totalQuoteFeesGrowth,\\n            global.totalQuoteFeesGrowth\\n        );\\n        quoteFeesEarned = (quoteTokensInclFees - quoteTokensExFees).toInt256();\\n\\n        (uint256 baseTokensExFees, uint256 baseTokensInclFees) = _getVirtualTokensWithdrawnFromCurvePool(\\n            totalLiquidityProvided,\\n            lp.liquidityBalance,\\n            market.balances(VBASE_INDEX),\\n            lp.totalBaseFeesGrowth,\\n            global.totalBaseFeesGrowth\\n        );\\n        baseFeesEarned = (baseTokensInclFees - baseTokensExFees).toInt256();\\n    }\\n\\n    function _getVirtualTokensWithdrawnFromCurvePool(\\n        uint256 totalLiquidityProvided,\\n        uint256 lpTokensLiquidityProvider,\\n        uint256 curvePoolBalance,\\n        uint256 userVirtualTokenGrowthRate,\\n        uint256 globalVirtualTokenTotalGrowth\\n    ) internal pure returns (uint256 tokensExFees, uint256 tokensInclFees) {\\n        tokensInclFees = (curvePoolBalance * lpTokensLiquidityProvider) / totalLiquidityProvided - 1;\\n        tokensExFees = tokensInclFees.wadDiv(1e18 + globalVirtualTokenTotalGrowth - userVirtualTokenGrowthRate);\\n    }\\n\\n    /// @notice Get the trading fees earned by the liquidity provider\\n    function _getLpTradingFees(\\n        LibPerpetual.LiquidityProviderPosition memory lp,\\n        LibPerpetual.GlobalPosition memory global\\n    ) internal pure returns (uint256) {\\n        return lp.openNotional.abs().toUint256().wadMul(global.totalTradingFeesGrowth - lp.totalTradingFeesGrowth);\\n    }\\n\\n    /// @notice Get the (active) position of a liquidity provider after withdrawing liquidity\\n    /// @return (Active) Liquidity Provider position\\n    function _getLpPositionAfterWithdrawal(\\n        LibPerpetual.LiquidityProviderPosition memory lp,\\n        LibPerpetual.GlobalPosition memory global\\n    ) internal view returns (LibPerpetual.TraderPosition memory) {\\n        // LP position\\n        uint256 totalLiquidityProvided = getTotalLiquidityProvided();\\n\\n        (uint256 quoteTokensExFees, ) = _getVirtualTokensWithdrawnFromCurvePool(\\n            totalLiquidityProvided,\\n            lp.liquidityBalance,\\n            market.balances(VQUOTE_INDEX),\\n            lp.totalQuoteFeesGrowth,\\n            global.totalQuoteFeesGrowth\\n        );\\n\\n        (uint256 baseTokensExFees, ) = _getVirtualTokensWithdrawnFromCurvePool(\\n            totalLiquidityProvided,\\n            lp.liquidityBalance,\\n            market.balances(VBASE_INDEX),\\n            lp.totalBaseFeesGrowth,\\n            global.totalBaseFeesGrowth\\n        );\\n\\n        return\\n            LibPerpetual.TraderPosition({\\n                openNotional: lp.openNotional + quoteTokensExFees.toInt256(),\\n                positionSize: lp.positionSize + baseTokensExFees.toInt256(),\\n                cumFundingRate: lp.cumFundingRate\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0x3ea6ed4ef3d0ad3c60d82b5ed1f28ae86d7d640c8960b3264d4c33c3692c8e8b\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IClearingHouse.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\nimport {IPerpetual} from \\\"./IPerpetual.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\n\\n// libraries\\nimport {LibPerpetual} from \\\"../lib/LibPerpetual.sol\\\";\\n\\ninterface IClearingHouse {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error ClearingHouse_ZeroAddressConstructor(uint8 paramIndex);\\n\\n    /// @notice Emitted when there is not enough margin to withdraw the requested amount\\n    error ClearingHouse_WithdrawInsufficientMargin();\\n\\n    /// @notice Emitted when the position is not reduced entirely using closePositionWithdrawCollateral\\n    error ClearingHouse_ClosePositionStillOpen();\\n\\n    /// @notice Emitted when the liquidatee does not have an open position\\n    error ClearingHouse_LiquidateInvalidPosition();\\n\\n    /// @notice Emitted when the margin of the liquidatee's position is still valid\\n    error ClearingHouse_LiquidateValidMargin();\\n\\n    /// @notice Emitted when the attempted liquidation does not close the full position\\n    error ClearingHouse_LiquidateInsufficientProposedAmount();\\n\\n    /// @notice Emitted when a user attempts to provide liquidity with amount equal to 0\\n    error ClearingHouse_ProvideLiquidityZeroAmount();\\n\\n    /// @notice Emitted when a user attempts to withdraw more liquidity than they have\\n    error ClearingHouse_RemoveLiquidityInsufficientFunds();\\n\\n    /// @notice Emitted when vault withdrawal is unsuccessful\\n    error ClearingHouse_VaultWithdrawUnsuccessful();\\n\\n    /// @notice Emitted when the proposed minMargin is too low\\n    error ClearingHouse_InsufficientMinMargin();\\n\\n    /// @notice Emitted when the proposed minMargin is too high\\n    error ClearingHouse_ExcessiveMinMargin();\\n\\n    /// @notice Emitted when the proposed liquidation reward is too low\\n    error ClearingHouse_InsufficientLiquidationReward();\\n\\n    /// @notice Emitted when the proposed liquidation reward is too high\\n    error ClearingHouse_ExcessiveLiquidationReward();\\n\\n    /// @notice Emitted when the proposed insurance ratio is too low\\n    error ClearingHouse_InsufficientInsuranceRatio();\\n\\n    /// @notice Emitted when the proposed insurance ratio is too high\\n    error ClearingHouse_ExcessiveInsuranceRatio();\\n\\n    /// @notice Emitted when a user attempts to extend their position with amount equal to 0\\n    error ClearingHouse_ExtendPositionZeroAmount();\\n\\n    /// @notice Emitted when there is not enough margin to extend to the proposed position amount\\n    error ClearingHouse_ExtendPositionInsufficientMargin();\\n\\n    /// @notice Emitted when a user attempts to reduce their position with amount equal to 0\\n    error ClearingHouse_ReducePositionZeroAmount();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function vault() external view returns (IVault);\\n\\n    function insurance() external view returns (IInsurance);\\n\\n    function perpetuals(uint256 idx) external view returns (IPerpetual);\\n\\n    function getNumMarkets() external view returns (uint256);\\n\\n    function getOwner() external view returns (address);\\n\\n    function minMargin() external view returns (int256);\\n\\n    function minMarginAtCreation() external view returns (int256);\\n\\n    function liquidationReward() external view returns (uint256);\\n\\n    function insuranceRatio() external view returns (uint256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function allowListPerpetual(IPerpetual perp) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function sellDust(\\n        uint256 idx,\\n        uint256 proposedAmount,\\n        uint256 minAmount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function setMinMargin(int256 newMinMargin) external;\\n\\n    function setMinMarginAtCreation(int256 newMinMarginAtCreation) external;\\n\\n    function setLiquidationReward(uint256 newLiquidationReward) external;\\n\\n    function setInsuranceRatio(uint256 newInsuranceRatio) external;\\n\\n    function deposit(\\n        uint256 idx,\\n        uint256 amount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function withdraw(\\n        uint256 idx,\\n        uint256 amount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function extendPositionWithCollateral(\\n        uint256 idx,\\n        uint256 collateralAmount,\\n        IERC20Metadata token,\\n        uint256 positionAmount,\\n        LibPerpetual.Side direction,\\n        uint256 minAmount\\n    ) external;\\n\\n    function extendPosition(\\n        uint256 idx,\\n        uint256 amount,\\n        LibPerpetual.Side direction,\\n        uint256 minAmount\\n    ) external;\\n\\n    function closePositionWithdrawCollateral(\\n        uint256 idx,\\n        uint256 proposedAmount,\\n        uint256 minAmount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function reducePosition(\\n        uint256 idx,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external;\\n\\n    function liquidate(\\n        uint256 idx,\\n        address liquidatee,\\n        uint256 proposedAmount,\\n        bool isTrader\\n    ) external;\\n\\n    function provideLiquidity(\\n        uint256 idx,\\n        uint256 amount,\\n        uint256 minLpAmount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function removeLiquidity(\\n        uint256 idx,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdbc2463924f06b75ec5fa31e0332db3117bdee135ef56db7d98a8ab34d7884d4\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ICryptoSwap.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n/// @dev Contract https://github.com/curvefi/curve-crypto-contract/blob/master/deployment-logs/2021-11-01.%20EURS%20on%20mainnet/CryptoSwap.vy\\ninterface ICryptoSwap {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function price_oracle() external view returns (uint256);\\n\\n    function mid_fee() external view returns (uint256);\\n\\n    function out_fee() external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    // Swap token i to j with amount dx and min amount min_dy\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external returns (uint256); // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external; // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\\n\\n    function last_prices() external view returns (uint256);\\n\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x64c144f037b8ba367ece87d0605374be7adbf93c186d39c220aec454594870a1\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\ninterface IInsurance {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Insurance_ZeroAddressConstructor(uint8 paramIndex);\\n\\n    /// @notice Emitted when the sender is not the vault address\\n    error Insurance_SenderNotVault();\\n\\n    /// @notice Emitted when the sender is not the clearingHouse address\\n    error Insurance_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when the balance of the vault is less than the amount to be settled\\n    error Insurance_InsufficientBalance();\\n\\n    /// @notice Emitted when locked insurance falls below insurance ratio\\n    error Insurance_InsufficientInsurance();\\n\\n    /// @notice Emitted when the proposed clearingHouse address is equal to the zero address\\n    error Insurance_ClearingHouseZeroAddress();\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when a new ClearingHouse is connected to the issuer\\n    /// @param newClearingHouse New ClearingHouse contract address\\n    event ClearingHouseChanged(IClearingHouse newClearingHouse);\\n\\n    /// @notice Emitted when (exceeding) insurance reserves are withdrawn by governance\\n    /// @param amount Amount of insurance reserves withdrawn. 18 decimals\\n    event InsuranceRemoved(uint256 amount);\\n\\n    /// @notice Emitted when a bail out is asked for by the Vault\\n    /// @param amount Amount of insurance reserves withdrawn. 18 decimals\\n    event SettleDebt(uint256 amount);\\n\\n    /// @notice Emitted when a bail out cant be fully served\\n    /// @param amount Amount of bad debt remaining. 18 decimals\\n    event SystemDebtGenerated(uint256 amount);\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function settleDebt(uint256 amount) external;\\n\\n    function removeInsurance(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x755bb2b93aab1d10f443668ffc8e5bfd6898130842d7f5a9a76c929d69a7c8db\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/// @notice Oracle interface created to ease oracle contract switch\\ninterface IOracle {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the latest round is incomplete\\n    error Oracle_IncompleteRound();\\n\\n    /// @notice Emitted when the latest round's price is invalid\\n    error Oracle_IntegerConversion();\\n\\n    /// @notice Emitted when the proposed asset address is equal to the zero address\\n    error Oracle_AssetZeroAddress();\\n\\n    /// @notice Emitted when the proposed aggregator address is equal to the zero address\\n    error Oracle_AggregatorZeroAddress();\\n\\n    /// @notice Emitted when owner tries to set fixed price to an unsupported asset\\n    error Oracle_UnsupportedAsset();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function getPrice(address asset) external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function setOracle(address asset, AggregatorV3Interface aggregator) external;\\n\\n    function setFixedPrice(address asset, int256 fixedPrice) external;\\n}\\n\",\"keccak256\":\"0xaa06ea6ca832e0b236b11751c4e1a34b1d6193967a3b927a32dac56d21694184\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPerpetual.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IVBase} from \\\"./IVBase.sol\\\";\\nimport {IVQuote} from \\\"./IVQuote.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\n// libraries\\nimport {LibPerpetual} from \\\"../lib/LibPerpetual.sol\\\";\\n\\ninterface IPerpetual {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Perpetual_ZeroAddressConstructor(uint256 paramIndex);\\n\\n    /// @notice Emitted when the constructor fails to give approval of a virtual token to the market\\n    error Perpetual_VirtualTokenApprovalConstructor(uint256 tokenIndex);\\n\\n    /// @notice Emitted when market mid fee does not equal out fee\\n    error Perpetual_MarketEqualFees();\\n\\n    /// @notice Emitted when the sender is not the clearing house\\n    error Perpetual_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when the sender is not the clearing house owner\\n    error Perpetual_SenderNotClearingHouseOwner();\\n\\n    /// @notice Emitted when the user attempts to reduce their position using extendPosition\\n    error Perpetual_AttemptReducePosition();\\n\\n    /// @notice Emitted when the price impact of a position is too high\\n    error Perpetual_ExcessivePriceImpact();\\n\\n    /// @notice Emitted when the user does not have an open position\\n    error Perpetual_NoOpenPosition();\\n\\n    /// @notice Emitted when the user attempts to withdraw more liquidity than they have deposited\\n    error Perpetual_LPWithdrawExceedsBalance();\\n\\n    /// @notice Emitted when the proposed insurance fee is insufficient\\n    error Perpetual_InsuranceFeeInsufficient(int256 fee);\\n\\n    /// @notice Emitted when the proposed insurance fee is excessive\\n    error Perpetual_InsuranceFeeExcessive(int256 fee);\\n\\n    /// @notice Emitted when the proposed trading fee is insufficient\\n    error Perpetual_TradingFeeInsufficient(int256 fee);\\n\\n    /// @notice Emitted when the proposed trading fee is excessive\\n    error Perpetual_TradingFeeExcessive(int256 fee);\\n\\n    /// @notice Emitted when a token balance of the market is lte 0\\n    error Perpetual_MarketBalanceTooLow(uint256 tokenIndex);\\n\\n    /// @notice Emitted when the liquidity provider has an open position\\n    error Perpetual_LPOpenPosition();\\n\\n    /// @notice Emitted when proposed amount is greater than position size\\n    error Perpetual_ProposedAmountExceedsPositionSize();\\n\\n    /// @notice Emitted when proposed amount is greater than maxVQuoteAmount\\n    error Perpetual_ProposedAmountExceedsMaxMarketPrice();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function market() external view returns (ICryptoSwap);\\n\\n    function vBase() external view returns (IVBase);\\n\\n    function vQuote() external view returns (IVQuote);\\n\\n    function clearingHouse() external view returns (IClearingHouse);\\n\\n    function getTraderPosition(address account) external view returns (LibPerpetual.TraderPosition memory);\\n\\n    function getLpPositionAfterWithdrawal(address account) external view returns (LibPerpetual.TraderPosition memory);\\n\\n    function getLpPosition(address account) external view returns (LibPerpetual.LiquidityProviderPosition memory);\\n\\n    function getGlobalPosition() external view returns (LibPerpetual.GlobalPosition memory);\\n\\n    function getInsuranceFee() external view returns (int256);\\n\\n    function getTradingFee() external view returns (int256);\\n\\n    function getTraderUnrealizedPnL(address account) external view returns (int256);\\n\\n    function getTraderFundingPayments(address account) external view returns (int256);\\n\\n    function getLpUnrealizedPnL(address account) external view returns (int256);\\n\\n    function getLpFundingPayments(address account) external view returns (int256);\\n\\n    function getLpTradingFees(address account) external view returns (uint256);\\n\\n    function marketPrice() external view returns (uint256);\\n\\n    function indexPrice() external view returns (int256);\\n\\n    function getTotalLiquidityProvided() external view returns (uint256);\\n\\n    function getOracleTwap() external view returns (int256);\\n\\n    function getMarketTwap() external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function extendPosition(\\n        address account,\\n        uint256 amount,\\n        LibPerpetual.Side direction,\\n        uint256 minAmount\\n    )\\n        external\\n        returns (\\n            int256 openNotional,\\n            int256 positionSize,\\n            int256 tradingFees\\n        );\\n\\n    function reducePosition(\\n        address account,\\n        uint256 amount,\\n        uint256 minAmount\\n    )\\n        external\\n        returns (\\n            int256 vQuoteProceeds,\\n            int256 vBaseAmount,\\n            int256 profit\\n        );\\n\\n    function settleTrader(address account) external returns (int256 fundingPayments);\\n\\n    function provideLiquidity(\\n        address account,\\n        uint256 wadAmount,\\n        uint256 minLpAmount\\n    ) external returns (int256 tradingFees);\\n\\n    function removeLiquidity(\\n        address account,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external returns (int256 profit, uint256 reductionRatio);\\n\\n    function settleLp(address account) external returns (int256 fundingPayments);\\n\\n    function setInsuranceFee(int256 newInsuranceFee) external;\\n\\n    function setTradingFee(int256 newInsuranceFee) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xec1f2ab112769a8f371e96d4108dcffae37f7970020c9b73b933a8dd2fbd60fc\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IVirtualToken} from \\\"../interfaces/IVirtualToken.sol\\\";\\n\\ninterface IVBase is IVirtualToken {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the proposed aggregators decimals are less than PRECISION\\n    error VBase_InsufficientPrecision();\\n\\n    /// @notice Emitted when the latest round is incomplete\\n    error VBase_IncompleteRound();\\n\\n    /// @notice Emitted when the latest round's price is invalid\\n    error VBase_IntegerConversion();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function getIndexPrice() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x93fe2a1b39f1fa7fec300893ce78ad0efb540e8ac8c394a1ab6e8882428472ee\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVQuote.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IVirtualToken} from \\\"../interfaces/IVirtualToken.sol\\\";\\n\\ninterface IVQuote is IVirtualToken {}\\n\",\"keccak256\":\"0xf3c21b1973b431c9e0fd63e60544be3e5a7e51bfb4d6f8b4dbac26f38dc3f17b\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {IOracle} from \\\"./IOracle.sol\\\";\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\n// @dev: deposit uint and withdraw int\\n// @author: The interface used in other contracts\\ninterface IVault {\\n    struct Collateral {\\n        IERC20Metadata asset;\\n        uint256 weight;\\n        uint8 decimals;\\n    }\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Vault_ZeroAddressConstructor(uint8 paramIndex);\\n\\n    /// @notice Emitted when the decimals of the proposed reserve token are gt 18\\n    error Vault_ExcessiveDecimalsConstructor();\\n\\n    /// @notice Emitted when user tries to withdraw collateral while having a UA debt\\n    error Vault_UADebt();\\n\\n    /// @notice Emitted when the sender is not the clearing house\\n    error Vault_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when a user attempts to use a token which is not whitelisted as collateral\\n    error Vault_UnsupportedCollateral();\\n\\n    /// @notice Emitted when owner tries to whitelist a collateral already whitelisted\\n    error Vault_CollateralAlreadyWhiteListed();\\n\\n    /// @notice Emitted when a user attempts to withdraw with a reduction ratio above 1e18\\n    error Vault_WithdrawReductionRatioTooHigh();\\n\\n    /// @notice Emitted when a user attempts to withdraw more than their balance\\n    error Vault_WithdrawExcessiveAmount();\\n\\n    /// @notice Emitted when a user attempts to withdraw an amount that reduces their balance below mMIN_DEPOSIT_AMOUNT\\n    error Vault_WithdrawBalanceBelowMin();\\n\\n    /// @notice Emitted when the proposed clearingHouse address is equal to the zero address\\n    error Vault_ClearingHouseZeroAddress();\\n\\n    /// @notice Emitted when the proposed insurance address is equal to the zero address\\n    error Vault_InsuranceZeroAddress();\\n\\n    /// @notice Emitted when the proposed oracle address is equal to the zero address\\n    error Vault_OracleZeroAddress();\\n\\n    /// @notice Emitted when the proposed collateral weight is under the limit\\n    error Vault_InsufficientCollateralWeight();\\n\\n    /// @notice Emitted when the proposed collateral weight is above the limit\\n    error Vault_ExcessiveCollateralWeight();\\n\\n    /// @notice Emitted when a user attempts to withdraw more collateral than available in vault\\n    error Vault_InsufficientBalance();\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when collateral is deposited into the vault\\n    /// @param idx Index of the perpetual market\\n    /// @param user User who deposited collateral\\n    /// @param asset Token to be used for the collateral\\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\\n    event Deposit(uint256 indexed idx, address indexed user, address indexed asset, uint256 amount);\\n\\n    /// @notice Emitted when collateral is withdrawn from the vault\\n    /// @param idx Index of the perpetual market\\n    /// @param user User who deposited collateral\\n    /// @param asset Token to be used for the collateral\\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\\n    event Withdraw(uint256 indexed idx, address indexed user, address indexed asset, uint256 amount);\\n\\n    /// @notice Emitted when bad debt is settled for by the insurance reserve\\n    /// @param idx Index of the perpetual market\\n    /// @param beneficiary Beneficiary of the insurance payment\\n    /// @param amount Amount of bad insurance requested\\n    event TraderBadDebtGenerated(uint256 idx, address beneficiary, uint256 amount);\\n\\n    /// @notice Emitted when a new ClearingHouse is connected to the vault\\n    /// @param newClearingHouse New ClearingHouse contract address\\n    event ClearingHouseChanged(IClearingHouse newClearingHouse);\\n\\n    /// @notice Emitted when a new Insurance is connected to the vault\\n    /// @param newInsurance New Insurance contract address\\n    event InsuranceChanged(IInsurance newInsurance);\\n\\n    /// @notice Emitted when a new Oracle is connected to the vault\\n    /// @param newOracle New Oracle contract address\\n    event OracleChanged(IOracle newOracle);\\n\\n    /// @notice Emitted when a new Oracle is connected to the vault\\n    /// @param asset Asset added as collateral\\n    /// @param weight Volatility measure of the asset\\n    event CollateralAdded(IERC20Metadata asset, uint256 weight);\\n\\n    /// @notice Emitted when a new Oracle is connected to the vault\\n    /// @param asset Asset added as collateral\\n    /// @param newWeight New volatility measure for the collateral\\n    event CollateralWeightChanged(IERC20Metadata asset, uint256 newWeight);\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n    function insurance() external view returns (IInsurance);\\n\\n    function oracle() external view returns (IOracle);\\n\\n    function clearingHouse() external view returns (IClearingHouse);\\n\\n    function getTotalValueLocked() external view returns (uint256);\\n\\n    function getBadDebt() external view returns (uint256);\\n\\n    function getWhiteListedCollaterals() external view returns (Collateral[] memory);\\n\\n    function getTraderReserveValue(uint256 marketIdx, address trader) external view returns (int256);\\n\\n    function getLpReserveValue(uint256 marketIdx, address lp) external view returns (int256);\\n\\n    function getLpBalance(\\n        address user,\\n        uint256 marketIdx,\\n        uint256 tokenIdx\\n    ) external view returns (int256);\\n\\n    function getTraderBalance(\\n        address user,\\n        uint256 marketIdx,\\n        uint256 tokenIdx\\n    ) external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function deposit(\\n        uint256 idx,\\n        address user,\\n        uint256 amount,\\n        IERC20Metadata token,\\n        bool isTrader\\n    ) external returns (int256 amountUSDValue);\\n\\n    function settlePnL(\\n        uint256 marketIdx,\\n        address user,\\n        int256 amount,\\n        bool isTrader\\n    ) external;\\n\\n    function withdraw(\\n        uint256 idx,\\n        address user,\\n        uint256 amount,\\n        IERC20Metadata token,\\n        bool isTrader\\n    ) external;\\n\\n    function withdrawPartial(\\n        uint256 idx,\\n        address user,\\n        uint256 reductionRatio,\\n        bool isTrader\\n    ) external;\\n\\n    function withdrawAll(\\n        uint256 idx,\\n        address user,\\n        IERC20Metadata withdrawToken,\\n        bool isTrader\\n    ) external;\\n\\n    function settleLiquidationOnCollaterals(\\n        address liquidator,\\n        address liquidatee,\\n        uint256 marketIdx,\\n        bool isTrader\\n    ) external;\\n\\n    function transferUa(address user, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x2adfd49ef5b4888a307e7396875c83414cd0175c0134df6b859d6c4e2dfe9051\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVirtualToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IVirtualToken is IERC20Metadata {\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0dda9dc3d416b9aaeb6e93915b33c2b358b4ee5b9e477fa3b7ff9be8198e95ec\",\"license\":\"AGPL-3.0\"},\"contracts/lib/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// libraries\\nimport {PRBMathUD60x18} from \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\nimport {PRBMathSD59x18} from \\\"prb-math/contracts/PRBMathSD59x18.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/*\\n * To be used if `b` decimals make `b` larger than what it would be otherwise.\\n * Especially useful for fixed point numbers, i.e. a way to represent decimal\\n * values without using decimals. E.g. 25e2 with 3 decimals represents 2.5%\\n *\\n * In our case, we get exchange rates with a 18 decimal precision\\n * (Solidity doesn't support decimal values natively).\\n * So if we have a EUR positions and want to get the equivalent USD amount\\n * we have to do: EUR_position * EUR_USD / 1e18 else the value would be way too high.\\n * To move from USD to EUR: (USD_position * 1e18) / EUR_USD else the value would\\n * be way too low.\\n *\\n * In essence,\\n * wadMul: a.mul(b).div(WAY)\\n * wadDiv: a.mul(WAY).div(b)\\n * where `WAY` represents the number of decimals\\n */\\nlibrary LibMath {\\n    // safe casting\\n    function toInt256(uint256 x) internal pure returns (int256) {\\n        return SafeCast.toInt256(x);\\n    }\\n\\n    function toUint256(int256 x) internal pure returns (uint256) {\\n        return SafeCast.toUint256(x);\\n    }\\n\\n    // absolute value\\n    function abs(int256 x) internal pure returns (int256) {\\n        return PRBMathSD59x18.abs(x);\\n    }\\n\\n    // int256: wad division / multiplication\\n    function wadDiv(int256 x, int256 y) internal pure returns (int256) {\\n        return PRBMathSD59x18.div(x, y);\\n    }\\n\\n    function wadMul(int256 x, int256 y) internal pure returns (int256) {\\n        return PRBMathSD59x18.mul(x, y);\\n    }\\n\\n    // uint256: wad division / multiplication\\n    function wadMul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return PRBMathUD60x18.mul(x, y);\\n    }\\n\\n    function wadDiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return PRBMathUD60x18.div(x, y);\\n    }\\n}\\n\",\"keccak256\":\"0x60393d01bf4cc02470b3f23cddc21c88389484c9ee0563e7ec22e9585e33f2ef\",\"license\":\"AGPL-3.0\"},\"contracts/lib/LibPerpetual.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// libraries\\nimport {LibMath} from \\\"./LibMath.sol\\\";\\n\\nlibrary LibPerpetual {\\n    using LibMath for int256;\\n    using LibMath for uint256;\\n\\n    enum Side {\\n        // long position\\n        Long,\\n        // short position\\n        Short\\n    }\\n\\n    struct LiquidityProviderPosition {\\n        // quote assets or liabilities\\n        int256 openNotional;\\n        // base assets or liabilities\\n        int256 positionSize;\\n        // user cumulative funding rate (updated when open/close position)\\n        int256 cumFundingRate;\\n        // lp token owned (is zero for traders)\\n        uint256 liquidityBalance;\\n        /* fees state */\\n\\n        // total percentage return of liquidity providers index\\n        uint256 totalTradingFeesGrowth;\\n        // total base fees paid in cryptoswap pool\\n        uint256 totalBaseFeesGrowth;\\n        // total quote fees paid in cryptoswap pool\\n        uint256 totalQuoteFeesGrowth;\\n    }\\n\\n    struct TraderPosition {\\n        // quote assets or liabilities\\n        int256 openNotional;\\n        // base assets or liabilities\\n        int256 positionSize;\\n        // user cumulative funding rate (updated when open/close position)\\n        int256 cumFundingRate;\\n    }\\n\\n    struct GlobalPosition {\\n        /* twap state */\\n\\n        // timestamp of last trade\\n        uint128 timeOfLastTrade;\\n        // timestamp of last TWAP update\\n        uint128 timeOfLastTwapUpdate;\\n        // global cumulative funding rate (updated every trade)\\n        int256 cumFundingRate;\\n        // market price at the start of the block\\n        int256 blockStartPrice;\\n        /* fees state */\\n\\n        // total percentage return of liquidity providers index\\n        uint256 totalTradingFeesGrowth;\\n        // total liquidity provided (in vQuote)\\n        uint256 totalLiquidityProvided;\\n        // total base fees paid in cryptoswap pool\\n        uint256 totalBaseFeesGrowth;\\n        // total quote fees paid in cryptoswap pool\\n        uint256 totalQuoteFeesGrowth;\\n    }\\n}\\n\",\"keccak256\":\"0x6ab4f05a6c671effd6cbd4d865aa8049cda387106af96b7b43a50636c2634b92\",\"license\":\"AGPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62cbabae4910e168e99b9c2c3e3b5c9c7ad5e7abd961dcc63b7ea3d83d8ea87e\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathSD59x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\n\\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_WHOLE_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\n\\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_WHOLE_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Calculate the absolute value of x.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than MIN_SD59x18.\\n    ///\\n    /// @param x The number to calculate the absolute value for.\\n    /// @param result The absolute value of x.\\n    function abs(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x == MIN_SD59x18) {\\n                revert PRBMathSD59x18__AbsInputTooSmall();\\n            }\\n            result = x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            int256 sum = (x >> 1) + (y >> 1);\\n            if (sum < 0) {\\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\\n                // right rounds down to infinity.\\n                assembly {\\n                    result := add(sum, and(or(x, y), 1))\\n                }\\n            } else {\\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\\n                // remainder gets truncated twice.\\n                result = sum + (x & y & 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function ceil(int256 x) internal pure returns (int256 result) {\\n        if (x > MAX_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__CeilOverflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x > 0) {\\n                    result += SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    /// - None of the inputs can be MIN_SD59x18.\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within int256.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    ///\\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__DivInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x and y.\\n        uint256 ax;\\n        uint256 ay;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n        }\\n\\n        // Compute the absolute value of (x*SCALE)\\u00f7y. The result must fit within int256.\\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__DivOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x and y.\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n\\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\\n        // should be positive. Otherwise, it should be negative.\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (int256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\".\\n    /// - For any x less than -41.446531673892822322, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59.794705707972522261.\\n        if (x < -41_446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathSD59x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59.794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^(-x) = 1/2^x.\\n        if (x < 0) {\\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n            if (x < -59_794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked {\\n                result = 1e36 / exp2(-x);\\n            }\\n        } else {\\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n            if (x >= 192e18) {\\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\\n            }\\n\\n            unchecked {\\n                // Convert x to the 192.64-bit fixed-point format.\\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\\n                result = int256(PRBMath.exp2(x192x64));\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function floor(int256 x) internal pure returns (int256 result) {\\n        if (x < MIN_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__FloorUnderflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x < 0) {\\n                    result -= SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\\n    /// of the radix point for negative numbers.\\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\\n    function frac(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x % SCALE;\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\\n    function fromInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < MIN_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntUnderflow(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\\n    /// - x * y cannot be negative.\\n    ///\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            int256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathSD59x18__GmOverflow(x, y);\\n            }\\n\\n            // The product cannot be negative.\\n            if (xy < 0) {\\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = int256(PRBMath.sqrt(uint256(xy)));\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\\n    function inv(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\\n    function ln(int256 x) internal pure returns (int256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 195205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\\n    function log10(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            default {\\n                result := MAX_SD59x18\\n            }\\n        }\\n\\n        if (result == MAX_SD59x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n                assembly {\\n                    x := div(1000000000000000000000000000000000000, x)\\n                }\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\\n\\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n            result = int256(n) * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            int256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result * sign;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result *= sign;\\n        }\\n    }\\n\\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\\n    /// fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers and employs constant folding, i.e. the denominator is\\n    /// always 1e18.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - None of the inputs can be MIN_SD59x18\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    ///\\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__MulInputTooSmall();\\n        }\\n\\n        unchecked {\\n            uint256 ax;\\n            uint256 ay;\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n\\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\\n            if (rAbs > uint256(MAX_SD59x18)) {\\n                revert PRBMathSD59x18__MulOverflow(rAbs);\\n            }\\n\\n            uint256 sx;\\n            uint256 sy;\\n            assembly {\\n                sx := sgt(x, sub(0, 1))\\n                sy := sgt(y, sub(0, 1))\\n            }\\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n        }\\n    }\\n\\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\\n    function pi() internal pure returns (int256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - z cannot be zero.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : int256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"abs\\\" and \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\\n        uint256 xAbs = uint256(abs(x));\\n\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        uint256 yAux = y;\\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (yAux & 1 > 0) {\\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\\n            }\\n        }\\n\\n        // The result must fit within the 59.18-decimal fixed-point representation.\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\\n        }\\n\\n        // Is the base negative and the exponent an odd number?\\n        bool isNegative = x < 0 && y & 1 == 1;\\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\\n    function scale() internal pure returns (int256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x cannot be negative.\\n    /// - x must be less than MAX_SD59x18 / SCALE.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as a signed 59.18-decimal fixed-point .\\n    function sqrt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < 0) {\\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\\n        }\\n    }\\n\\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1886d687eace717c05b7dcc20e43a088df0e549df86b453c2222961b520308f0\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c806376c469b61161010f578063a5f1ac9a116100a2578063cefc499311610071578063cefc499314610478578063d57ba73c146104e1578063daa53bc1146104e9578063fa9c7b9a146104fc57600080fd5b8063a5f1ac9a14610437578063aa407ae11461043f578063c5f1916c14610452578063c70fbda01461046557600080fd5b806380f55605116100de57806380f556051461039e5780638456cb59146103b157806389fd335b146103b95780639027b59e146103c157600080fd5b806376c469b61461033b578063793962d81461034e5780637f564fea1461038357806380e864fe1461038b57600080fd5b80633876d05511610187578063553b655711610156578063553b6557146102ec5780635b57398c146102ff5780635c975abb1461031257806369395df41461032857600080fd5b80633876d055146102b45780633f4ba83a146102c757806345a15388146102d15780634bc36bd6146102d957600080fd5b806316d183f0116101c357806316d183f0146102585780631bd8db03146102865780632bb9c9581461028e5780632d3eb79b146102a157600080fd5b80630666c268146101ea5780630af968001461021757806310bace8c14610242575b600080fd5b6101fd6101f8366004613d66565b61050f565b604080519283526020830191909152015b60405180910390f35b60055461022a906001600160a01b031681565b6040516001600160a01b03909116815260200161020e565b61024a61089f565b60405190815260200161020e565b61026b610266366004613e03565b610921565b6040805193845260208401929092529082015260600161020e565b60015461024a565b61024a61029c366004613e03565b610ab7565b61024a6102af366004613d2e565b610fb9565b61024a6102c2366004613d2e565b61107e565b6102cf611237565b005b61024a6112f8565b60045461022a906001600160a01b031681565b6102cf6102fa366004613e37565b61133d565b61026b61030d366004613db9565b611487565b60005460ff16604051901515815260200161020e565b61024a610336366004613d2e565b61161e565b61024a610349366004613d2e565b6116cf565b61036161035c366004613d2e565b61171a565b604080518251815260208084015190820152918101519082015260600161020e565b60105461024a565b61024a610399366004613d2e565b611780565b60065461022a906001600160a01b031681565b6102cf61189a565b61024a611959565b6103c9611a0e565b60405161020e91906000610100820190506001600160801b038084511683528060208501511660208401525060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b60025461024a565b61024a61044d366004613d2e565b611ac7565b60035461022a906001600160a01b031681565b610361610473366004613d2e565b611bd7565b61048b610486366004613d2e565b611ce0565b60405161020e9190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b60135461024a565b6102cf6104f7366004613e37565b611d8c565b61024a61050a366004613d2e565b611ecf565b60008061051e60005460ff1690565b156105445760405162461bcd60e51b815260040161053b90613eab565b60405180910390fd5b6005546001600160a01b0316331461056f5760405163080e4ebb60e01b815260040160405180910390fd5b6001600160a01b0387166000908152601560205260409020600761059161202b565b81600301548811156105b6576040516311a3c16760e11b815260040160405180910390fd5b6105c86105c38383612082565b611fac565b6105d29085613ee9565b9350600080610703846040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505084604051806101000160405290816000820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016000820160109054906101000a90046001600160801b03166001600160801b03166001600160801b0316815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815250508c8c6002806020026040519081016040528092919082600260200280828437600092019190915250612185915050565b9150915061071e84600301548b61269190919063ffffffff16565b9450600080610798604051806060016040528061074561073d8b611fac565b8a549061269d565b61074e88611fac565b6107589190613ee9565b81526020016107746107698b611fac565b60018b01549061269d565b61077d87611fac565b6107879190613ee9565b815260200160008152508b8b6126a9565b9150915060006107a78261272a565b90506107b38184614026565b6107bd908a613ee9565b98506107c885611fac565b8760000160008282546107db9190613ee9565b909155506107ea905084611fac565b8760010160008282546107fd9190613ee9565b925050819055508c8760030160008282546108189190614065565b9091555050600186015460028801556003870154610873576001600160a01b038e1660009081526015602052604081208181556001810182905560028101829055600381018290556004810182905560058101829055600601555b848660040160008282546108879190614065565b92505081905550505050505050509550959350505050565b60035460408051632c604ca560e11b815290516000926001600160a01b0316916358c0994a916004808301926020929190829003018186803b1580156108e457600080fd5b505afa1580156108f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091c9190613e4f565b905090565b600080600061093260005460ff1690565b1561094f5760405162461bcd60e51b815260040161053b90613eab565b6005546001600160a01b0316331461097a5760405163080e4ebb60e01b815260040160405180910390fd5b6001600160a01b038616600090815260146020526040902080541580156109a357506001810154155b156109c157604051634a7ebe1960e01b815260040160405180910390fd5b6040805160608101825282548152600183015460208201526002830154918101919091526000906109f3908888612774565b9096509094509050610a11610a096105c36112f8565b6009546127dc565b610a2e57604051637de5c78560e01b815260040160405180910390fd5b6000610a398661272a565b9050610a458183614026565b935085836000016000828254610a5b9190613ee9565b9250508190555084836001016000828254610a769190613ee9565b90915550506001830154610aab576001600160a01b038916600090815260146020526040812081815560018101829055600201555b50505093509350939050565b6000805460ff1615610adb5760405162461bcd60e51b815260040161053b90613eab565b6005546001600160a01b03163314610b065760405163080e4ebb60e01b815260040160405180910390fd5b610b0e61202b565b6001600160a01b0384166000908152601560205260409020600381015460079015610c8157610b406105c38383612082565b9250600080610c46846040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505084604051806101000160405290816000820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016000820160109054906101000a90046001600160801b03166001600160801b03166001600160801b03168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505061281b565b9150915080846000016000828254610c5e9190614026565b9250508190555081846001016000828254610c799190614026565b909155505050505b6000610c8b611959565b610c9e57610c976112f8565b9050610da1565b600654604051634903b0d160e01b815260016004820152610d9e916001600160a01b031690634903b0d19060240160206040518083038186803b158015610ce457600080fd5b505afa158015610cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1c9190613e4f565b600654604051634903b0d160e01b8152600060048201526001600160a01b0390911690634903b0d19060240160206040518083038186803b158015610d6057600080fd5b505afa158015610d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d989190613e4f565b90612691565b90505b6000610dad8783612691565b6004805460405163140e25ad60e31b81529293506001600160a01b03169163a0712d6891610de1918b910190815260200190565b600060405180830381600087803b158015610dfb57600080fd5b505af1158015610e0f573d6000803e3d6000fd5b505060035460405163140e25ad60e31b8152600481018590526001600160a01b03909116925063a0712d689150602401600060405180830381600087803b158015610e5957600080fd5b505af1158015610e6d573d6000803e3d6000fd5b50506006546040805180820182528b8152602081018690529051630b4c7e4d60e01b8152600094506001600160a01b039092169250630b4c7e4d91610eb791908b90600401613e90565b602060405180830381600087803b158015610ed157600080fd5b505af1158015610ee5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f099190613e4f565b9050610f1488611fac565b856000016000828254610f279190614026565b90915550610f36905082611fac565b856001016000828254610f499190614026565b90915550506008805460028701908155600a546004880155600c546005880155600d54600688015590549055600385018054829190600090610f8c908490613f2a565b9250508190555087846004016000828254610fa79190613f2a565b90915550959998505050505050505050565b6001600160a01b03811660009081526014602090815260408083208151606080820184528254825260018301548286019081526002909301548285019081528451610100810186526007546001600160801b038082168352600160801b909104169681019690965260085494860185905260095491860191909152600a546080860152600b5460a0860152600c5460c0860152600d5460e08601529151915190939285831392611075928492909161107090612995565b6129a0565b95945050505050565b6000805460ff16156110a25760405162461bcd60e51b815260040161053b90613eab565b6005546001600160a01b031633146110cd5760405163080e4ebb60e01b815260040160405180910390fd5b6001600160a01b038216600090815260156020526040902060076110ef61202b565b6003820154611102575060009392505050565b6000611205836040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505083604051806101000160405290816000820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016000820160109054906101000a90046001600160801b03166001600160801b03166001600160801b0316815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815250506129d5565b9050611221600082138460020154846001015461107085612995565b6001909201546002909301929092559392505050565b600560009054906101000a90046001600160a01b03166001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561128557600080fd5b505afa158015611299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bd9190613d4a565b6001600160a01b0316336001600160a01b0316146112ee576040516302b45f1960e61b815260040160405180910390fd5b6112f6612a99565b565b60065460408051633051afe560e21b815290516000926001600160a01b03169163c146bf94916004808301926020929190829003018186803b1580156108e457600080fd5b600560009054906101000a90046001600160a01b03166001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561138b57600080fd5b505afa15801561139f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c39190613d4a565b6001600160a01b0316336001600160a01b0316146113f4576040516302b45f1960e61b815260040160405180910390fd5b66038d7ea4c6800081121561141f5760405163401eda4760e01b81526004810182905260240161053b565b670429d069189e000081131561144b57604051634eb5274960e11b81526004810182905260240161053b565b60028190556040518181527fef28986cbeea1cfa825493dd6fbd7516f7a3c29e5768fe75301d23055a3ea1bc906020015b60405180910390a150565b600080600061149860005460ff1690565b156114b55760405162461bcd60e51b815260040161053b90613eab565b6005546001600160a01b031633146114e05760405163080e4ebb60e01b815260040160405180910390fd5b6001600160a01b0387166000908152601460205260408120908087600181111561151a57634e487b7160e01b600052602160045260246000fd5b14905080801561154357506001600160a01b038916600090815260146020526040812060010154125b8061157057508015801561157057506001600160a01b038916600090815260146020526040812060010154135b1561158e576040516305f556db60e01b815260040160405180910390fd5b611599888288612b2c565b90955093506115ac610a096105c36112f8565b6115c957604051637de5c78560e01b815260040160405180910390fd5b6115d28561272a565b6115db9061407c565b9250848260000160008282546115f19190613ee9565b925050819055508382600101600082825461160c9190613ee9565b909155505050505b9450945094915050565b6005546000906001600160a01b0316331461164c5760405163080e4ebb60e01b815260040160405180910390fd5b60005460ff161561166f5760405162461bcd60e51b815260040161053b90613eab565b6001600160a01b0382166000908152601460205260409020600761169161202b565b6001820154156116c0576116bd6000836001015413836002015483600101546110708660010154612995565b92505b60010154600290910155919050565b6001600160a01b0381166000908152601460209081526040808320815160608101835281548152600182015493810193909352600201549082015261171381612b89565b9392505050565b61173e60405180606001604052806000815260200160008152602001600081525090565b506001600160a01b0316600090815260146020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b6001600160a01b0381166000908152601560209081526040808320815160e080820184528254825260018301548286015260028301548285015260038301546060808401919091526004840154608080850191909152600585015460a08086019190915260069095015460c0808601919091528651610100810188526007546001600160801b038082168352600160801b90910416988101989098526008549688019690965260095491870191909152600a5490860152600b5492850192909252600c5492840192909252600d5490830152908261185e8383612bdf565b9050600061186c8484612c13565b9050600061187982612b89565b90508061188584611fac565b61188f9190613ee9565b979650505050505050565b600560009054906101000a90046001600160a01b03166001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e857600080fd5b505afa1580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119209190613d4a565b6001600160a01b0316336001600160a01b031614611951576040516302b45f1960e61b815260040160405180910390fd5b6112f6612dd5565b60065460408051637e062a3560e11b815290516000926001600160a01b03169163fc0c546a916004808301926020929190829003018186803b15801561199e57600080fd5b505afa1580156119b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d69190613d4a565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e457600080fd5b611a6860405180610100016040528060006001600160801b0316815260200160006001600160801b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5060408051610100810182526007546001600160801b038082168352600160801b909104166020820152600854918101919091526009546060820152600a546080820152600b5460a0820152600c5460c0820152600d5460e082015290565b6001600160a01b0381166000908152601560209081526040808320815160e080820184528254825260018301548286015260028301548285015260038301546060808401919091526004840154608080850191909152600585015460a08086019190915260069095015460c0808601919091528651610100810188526007546001600160801b038082168352600160801b90910416988101989098526008549688019690965260095491870191909152600a5490860152600b5492850192909252600c5492840192909252600d54908301529082611ba58383612c13565b90506000808260200151139050611bcd81836040015185604001516110708660200151612995565b9695505050505050565b611bfb60405180606001604052806000815260200160008152602001600081525090565b6001600160a01b038216600090815260156020908152604091829020825160e080820185528254825260018301548285015260028301548286015260038301546060808401919091526004840154608080850191909152600585015460a08086019190915260069095015460c0808601919091528751610100810189526007546001600160801b038082168352600160801b90910416978101979097526008549787019790975260095491860191909152600a5490850152600b5492840192909252600c5493830193909352600d5490820152611cd88282612c13565b949350505050565b611d206040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506001600160a01b0316600090815260156020908152604091829020825160e081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a082015260069091015460c082015290565b600560009054906101000a90046001600160a01b03166001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b158015611dda57600080fd5b505afa158015611dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e129190613d4a565b6001600160a01b0316336001600160a01b031614611e43576040516302b45f1960e61b815260040160405180910390fd5b66038d7ea4c68000811215611e6e576040516317566f0560e01b81526004810182905260240161053b565b670429d069189e0000811315611e9a57604051632600eb9960e01b81526004810182905260240161053b565b60018190556040518181527f5a87dbe22e27a84149d288703849709529ac46ee9095f32ec6d21ca85b6edb279060200161147c565b6001600160a01b0381166000908152601560209081526040808320815160e080820184528254825260018301548286015260028301548285015260038301546060808401919091526004840154608080850191909152600585015460a08086019190915260069095015460c0808601919091528651610100810188526007546001600160801b038082168352600160801b90910416988101989098526008549688019690965260095491870191909152600a5490860152600b5492850192909252600c5492840192909252600d549083015290611cd88282612bdf565b6000611fb782611fbd565b92915050565b60006001600160ff1b038211156120275760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b606482015260840161053b565b5090565b60005460ff161561204e5760405162461bcd60e51b815260040161053b90613eab565b6007805442906001600160801b03168082111561207d5761206d612e2d565b612075612e3d565b61207d612fa2565b505050565b6000611713836040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505083604051806101000160405290816000820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016000820160109054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481525050612bdf565b600480546040516370a0823160e01b81523092810192909252600091829182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156121d257600080fd5b505afa1580156121e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220a9190613e4f565b6003546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561225357600080fd5b505afa158015612267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228b9190613e4f565b6006546040516316cd8e2760e21b81529192506001600160a01b031690635b36389c906122be9089908990600401613ed5565b600060405180830381600087803b1580156122d857600080fd5b505af11580156122ec573d6000803e3d6000fd5b5050600480546006546040516370a0823160e01b81526001600160a01b0391821693810193909352600094501691506370a082319060240160206040518083038186803b15801561233c57600080fd5b505afa158015612350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123749190613e4f565b116123955760405163377d563760e01b81526000600482015260240161053b565b6003546006546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a082319060240160206040518083038186803b1580156123e157600080fd5b505afa1580156123f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124199190613e4f565b1161243a5760405163377d563760e01b81526001600482015260240161053b565b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561248357600080fd5b505afa158015612497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124bb9190613e4f565b6003546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561250457600080fd5b505afa158015612518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253c9190613e4f565b9050600061254a8584614065565b905060006125588584614065565b60048054604051630852cd8d60e31b81529293506001600160a01b0316916342966c689161258c9186910190815260200190565b600060405180830381600087803b1580156125a657600080fd5b505af11580156125ba573d6000803e3d6000fd5b5050600354604051630852cd8d60e31b8152600481018590526001600160a01b0390911692506342966c689150602401600060405180830381600087803b15801561260457600080fd5b505af1158015612618573d6000803e3d6000fd5b5050505061264d8c60c001518c60e00151670de0b6b3a764000061263c9190613f2a565b6126469190614065565b8390612691565b97506126808c60a001518c60c00151670de0b6b3a764000061266f9190613f2a565b6126799190614065565b8290612691565b965050505050505094509492505050565b600061171383836130a7565b600061171383836130bc565b60008060006126b9868686612774565b9450925090506126cd610a096105c36112f8565b6126ea57604051637de5c78560e01b815260040160405180910390fd5b60008187602001516126fc9190613ee9565b905060008112156127205760405163ab7cee1960e01b815260040160405180910390fd5b5050935093915050565b60008061274260015461273c85612995565b9061269d565b9050612756600760040154610d9883613181565b600a8054600090612768908490613f2a565b90915550909392505050565b600080600080600087602001511390506127938188602001518861318c565b60006127a58289602001518989613218565b9196509450905060006127c26127ba83611fac565b8a519061269d565b90506127ce8186613ee9565b935050505093509350939050565b60006127f06127eb8385614026565b612995565b61280290670de0b6b3a7640000613f84565b6128138466b1a2bc2ec50000613f84565b139392505050565b6000806000612828611959565b6060860151600654604051634903b0d160e01b815260006004820181905293945083926128c59286926001600160a01b0390911690634903b0d19060240160206040518083038186803b15801561287e57600080fd5b505afa158015612892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b69190613e4f565b8a60c001518a60e00151613352565b90925090506128d76105c38383614065565b6060880151600654604051634903b0d160e01b81526001600482015292965060009283926129759288926001600160a01b0390911690634903b0d19060240160206040518083038186803b15801561292e57600080fd5b505afa158015612942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129669190613e4f565b8c60a001518c60c00151613352565b90925090506129876105c38383614065565b965050505050509250929050565b6000611fb78261339a565b6000828414611cd8576000856129bf576129ba8585614026565b6129c9565b6129c98486614026565b9050611bcd818461269d565b6000806129e0611959565b6060850151600654604051634903b0d160e01b815260016004820152929350600092612a7e92859290916001600160a01b0390911690634903b0d19060240160206040518083038186803b158015612a3757600080fd5b505afa158015612a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6f9190613e4f565b8860a001518860c00151613352565b5090508460200151612a8f82611fac565b6110759190613ee9565b60005460ff16612ae25760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161053b565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000808315612b5d57612b3e85611fac565b612b479061407c565b9150612b566105c386856133d6565b9050612b81565b612b6a6105c3868561368a565b9150612b7585611fac565b612b7e9061407c565b90505b935093915050565b600080612b9461089f565b90506000612baf82856020015161269d90919063ffffffff16565b90506000612bc260015461273c84612995565b905080828660000151612bd59190613ee9565b6110759190614026565b600061171383608001518360800151612bf89190614065565b612c0d612c088660000151612995565b613181565b906138fc565b612c3760405180606001604052806000815260200160008152602001600081525090565b6000612c41611959565b6060850151600654604051634903b0d160e01b8152600060048201819052939450612cde92859290916001600160a01b0390911690634903b0d19060240160206040518083038186803b158015612c9757600080fd5b505afa158015612cab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccf9190613e4f565b8860c001518860e00151613352565b506060860151600654604051634903b0d160e01b815260016004820152929350600092612d7d92869290916001600160a01b0390911690634903b0d19060240160206040518083038186803b158015612d3657600080fd5b505afa158015612d4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6e9190613e4f565b8960a001518960c00151613352565b5090506040518060600160405280612d9484611fac565b8851612da09190613ee9565b8152602001612dae83611fac565b8860200151612dbd9190613ee9565b81526020018760400151815250935050505092915050565b60005460ff1615612df85760405162461bcd60e51b815260040161053b90613eab565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612b0f3390565b612e386105c36112f8565b600955565b6007544290600090612e5c906105c3906001600160801b031684614065565b90506000612e6861089f565b9050612e748282613f84565b600e6000828254612e859190613ee9565b9091555060009050612e986105c36112f8565b9050612ea48382613f84565b60116000828254612eb59190613ee9565b9091555050600754600090612eda90600160801b90046001600160801b031642614065565b90506103848110612f9b57612eee81611fac565b600f54600e54612efe9190614026565b612f089190613f42565b601055612f1481611fac565b601254601154612f249190614026565b612f2e9190613f42565b6013819055600e54600f55601154601255600780546001600160801b03428116600160801b0291161790556010546040517fd58b1a969d6ffc9c51fce55b333b20b1f3feace5e8a7ec000f124c019823348492612f92928252602082015260400190565b60405180910390a15b5050505050565b6007426000612fb060135490565b90506000612fbd60105490565b90506000612fd582612fcf8186614026565b90613908565b8554909150600090612ff4906105c3906001600160801b031687614065565b90506000620151808261300f670de0b6b3a76400008661269d565b6130199190613f84565b6130239190613f42565b9050808760010160008282546130399190613ee9565b909155505086546fffffffffffffffffffffffffffffffff19166001600160801b038716178755600187015460408051918252602082018390527f83b8bd3a9f97bed75f923bfd5746ac7dbb823ba73c2e68e4fa906e29e3da4ab4910160405180910390a150505050505050565b600061171383670de0b6b3a764000084613914565b6000600160ff1b8314806130d35750600160ff1b82145b156130f157604051630d01a11b60e21b815260040160405180910390fd5b600080600085126131025784613107565b846000035b915060008412613117578361311c565b836000035b9050600061312a83836139ef565b90506001600160ff1b038111156131575760405163bf79e8d960e01b81526004810182905260240161053b565b6000198087139086138082186001146131705782613175565b826000035b98975050505050505050565b6000611fb782613ab1565b82156131be5761319e612c0883612995565b81111561207d5760405163292e792760e01b815260040160405180910390fd5b60006131c98361407c565b905060006131ed8260026013546131e09190613f42565b60135461273c9190613ee9565b9050806131f984611fac565b1315612f9b5760405163376526e160e01b815260040160405180910390fd5b6000806000861561326e57600061322f868661368a565b905061323a81611fac565b925061324586611fac565b61324e9061407c565b935061326661325f612c0889612995565b8790612691565b915050611614565b600061327c612c088861407c565b9050600061328a87876133d6565b9050600080838311156132ff576132a18484614065565b90506132ac81613b03565b156132c3576132bc81600061368a565b91506132ff565b6040518181527f56dd3b38618f9202d3cd3e3b1b0b979b53c56ca0b3847420ce3b2f2cc2cff7df9060200160405180910390a16132ff81613bf4565b61330882611fac565b6133118a611fac565b61331a9061407c565b6133249190613ee9565b95506133336105c38285614065565b965061334284610d9889613181565b9450505050509450945094915050565b6000806001876133628888614007565b61336c9190613f70565b6133769190614065565b905061338e8461266f85670de0b6b3a7640000613f2a565b91509550959350505050565b6000600160ff1b8214156133c157604051631d0742e360e21b815260040160405180910390fd5b600082126133cf5781611fb7565b5060000390565b6004805460405163140e25ad60e31b81529182018490526000916001600160a01b039091169063a0712d6890602401600060405180830381600087803b15801561341f57600080fd5b505af1158015613433573d6000803e3d6000fd5b5050600654604051630b68372160e31b815260006004820181905260016024830152604482018890526064820187905293506001600160a01b039091169150635b41b90890608401602060405180830381600087803b15801561349557600080fd5b505af11580156134a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134cd9190613e4f565b600354604051630852cd8d60e31b8152600481018390529192506001600160a01b0316906342966c6890602401600060405180830381600087803b15801561351457600080fd5b505af1158015613528573d6000803e3d6000fd5b505050506000600660009054906101000a90046001600160a01b03166001600160a01b03166392526c0c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561357c57600080fd5b505afa158015613590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135b49190613e4f565b90506135c08282613c32565b925060006402540be4006135d48386614007565b6135de9190613f70565b9050613669600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561363157600080fd5b505afa158015613645573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126799190613e4f565b600c805460009061367b908490613f2a565b90915550939695505050505050565b60035460405163140e25ad60e31b8152600481018490526000916001600160a01b03169063a0712d6890602401600060405180830381600087803b1580156136d157600080fd5b505af11580156136e5573d6000803e3d6000fd5b5050600654604051630b68372160e31b815260016004820152600060248201819052604482018890526064820187905293506001600160a01b039091169150635b41b90890608401602060405180830381600087803b15801561374757600080fd5b505af115801561375b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377f9190613e4f565b60048054604051630852cd8d60e31b81529293506001600160a01b0316916342966c68916137b39185910190815260200190565b600060405180830381600087803b1580156137cd57600080fd5b505af11580156137e1573d6000803e3d6000fd5b505050506000600660009054906101000a90046001600160a01b03166001600160a01b03166392526c0c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561383557600080fd5b505afa158015613849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061386d9190613e4f565b90506138798282613c32565b925060006402540be40061388d8386614007565b6138979190613f70565b90506138ea600460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561363157600080fd5b600d805460009061367b908490613f2a565b60006117138383613c5c565b60006117138383613c68565b60008080600019858709858702925082811083820303915050806000141561395d5783828161395357634e487b7160e01b600052601260045260246000fd5b0492505050611713565b83811061398757604051631dcf306360e21b8152600481018290526024810185905260440161053b565b600084868809600260036001881981018916988990049182028318808302840302808302840302808302840302808302840302808302840302918202909203026000889003889004909101858311909403939093029303949094049190911702949350505050565b60008080600019848609848602925082811083820303915050670de0b6b3a76400008110613a335760405163698d9a0160e11b81526004810182905260240161053b565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff811182613a6d5780670de0b6b3a7640000850401945050505050611fb7565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6000808212156120275760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015260640161053b565b60065460405163556d6e9f60e01b81526001600482015260006024820181905260448201849052916001600160a01b03169063556d6e9f9060640160206040518083038186803b158015613b5657600080fd5b505afa925050508015613b86575060408051601f3d908101601f19168201909252613b8391810190613e4f565b60015b613beb577fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab604051613bdb906020808252600f908201526e5377617020696d706f737369626c6560881b604082015260600190565b60405180910390a1506000919050565b50600192915050565b613bfd81611fac565b6005546001600160a01b031660009081526014602052604081206001018054909190613c2a908490613ee9565b909155505050565b6000613c43826402540be400614065565b613c526402540be40085614007565b6117139190613f70565b600061171383836139ef565b6000600160ff1b831480613c7f5750600160ff1b82145b15613c9d5760405163b3c754a360e01b815260040160405180910390fd5b60008060008512613cae5784613cb3565b846000035b915060008412613cc35783613cc8565b836000035b90506000613cdf83670de0b6b3a764000084613914565b90506001600160ff1b03811115613d0c57604051637cb4bef560e01b81526004810182905260240161053b565b600019808713908613808218600114613d255782613175565b6131758361407c565b600060208284031215613d3f578081fd5b8135611713816140c2565b600060208284031215613d5b578081fd5b8151611713816140c2565b600080600080600060c08688031215613d7d578081fd5b8535613d88816140c2565b9450602086013593506080860187811115613da1578182fd5b94979396505050604084019392359260a00135919050565b60008060008060808587031215613dce578384fd5b8435613dd9816140c2565b935060208501359250604085013560028110613df3578283fd5b9396929550929360600135925050565b600080600060608486031215613e17578283fd5b8335613e22816140c2565b95602085013595506040909401359392505050565b600060208284031215613e48578081fd5b5035919050565b600060208284031215613e60578081fd5b5051919050565b8060005b6002811015613e8a578151845260209384019390910190600101613e6b565b50505050565b60608101613e9e8285613e67565b8260408301529392505050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b828152606081016117136020830184613e67565b600080821280156001600160ff1b0384900385131615613f0b57613f0b614096565b600160ff1b8390038412811615613f2457613f24614096565b50500190565b60008219821115613f3d57613f3d614096565b500190565b600082613f5157613f516140ac565b600160ff1b821460001984141615613f6b57613f6b614096565b500590565b600082613f7f57613f7f6140ac565b500490565b60006001600160ff1b0381841382841380821686840486111615613faa57613faa614096565b600160ff1b84871282811687830589121615613fc857613fc8614096565b858712925087820587128484161615613fe357613fe3614096565b87850587128184161615613ff957613ff9614096565b505050929093029392505050565b600081600019048311821515161561402157614021614096565b500290565b60008083128015600160ff1b85018412161561404457614044614096565b6001600160ff1b038401831381161561405f5761405f614096565b50500390565b60008282101561407757614077614096565b500390565b6000600160ff1b82141561409257614092614096565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b03811681146140d757600080fd5b5056fea264697066735822122076c9912de7b981973c67cfe9fe7e1347cd331574eaf6bc0464035b9c7c8e90e964736f6c63430008040033",
  "devdoc": {
    "events": {
      "DustGenerated(uint256)": {
        "params": {
          "vBaseAmount": "Amount of dust"
        }
      },
      "FundingRateUpdated(int256,int256)": {
        "params": {
          "cumulativeFundingRate": "Cumulative sum of all funding rate updates",
          "fundingRate": "Latest fundingRate update"
        }
      },
      "InsuranceFeeChanged(int256)": {
        "params": {
          "newInsuranceFee": "New value of insurance fee"
        }
      },
      "Log(string)": {
        "params": {
          "errorMessage": "Return error message"
        }
      },
      "TradingFeeChanged(int256)": {
        "params": {
          "newTradingFee": "New value of trading fee"
        }
      },
      "TwapUpdated(int256,int256)": {
        "params": {
          "newMarketTwap": "Latest market Time-weighted-average-price",
          "newOracleTwap": "Latest oracle Time-weighted-average-price"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "extendPosition(address,uint256,uint8,uint256)": {
        "params": {
          "account": "Address of the trader",
          "amount": "to be sold, in vQuote (if long) or vBase (if short)",
          "direction": "Long or Short",
          "minAmount": "Minimum amount received back, in vBase (if long) or vQuote (if short)"
        },
        "returns": {
          "openNotional": "Additional quote asset / liabilities accrued",
          "positionSize": "Additional base asset / liabilities accrued",
          "tradingFees": "Settled funding payments & Trading"
        }
      },
      "getGlobalPosition()": {
        "returns": {
          "_0": "Global position"
        }
      },
      "getInsuranceFee()": {
        "returns": {
          "_0": "insuranceFee"
        }
      },
      "getLpFundingPayments(address)": {
        "params": {
          "account": "Liquidity Provider"
        },
        "returns": {
          "upcomingFundingPayment": "Funding payment. 18 decimals"
        }
      },
      "getLpPosition(address)": {
        "params": {
          "account": "Address to get the LP position from"
        },
        "returns": {
          "_0": "Liquidity Provider position"
        }
      },
      "getLpPositionAfterWithdrawal(address)": {
        "params": {
          "account": "Liquidity Provider"
        },
        "returns": {
          "_0": "(Active) Liquidity Provider position"
        }
      },
      "getLpTradingFees(address)": {
        "params": {
          "account": "Liquidity Provider"
        },
        "returns": {
          "tradingFeesEarned": "Trading fees earned by the Liquidity Provider. 18 decimals"
        }
      },
      "getLpUnrealizedPnL(address)": {
        "params": {
          "account": "Liquidity Provider"
        },
        "returns": {
          "pnl": "Unrealized profit and loss. 18 decimals"
        }
      },
      "getMarketTwap()": {
        "returns": {
          "_0": "market twap. 18 decimals"
        }
      },
      "getOracleTwap()": {
        "returns": {
          "_0": "oracle twap. 18 decimals"
        }
      },
      "getTotalLiquidityProvided()": {
        "returns": {
          "_0": "market twap. 18 decimals"
        }
      },
      "getTraderFundingPayments(address)": {
        "params": {
          "account": "Trader"
        },
        "returns": {
          "upcomingFundingPayment": "Funding payment. 18 decimals"
        }
      },
      "getTraderPosition(address)": {
        "params": {
          "account": "Address to get the trading position from"
        },
        "returns": {
          "_0": "Trader position"
        }
      },
      "getTraderUnrealizedPnL(address)": {
        "params": {
          "account": "Trader"
        },
        "returns": {
          "pnl": "Unrealized profit and loss. 18 decimals"
        }
      },
      "getTradingFee()": {
        "returns": {
          "_0": "tradingFee"
        }
      },
      "indexPrice()": {
        "returns": {
          "_0": "Index price"
        }
      },
      "marketPrice()": {
        "returns": {
          "_0": "lastPrice Last traded price"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "provideLiquidity(address,uint256,uint256)": {
        "params": {
          "account": "Liquidity provider",
          "minLpAmount": "Minimum amount of Lp tokens minted. 18 decimals",
          "wadAmount": "Amount of vQuote provided. 18 decimals"
        },
        "returns": {
          "tradingFees": "Generated profit generated from trading fees"
        }
      },
      "reducePosition(address,uint256,uint256)": {
        "params": {
          "account": "Trader account to close position for.",
          "minAmount": "Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals",
          "proposedAmount": "Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals"
        },
        "returns": {
          "profit": "Profit realized",
          "vBaseAmount": "Position size reduction",
          "vQuoteProceeds": "Realized quote proceeds from closing the position"
        }
      },
      "removeLiquidity(address,uint256,uint256[2],uint256,uint256)": {
        "params": {
          "account": "Account of the LP to remove liquidity from",
          "liquidityAmountToRemove": "Amount of liquidity to be removed from the pool. 18 decimals",
          "minAmount": "Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals",
          "minVTokenAmounts": "Minimum amount of virtual tokens [vQuote, vBase] withdrawn from the curve pool. 18 decimals",
          "proposedAmount": "Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals"
        },
        "returns": {
          "profit": "Profit realized"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMathSD59x18__AbsInputTooSmall()": [
        {
          "notice": "Emitted when the input is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__DivInputTooSmall()": [
        {
          "notice": "Emitted when one of the inputs is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__DivOverflow(uint256)": [
        {
          "notice": "Emitted when one of the intermediary unsigned results overflows SD59x18."
        }
      ],
      "PRBMathSD59x18__MulInputTooSmall()": [
        {
          "notice": "Emitted when one of the inputs is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__MulOverflow(uint256)": [
        {
          "notice": "Emitted when the intermediary absolute result overflows SD59x18."
        }
      ],
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "Perpetual_AttemptReducePosition()": [
        {
          "notice": "Emitted when the user attempts to reduce their position using extendPosition"
        }
      ],
      "Perpetual_ExcessivePriceImpact()": [
        {
          "notice": "Emitted when the price impact of a position is too high"
        }
      ],
      "Perpetual_InsuranceFeeExcessive(int256)": [
        {
          "notice": "Emitted when the proposed insurance fee is excessive"
        }
      ],
      "Perpetual_InsuranceFeeInsufficient(int256)": [
        {
          "notice": "Emitted when the proposed insurance fee is insufficient"
        }
      ],
      "Perpetual_LPOpenPosition()": [
        {
          "notice": "Emitted when the liquidity provider has an open position"
        }
      ],
      "Perpetual_LPWithdrawExceedsBalance()": [
        {
          "notice": "Emitted when the user attempts to withdraw more liquidity than they have deposited"
        }
      ],
      "Perpetual_MarketBalanceTooLow(uint256)": [
        {
          "notice": "Emitted when a token balance of the market is lte 0"
        }
      ],
      "Perpetual_MarketEqualFees()": [
        {
          "notice": "Emitted when market mid fee does not equal out fee"
        }
      ],
      "Perpetual_NoOpenPosition()": [
        {
          "notice": "Emitted when the user does not have an open position"
        }
      ],
      "Perpetual_ProposedAmountExceedsMaxMarketPrice()": [
        {
          "notice": "Emitted when proposed amount is greater than maxVQuoteAmount"
        }
      ],
      "Perpetual_ProposedAmountExceedsPositionSize()": [
        {
          "notice": "Emitted when proposed amount is greater than position size"
        }
      ],
      "Perpetual_SenderNotClearingHouse()": [
        {
          "notice": "Emitted when the sender is not the clearing house"
        }
      ],
      "Perpetual_SenderNotClearingHouseOwner()": [
        {
          "notice": "Emitted when the sender is not the clearing house owner"
        }
      ],
      "Perpetual_TradingFeeExcessive(int256)": [
        {
          "notice": "Emitted when the proposed trading fee is excessive"
        }
      ],
      "Perpetual_TradingFeeInsufficient(int256)": [
        {
          "notice": "Emitted when the proposed trading fee is insufficient"
        }
      ],
      "Perpetual_VirtualTokenApprovalConstructor(uint256)": [
        {
          "notice": "Emitted when the constructor fails to give approval of a virtual token to the market"
        }
      ],
      "Perpetual_ZeroAddressConstructor(uint256)": [
        {
          "notice": "Emitted when the zero address is provided as a parameter in the constructor"
        }
      ]
    },
    "events": {
      "DustGenerated(uint256)": {
        "notice": "Emitted when (base) dust is generated"
      },
      "FundingRateUpdated(int256,int256)": {
        "notice": "Emitted when funding rate is updated"
      },
      "InsuranceFeeChanged(int256)": {
        "notice": "Emitted when insuranceFee is changed"
      },
      "Log(string)": {
        "notice": "Emitted when swap with cryptoswap pool fails"
      },
      "TradingFeeChanged(int256)": {
        "notice": "Emitted when tradingFee is changed"
      },
      "TwapUpdated(int256,int256)": {
        "notice": "Emitted when twap is updated"
      }
    },
    "kind": "user",
    "methods": {
      "clearingHouse()": {
        "notice": "Clearing House contract"
      },
      "extendPosition(address,uint256,uint8,uint256)": {
        "notice": "Open or increase a position, either long or short"
      },
      "getGlobalPosition()": {
        "notice": "Get global market position"
      },
      "getInsuranceFee()": {
        "notice": "Get the insurance fee of the market (the more volatile the market, the large the insurance fee)"
      },
      "getLpFundingPayments(address)": {
        "notice": "Get the approximate funding payments for a Liquidity Provider"
      },
      "getLpPosition(address)": {
        "notice": "Get the position of a liquidity provider"
      },
      "getLpPositionAfterWithdrawal(address)": {
        "notice": "Get the (active) position of a liquidity provider after withdrawing liquidity"
      },
      "getLpTradingFees(address)": {
        "notice": "Get the trading fees earned by a Liquidity Provider"
      },
      "getLpUnrealizedPnL(address)": {
        "notice": "Get the unrealized profit and Loss of a Liquidity Provider"
      },
      "getMarketTwap()": {
        "notice": "Get the market Time-weighted-average-price"
      },
      "getOracleTwap()": {
        "notice": "Get the oracle Time-weighted-average-price"
      },
      "getTotalLiquidityProvided()": {
        "notice": "Get the market Total Liquidity provided to the Crypto Swap pool"
      },
      "getTraderFundingPayments(address)": {
        "notice": "Get the approximate funding payments for a trader"
      },
      "getTraderPosition(address)": {
        "notice": "Get the position of a trader"
      },
      "getTraderUnrealizedPnL(address)": {
        "notice": "Get the unrealized profit and Loss of a trader"
      },
      "getTradingFee()": {
        "notice": "Get the trading fee of the market"
      },
      "indexPrice()": {
        "notice": "Return the current off-chain exchange rate for vBase/vQuote"
      },
      "market()": {
        "notice": "Curve CryptoSwap pool"
      },
      "marketPrice()": {
        "notice": "Return the last traded price (used for TWAP)"
      },
      "pause()": {
        "notice": "Pause the contract"
      },
      "provideLiquidity(address,uint256,uint256)": {
        "notice": "Provide liquidity to the pool"
      },
      "reducePosition(address,uint256,uint256)": {
        "notice": "Closes position from account holder"
      },
      "removeLiquidity(address,uint256,uint256[2],uint256,uint256)": {
        "notice": "Remove liquidity from the pool"
      },
      "unpause()": {
        "notice": "Unpause the contract"
      },
      "vBase()": {
        "notice": "vBase token (traded on CryptoSwap pool)"
      },
      "vQuote()": {
        "notice": "vQuote token (traded on CryptoSwap pool)"
      }
    },
    "notice": "Handles all the trading logic. Interact with the CryptoSwap pool",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 168,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4994,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "tradingFee",
        "offset": 0,
        "slot": "1",
        "type": "t_int256"
      },
      {
        "astId": 4996,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "insuranceFee",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      },
      {
        "astId": 5001,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "vBase",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IVBase)10389"
      },
      {
        "astId": 5006,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "vQuote",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IVQuote)10396"
      },
      {
        "astId": 5011,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "clearingHouse",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IClearingHouse)9658"
      },
      {
        "astId": 5016,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "market",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ICryptoSwap)9968"
      },
      {
        "astId": 5019,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "globalPosition",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(GlobalPosition)10867_storage"
      },
      {
        "astId": 5021,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "oracleCumulativeAmount",
        "offset": 0,
        "slot": "14",
        "type": "t_int256"
      },
      {
        "astId": 5023,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "oracleCumulativeAmountAtBeginningOfPeriod",
        "offset": 0,
        "slot": "15",
        "type": "t_int256"
      },
      {
        "astId": 5025,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "oracleTwap",
        "offset": 0,
        "slot": "16",
        "type": "t_int256"
      },
      {
        "astId": 5027,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "marketCumulativeAmount",
        "offset": 0,
        "slot": "17",
        "type": "t_int256"
      },
      {
        "astId": 5029,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "marketCumulativeAmountAtBeginningOfPeriod",
        "offset": 0,
        "slot": "18",
        "type": "t_int256"
      },
      {
        "astId": 5031,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "marketTwap",
        "offset": 0,
        "slot": "19",
        "type": "t_int256"
      },
      {
        "astId": 5036,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "traderPosition",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_struct(TraderPosition)10850_storage)"
      },
      {
        "astId": 5041,
        "contract": "contracts/Perpetual.sol:Perpetual",
        "label": "lpPosition",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_struct(LiquidityProviderPosition)10843_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IClearingHouse)9658": {
        "encoding": "inplace",
        "label": "contract IClearingHouse",
        "numberOfBytes": "20"
      },
      "t_contract(ICryptoSwap)9968": {
        "encoding": "inplace",
        "label": "contract ICryptoSwap",
        "numberOfBytes": "20"
      },
      "t_contract(IVBase)10389": {
        "encoding": "inplace",
        "label": "contract IVBase",
        "numberOfBytes": "20"
      },
      "t_contract(IVQuote)10396": {
        "encoding": "inplace",
        "label": "contract IVQuote",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(LiquidityProviderPosition)10843_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibPerpetual.LiquidityProviderPosition)",
        "numberOfBytes": "32",
        "value": "t_struct(LiquidityProviderPosition)10843_storage"
      },
      "t_mapping(t_address,t_struct(TraderPosition)10850_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibPerpetual.TraderPosition)",
        "numberOfBytes": "32",
        "value": "t_struct(TraderPosition)10850_storage"
      },
      "t_struct(GlobalPosition)10867_storage": {
        "encoding": "inplace",
        "label": "struct LibPerpetual.GlobalPosition",
        "members": [
          {
            "astId": 10852,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "timeOfLastTrade",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 10854,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "timeOfLastTwapUpdate",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 10856,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "cumFundingRate",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 10858,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "blockStartPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 10860,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "totalTradingFeesGrowth",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10862,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "totalLiquidityProvided",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10864,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "totalBaseFeesGrowth",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10866,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "totalQuoteFeesGrowth",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(LiquidityProviderPosition)10843_storage": {
        "encoding": "inplace",
        "label": "struct LibPerpetual.LiquidityProviderPosition",
        "members": [
          {
            "astId": 10830,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "openNotional",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 10832,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "positionSize",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 10834,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "cumFundingRate",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 10836,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "liquidityBalance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10838,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "totalTradingFeesGrowth",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10840,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "totalBaseFeesGrowth",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10842,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "totalQuoteFeesGrowth",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(TraderPosition)10850_storage": {
        "encoding": "inplace",
        "label": "struct LibPerpetual.TraderPosition",
        "members": [
          {
            "astId": 10845,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "openNotional",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 10847,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "positionSize",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 10849,
            "contract": "contracts/Perpetual.sol:Perpetual",
            "label": "cumFundingRate",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}