{
  "address": "0xE859bDC7975C90dC178F041b0647B40C52548bbE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "_ua",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "IncreOwnable_NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncreOwnable_NotPendingOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncreOwnable_TransferZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibReserve_ExcessiveDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__MulInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAbs",
          "type": "uint256"
        }
      ],
      "name": "PRBMathSD59x18__MulOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_ClearingHouseZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_CollateralAlreadyWhiteListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_ExcessiveCollateralWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_ExcessiveDecimalsConstructor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_InsufficientCollateralWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_InsuranceZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_OracleZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_SenderNotClearingHouse",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_UADebt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_UnsupportedCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_WithdrawBalanceBelowMin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_WithdrawExcessiveAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Vault_WithdrawReductionRatioTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "paramIndex",
          "type": "uint8"
        }
      ],
      "name": "Vault_ZeroAddressConstructor",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IClearingHouse",
          "name": "newClearingHouse",
          "type": "address"
        }
      ],
      "name": "ClearingHouseChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Metadata",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "CollateralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Metadata",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newWeight",
          "type": "uint256"
        }
      ],
      "name": "CollateralWeightChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IInsurance",
          "name": "newInsurance",
          "type": "address"
        }
      ],
      "name": "InsuranceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "OracleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TraderBadDebtGenerated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "TransferOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "TransferOwnerClaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UA",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UA_IDX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "addWhiteListedCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newWeight",
          "type": "uint256"
        }
      ],
      "name": "changeCollateralWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearingHouse",
      "outputs": [
        {
          "internalType": "contract IClearingHouse",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketIdx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "depositToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isTrader",
          "type": "bool"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amountUSDValue",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBadDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "marketIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenIdx",
          "type": "uint256"
        }
      ],
      "name": "getLpBalance",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketIdx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "getLpReserveValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalValueLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "marketIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenIdx",
          "type": "uint256"
        }
      ],
      "name": "getTraderBalance",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketIdx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTraderReserveValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhiteListedCollaterals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20Metadata",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct IVault.Collateral[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insurance",
      "outputs": [
        {
          "internalType": "contract IInsurance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IClearingHouse",
          "name": "newClearingHouse",
          "type": "address"
        }
      ],
      "name": "setClearingHouse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IInsurance",
          "name": "newInsurance",
          "type": "address"
        }
      ],
      "name": "setInsurance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "marketIdx",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isTrader",
          "type": "bool"
        }
      ],
      "name": "settleLiquidationOnCollaterals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketIdx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "isTrader",
          "type": "bool"
        }
      ],
      "name": "settlePnL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenToCollateralIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        }
      ],
      "name": "transferOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferUa",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whiteListedCollaterals",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketIdx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "withdrawToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isTrader",
          "type": "bool"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketIdx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "withdrawToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isTrader",
          "type": "bool"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketIdx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reductionRatio",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isTrader",
          "type": "bool"
        }
      ],
      "name": "withdrawPartial",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc1f7bf718228921f5033fdfdaef372ee7a537531eecbbbbe425fa0ddbfa0315b",
  "receipt": {
    "to": null,
    "from": "0x69C7c048e7C286B0a8Bcf7cD7620E71Ef7569421",
    "contractAddress": "0xE859bDC7975C90dC178F041b0647B40C52548bbE",
    "transactionIndex": 0,
    "gasUsed": "2706415",
    "logsBloom": "0x
    "blockHash": "0xe3bac891a1354cf5cb91b4cad13d1369924c3da5d0856bd9028535f7ccd19d20",
    "transactionHash": "0xc1f7bf718228921f5033fdfdaef372ee7a537531eecbbbbe425fa0ddbfa0315b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14861815,
        "transactionHash": "0xc1f7bf718228921f5033fdfdaef372ee7a537531eecbbbbe425fa0ddbfa0315b",
        "address": "0xE859bDC7975C90dC178F041b0647B40C52548bbE",
        "topics": [
          "0x5bb496b3f951b55d3a1d8e479725a4d25bdc7644fc355f0b71c540354820a1c5",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000069c7c048e7c286b0a8bcf7cd7620e71ef7569421"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe3bac891a1354cf5cb91b4cad13d1369924c3da5d0856bd9028535f7ccd19d20"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14861815,
        "transactionHash": "0xc1f7bf718228921f5033fdfdaef372ee7a537531eecbbbbe425fa0ddbfa0315b",
        "address": "0xE859bDC7975C90dC178F041b0647B40C52548bbE",
        "topics": [
          "0x7dba1be544024070cd5eebfa8bdd80a8b198cea8058c7d3cc1f8dd36e41ab2f7"
        ],
        "data": "0x0000000000000000000000000fc75c7afbe5b2dbb980539aa2775902b53fcaf10000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 0,
        "blockHash": "0xe3bac891a1354cf5cb91b4cad13d1369924c3da5d0856bd9028535f7ccd19d20"
      }
    ],
    "blockNumber": 14861815,
    "cumulativeGasUsed": "2706415",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0fc75C7aFBe5b2dBb980539aa2775902b53fcaF1"
  ],
  "solcInputHash": "0e343dabaf86f1433359bcaf3343f5ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_ua\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IncreOwnable_NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncreOwnable_NotPendingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncreOwnable_TransferZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibReserve_ExcessiveDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__MulInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\"}],\"name\":\"PRBMathSD59x18__MulOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_ClearingHouseZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_CollateralAlreadyWhiteListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_ExcessiveCollateralWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_ExcessiveDecimalsConstructor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_InsufficientCollateralWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_InsuranceZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_OracleZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_SenderNotClearingHouse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_UADebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_UnsupportedCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_WithdrawBalanceBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_WithdrawExcessiveAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault_WithdrawReductionRatioTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"paramIndex\",\"type\":\"uint8\"}],\"name\":\"Vault_ZeroAddressConstructor\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IClearingHouse\",\"name\":\"newClearingHouse\",\"type\":\"address\"}],\"name\":\"ClearingHouseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Metadata\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Metadata\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"CollateralWeightChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IInsurance\",\"name\":\"newInsurance\",\"type\":\"address\"}],\"name\":\"InsuranceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TraderBadDebtGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"TransferOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"TransferOwnerClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UA\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UA_IDX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"addWhiteListedCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"changeCollateralWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearingHouse\",\"outputs\":[{\"internalType\":\"contract IClearingHouse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isTrader\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amountUSDValue\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBadDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdx\",\"type\":\"uint256\"}],\"name\":\"getLpBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"getLpReserveValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdx\",\"type\":\"uint256\"}],\"name\":\"getTraderBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTraderReserveValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhiteListedCollaterals\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IVault.Collateral[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurance\",\"outputs\":[{\"internalType\":\"contract IInsurance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClearingHouse\",\"name\":\"newClearingHouse\",\"type\":\"address\"}],\"name\":\"setClearingHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IInsurance\",\"name\":\"newInsurance\",\"type\":\"address\"}],\"name\":\"setInsurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketIdx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTrader\",\"type\":\"bool\"}],\"name\":\"settleLiquidationOnCollaterals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"isTrader\",\"type\":\"bool\"}],\"name\":\"settlePnL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToCollateralIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferUa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whiteListedCollaterals\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isTrader\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isTrader\",\"type\":\"bool\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reductionRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTrader\",\"type\":\"bool\"}],\"name\":\"withdrawPartial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256,address,uint256,address,bool)\":{\"details\":\"No differentiated treatment of deposit in the UA token and other collaterals\",\"params\":{\"amount\":\"Amount to be used as the collateral of the position. Might not be 18 decimals\",\"depositToken\":\"Token to be used for the collateral of the position\",\"isTrader\":\"True if the user is a trader, False if the user is a liquidity provider\",\"marketIdx\":\"Index of the perpetual market\",\"user\":\"Account to deposit to\"},\"returns\":{\"amountUSDValue\":\"USD value of the deposited amount because pools' vQuote are USD-based\"}},\"getBadDebt()\":{\"returns\":{\"_0\":\"Amount of UA tokens borrowed by insurance. 18 decimals\"}},\"getLpReserveValue(uint256,address)\":{\"params\":{\"lp\":\"LP address\",\"marketIdx\":\"Perpetual market index\"},\"returns\":{\"_0\":\"reserveValue Value of collaterals in USD. 18 decimals\"}},\"getTotalValueLocked()\":{\"returns\":{\"_0\":\"Total Value Locked (tvl) in USD. 18 decimals\"}},\"getTraderReserveValue(uint256,address)\":{\"params\":{\"marketIdx\":\"Perpetual market index\",\"trader\":\"Trader address\"},\"returns\":{\"_0\":\"reserveValue Value of collaterals in USD. 18 decimals\"}},\"getWhiteListedCollaterals()\":{\"returns\":{\"_0\":\"List of Collateral tokens\"}},\"settleLiquidationOnCollaterals(address,address,uint256,bool)\":{\"params\":{\"isTrader\":\"True if the user is a trader, False if the user is a liquidity provider\",\"liquidatee\":\"Liquidatee\",\"marketIdx\":\"Market on which the liquidation has to occur\"}},\"settlePnL(uint256,address,int256,bool)\":{\"params\":{\"amount\":\"PnL amount in UA to apply. 18 decimals\",\"isTrader\":\"True if the user is a trader, False if the user is a liquidity provider\",\"marketIdx\":\"Index of the perpetual market\",\"user\":\"Account to apply the PnL to\"}},\"transferOwner(address,bool)\":{\"params\":{\"direct\":\"If 'true', ownership is directly transferred.\",\"recipient\":\"Account granted `owner` access control.\"}},\"transferUa(address,uint256)\":{\"params\":{\"amount\":\"Amount of UA tokens to be withdrawn. 18 decimals\",\"user\":\"Account to withdraw UA tokens to\"}},\"withdraw(uint256,address,uint256,address,bool)\":{\"details\":\"Unlike `deposit`, differentiated treatment of withdrawals in the UA token and other collaterals\",\"params\":{\"amount\":\"Amount to withdraw from the vault. Might not be 18 decimals (decimals of the token)\",\"isTrader\":\"True if the user is a trader, False if the user is a liquidity provider\",\"marketIdx\":\"Index of the perpetual market\",\"user\":\"Account to withdraw from\",\"withdrawToken\":\"Token to be withdrawn from the vault\"}},\"withdrawAll(uint256,address,address,bool)\":{\"params\":{\"isTrader\":\"True if the user is a trader, False if the user is a liquidity provider\",\"marketIdx\":\"Index of the perpetual market\",\"user\":\"Account to withdraw from\",\"withdrawToken\":\"Token to be withdrawn from the vault\"}},\"withdrawPartial(uint256,address,uint256,bool)\":{\"params\":{\"isTrader\":\"True if the user is a trader, False if the user is a liquidity provider\",\"marketIdx\":\"Index of the perpetual market\",\"reductionRatio\":\"Share of collateral to be withdrawn. Min: 0. Max: 1e18\",\"user\":\"Account to withdraw from\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"IncreOwnable_NotOwner()\":[{\"notice\":\"Emitted when the sender is not the owner\"}],\"IncreOwnable_NotPendingOwner()\":[{\"notice\":\"Emitted when the sender is not the pending owner\"}],\"IncreOwnable_TransferZeroAddress()\":[{\"notice\":\"Emitted when the proposed owner is equal to the zero address\"}],\"LibReserve_ExcessiveDecimals()\":[{\"notice\":\"Emitted when the proposed token decimals exceeds MAX_DECIMALS\"}],\"PRBMathSD59x18__MulInputTooSmall()\":[{\"notice\":\"Emitted when one of the inputs is MIN_SD59x18.\"}],\"PRBMathSD59x18__MulOverflow(uint256)\":[{\"notice\":\"Emitted when the intermediary absolute result overflows SD59x18.\"}],\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"Vault_ClearingHouseZeroAddress()\":[{\"notice\":\"Emitted when the proposed clearingHouse address is equal to the zero address\"}],\"Vault_CollateralAlreadyWhiteListed()\":[{\"notice\":\"Emitted when owner tries to whitelist a collateral already whitelisted\"}],\"Vault_ExcessiveCollateralWeight()\":[{\"notice\":\"Emitted when the proposed collateral weight is above the limit\"}],\"Vault_ExcessiveDecimalsConstructor()\":[{\"notice\":\"Emitted when the decimals of the proposed reserve token are gt 18\"}],\"Vault_InsufficientBalance()\":[{\"notice\":\"Emitted when a user attempts to withdraw more collateral than available in vault\"}],\"Vault_InsufficientCollateralWeight()\":[{\"notice\":\"Emitted when the proposed collateral weight is under the limit\"}],\"Vault_InsuranceZeroAddress()\":[{\"notice\":\"Emitted when the proposed insurance address is equal to the zero address\"}],\"Vault_OracleZeroAddress()\":[{\"notice\":\"Emitted when the proposed oracle address is equal to the zero address\"}],\"Vault_SenderNotClearingHouse()\":[{\"notice\":\"Emitted when the sender is not the clearing house\"}],\"Vault_UADebt()\":[{\"notice\":\"Emitted when user tries to withdraw collateral while having a UA debt\"}],\"Vault_UnsupportedCollateral()\":[{\"notice\":\"Emitted when a user attempts to use a token which is not whitelisted as collateral\"}],\"Vault_WithdrawBalanceBelowMin()\":[{\"notice\":\"Emitted when a user attempts to withdraw an amount that reduces their balance below mMIN_DEPOSIT_AMOUNT\"}],\"Vault_WithdrawExcessiveAmount()\":[{\"notice\":\"Emitted when a user attempts to withdraw more than their balance\"}],\"Vault_WithdrawReductionRatioTooHigh()\":[{\"notice\":\"Emitted when a user attempts to withdraw with a reduction ratio above 1e18\"}],\"Vault_ZeroAddressConstructor(uint8)\":[{\"notice\":\"Emitted when the zero address is provided as a parameter in the constructor\"}]},\"events\":{\"ClearingHouseChanged(address)\":{\"notice\":\"Emitted when a new ClearingHouse is connected to the vault\"},\"CollateralAdded(address,uint256)\":{\"notice\":\"Emitted when a new Oracle is connected to the vault\"},\"CollateralWeightChanged(address,uint256)\":{\"notice\":\"Emitted when a new Oracle is connected to the vault\"},\"Deposit(uint256,address,address,uint256)\":{\"notice\":\"Emitted when collateral is deposited into the vault\"},\"InsuranceChanged(address)\":{\"notice\":\"Emitted when a new Insurance is connected to the vault\"},\"OracleChanged(address)\":{\"notice\":\"Emitted when a new Oracle is connected to the vault\"},\"TraderBadDebtGenerated(uint256,address,uint256)\":{\"notice\":\"Emitted when bad debt is settled for by the insurance reserve\"},\"Withdraw(uint256,address,address,uint256)\":{\"notice\":\"Emitted when collateral is withdrawn from the vault\"}},\"kind\":\"user\",\"methods\":{\"addWhiteListedCollateral(address,uint256)\":{\"notice\":\"Add a new token to the list of white listed ERC20 which can be used as collaterals\"},\"changeCollateralWeight(address,uint256)\":{\"notice\":\"Change weight of a white listed collateral         Useful as a risk mitigation measure in case one collateral drops in value\"},\"claimOwner()\":{\"notice\":\"`pendingOwner` can claim `owner` account.\"},\"deposit(uint256,address,uint256,address,bool)\":{\"notice\":\"Deposit reserveTokens to account\"},\"getBadDebt()\":{\"notice\":\"Get the amount of UA tokens borrowed by insurance (bad debt)\"},\"getLpReserveValue(uint256,address)\":{\"notice\":\"Get the balance of a liquidity provider, accounted for in USD. 18 decimals\"},\"getTotalValueLocked()\":{\"notice\":\"Get all value of all tokens deposited into the vault\"},\"getTraderReserveValue(uint256,address)\":{\"notice\":\"Get the balance of a trader, accounted for in USD. 18 decimals\"},\"getWhiteListedCollaterals()\":{\"notice\":\"Get all collateral tokens available for margin trading\"},\"settleLiquidationOnCollaterals(address,address,uint256,bool)\":{\"notice\":\"Allow liquidator to buy back collateral(s) of liquidated user at discounted price whereby settling his debt\"},\"settlePnL(uint256,address,int256,bool)\":{\"notice\":\"Withdraw tokens from account\"},\"tokenToCollateralIdx(address)\":{\"notice\":\"Map white listed collateral tokens to their whiteListedCollaterals indexes\"},\"transferOwner(address,bool)\":{\"notice\":\"Transfer `owner` account.\"},\"transferUa(address,uint256)\":{\"notice\":\"Transfer UA tokens from the vault\"},\"withdraw(uint256,address,uint256,address,bool)\":{\"notice\":\"Withdraw tokens from account\"},\"withdrawAll(uint256,address,address,bool)\":{\"notice\":\"Withdraw all tokens from account\"},\"withdrawPartial(uint256,address,uint256,bool)\":{\"notice\":\"Withdraw share of tokens from account, across multi-collaterals\"}},\"notice\":\"Keeps track of all token reserves for all market\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x47c0131bd8a972c31596958aa86752ea18d60e33f1cd94d412b9e29fd6ab25a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// contracts\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IncreOwnable} from \\\"./utils/IncreOwnable.sol\\\";\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IInsurance} from \\\"./interfaces/IInsurance.sol\\\";\\nimport {IOracle} from \\\"./interfaces/IOracle.sol\\\";\\nimport {IVault} from \\\"./interfaces/IVault.sol\\\";\\nimport {IClearingHouse} from \\\"./interfaces/IClearingHouse.sol\\\";\\n\\n// libraries\\nimport {LibReserve} from \\\"./lib/LibReserve.sol\\\";\\nimport {LibMath} from \\\"./lib/LibMath.sol\\\";\\n\\n/// @notice Keeps track of all token reserves for all market\\ncontract Vault is IVault, IncreOwnable {\\n    using SafeERC20 for IERC20Metadata;\\n    using LibMath for uint256;\\n    using LibMath for int256;\\n\\n    // constants\\n    IERC20Metadata public immutable UA;\\n    uint256 public constant UA_IDX = 0;\\n\\n    // parameterization\\n    uint256 internal constant LIQUIDATION_DISCOUNT = 95e16; // TODO: make parametrize\\n\\n    // dependencies\\n    IClearingHouse public override clearingHouse;\\n    IInsurance public override insurance;\\n    IOracle public override oracle;\\n\\n    // global state\\n    uint256 internal traderBadDebt;\\n    Collateral[] public whiteListedCollaterals;\\n    /// @notice Map white listed collateral tokens to their whiteListedCollaterals indexes\\n    mapping(IERC20Metadata => uint256) public tokenToCollateralIdx;\\n\\n    // user state\\n\\n    /* Balances of users and liquidity providers\\n    We follow a strict separate margin design where have to deposit collateral for any market\\n\\n    */\\n    //      trader  =>       marketIdx =>   collateralIdx => balance (might not be 18 decimals)\\n    mapping(address => mapping(uint256 => mapping(uint256 => int256))) private traderBalances;\\n    //      lp      =>       marketIdx =>   collateralIdx => balance (might not be 18 decimals)\\n    mapping(address => mapping(uint256 => mapping(uint256 => int256))) private lpBalances;\\n\\n    constructor(IERC20Metadata _ua) {\\n        if (address(_ua) == address(0)) revert Vault_ZeroAddressConstructor(0);\\n\\n        UA = _ua;\\n        addWhiteListedCollateral(_ua, 1e18);\\n    }\\n\\n    modifier onlyClearingHouse() {\\n        if (msg.sender != address(clearingHouse)) revert Vault_SenderNotClearingHouse();\\n        _;\\n    }\\n\\n    /* ****************** */\\n    /*     User flow      */\\n    /* ****************** */\\n\\n    /// @notice Deposit reserveTokens to account\\n    /// @dev No differentiated treatment of deposit in the UA token and other collaterals\\n    /// @param marketIdx Index of the perpetual market\\n    /// @param user Account to deposit to\\n    /// @param amount Amount to be used as the collateral of the position. Might not be 18 decimals\\n    /// @param depositToken Token to be used for the collateral of the position\\n    /// @param isTrader True if the user is a trader, False if the user is a liquidity provider\\n    /// @return amountUSDValue USD value of the deposited amount because pools' vQuote are USD-based\\n    function deposit(\\n        uint256 marketIdx,\\n        address user,\\n        uint256 amount,\\n        IERC20Metadata depositToken,\\n        bool isTrader\\n    ) external override onlyClearingHouse returns (int256 amountUSDValue) {\\n        uint256 tokenIdx = tokenToCollateralIdx[depositToken];\\n        if (!((tokenIdx != 0) || (address(depositToken) == address(UA)))) revert Vault_UnsupportedCollateral();\\n\\n        _changeBalance(user, marketIdx, tokenIdx, amount.toInt256(), isTrader);\\n\\n        IERC20Metadata(depositToken).safeTransferFrom(user, address(this), amount);\\n\\n        emit Deposit(marketIdx, user, address(depositToken), amount);\\n\\n        return _getCollateralUSDValue(whiteListedCollaterals[tokenIdx], amount.toInt256());\\n    }\\n\\n    /// @notice Withdraw all tokens from account\\n    /// @param marketIdx Index of the perpetual market\\n    /// @param user Account to withdraw from\\n    /// @param withdrawToken Token to be withdrawn from the vault\\n    /// @param isTrader True if the user is a trader, False if the user is a liquidity provider\\n    function withdrawAll(\\n        uint256 marketIdx,\\n        address user,\\n        IERC20Metadata withdrawToken,\\n        bool isTrader\\n    ) external override onlyClearingHouse {\\n        uint256 tokenIdx = tokenToCollateralIdx[withdrawToken];\\n        if (!((tokenIdx != 0) || (address(withdrawToken) == address(UA)))) revert Vault_UnsupportedCollateral();\\n\\n        int256 fullAmount = isTrader\\n            ? traderBalances[user][marketIdx][tokenIdx]\\n            : lpBalances[user][marketIdx][tokenIdx];\\n\\n        return withdraw(marketIdx, user, fullAmount.toUint256(), withdrawToken, isTrader);\\n    }\\n\\n    /// @notice Withdraw share of tokens from account, across multi-collaterals\\n    /// @param marketIdx Index of the perpetual market\\n    /// @param user Account to withdraw from\\n    /// @param reductionRatio Share of collateral to be withdrawn. Min: 0. Max: 1e18\\n    /// @param isTrader True if the user is a trader, False if the user is a liquidity provider\\n    function withdrawPartial(\\n        uint256 marketIdx,\\n        address user,\\n        uint256 reductionRatio,\\n        bool isTrader\\n    ) external override onlyClearingHouse {\\n        if (reductionRatio > 1e18) revert Vault_WithdrawReductionRatioTooHigh();\\n\\n        // the amount to withdraw accross all collateral\\n        int256 reserveValue = _getUserReserveValue(marketIdx, user, isTrader);\\n        int256 amountToWithdraw = reserveValue.wadMul(reductionRatio.toInt256());\\n\\n        Collateral[] memory collaterals = whiteListedCollaterals;\\n        int256 collateralBalance;\\n        int256 wadCollateralBalance;\\n        int256 tokenAmountToWithdraw;\\n\\n        for (uint256 i = collaterals.length; i > 0; i--) {\\n            collateralBalance = isTrader ? traderBalances[user][marketIdx][i - 1] : lpBalances[user][marketIdx][i - 1];\\n            wadCollateralBalance = LibReserve.tokenToWad(collaterals[i - 1].decimals, collateralBalance);\\n\\n            if (wadCollateralBalance >= amountToWithdraw) {\\n                tokenAmountToWithdraw = LibReserve.wadToToken(collaterals[i - 1].decimals, amountToWithdraw);\\n\\n                withdraw(marketIdx, user, tokenAmountToWithdraw.toUint256(), collaterals[i - 1].asset, isTrader);\\n                break;\\n            } else {\\n                withdraw(marketIdx, user, collateralBalance.toUint256(), collaterals[i - 1].asset, isTrader);\\n                amountToWithdraw -= wadCollateralBalance;\\n            }\\n        }\\n    }\\n\\n    /// @notice Withdraw tokens from account\\n    /// @dev Unlike `deposit`, differentiated treatment of withdrawals in the UA token and other collaterals\\n    /// @param marketIdx Index of the perpetual market\\n    /// @param user Account to withdraw from\\n    /// @param amount Amount to withdraw from the vault. Might not be 18 decimals (decimals of the token)\\n    /// @param withdrawToken Token to be withdrawn from the vault\\n    /// @param isTrader True if the user is a trader, False if the user is a liquidity provider\\n    function withdraw(\\n        uint256 marketIdx,\\n        address user,\\n        uint256 amount,\\n        IERC20Metadata withdrawToken,\\n        bool isTrader\\n    ) public override onlyClearingHouse {\\n        uint256 tokenIdx = tokenToCollateralIdx[withdrawToken];\\n        if (!((tokenIdx != 0) || (address(withdrawToken) == address(UA)))) revert Vault_UnsupportedCollateral();\\n\\n        // user can't withdraw his collateral with a UA debt\\n        int256 uaBalance = isTrader ? traderBalances[user][marketIdx][UA_IDX] : lpBalances[user][marketIdx][UA_IDX];\\n        if (uaBalance < 0) revert Vault_UADebt();\\n\\n        // user can't withdraw more than his collateral balance\\n        int256 collateralBalance = isTrader\\n            ? traderBalances[user][marketIdx][tokenIdx]\\n            : lpBalances[user][marketIdx][tokenIdx];\\n        if (amount.toInt256() > collateralBalance) revert Vault_WithdrawExcessiveAmount();\\n\\n        _changeBalance(user, marketIdx, tokenIdx, -amount.toInt256(), isTrader);\\n\\n        if (amount > IERC20Metadata(withdrawToken).balanceOf(address(this))) revert Vault_InsufficientBalance();\\n\\n        // transfer funds to user, whatever the collateral used\\n        emit Withdraw(marketIdx, user, address(withdrawToken), amount);\\n\\n        IERC20Metadata(withdrawToken).safeTransfer(user, amount);\\n    }\\n\\n    /// @notice Allow liquidator to buy back collateral(s) of liquidated user at discounted price whereby settling his debt\\n    /// @param liquidatee Liquidatee\\n    /// @param marketIdx Market on which the liquidation has to occur\\n    /// @param isTrader True if the user is a trader, False if the user is a liquidity provider\\n    function settleLiquidationOnCollaterals(\\n        address liquidator,\\n        address liquidatee,\\n        uint256 marketIdx,\\n        bool isTrader\\n    ) external override onlyClearingHouse {\\n        _settleLiquidationOnCollaterals(liquidator, liquidatee, marketIdx, isTrader);\\n    }\\n\\n    /// @notice Withdraw tokens from account\\n    /// @param marketIdx Index of the perpetual market\\n    /// @param user Account to apply the PnL to\\n    /// @param amount PnL amount in UA to apply. 18 decimals\\n    /// @param isTrader True if the user is a trader, False if the user is a liquidity provider\\n    function settlePnL(\\n        uint256 marketIdx,\\n        address user,\\n        int256 amount,\\n        bool isTrader\\n    ) external override onlyClearingHouse {\\n        _changeBalance(user, marketIdx, UA_IDX, amount, isTrader);\\n    }\\n\\n    /// @notice Transfer UA tokens from the vault\\n    /// @param user Account to withdraw UA tokens to\\n    /// @param amount Amount of UA tokens to be withdrawn. 18 decimals\\n    function transferUa(address user, uint256 amount) external override onlyClearingHouse {\\n        UA.safeTransfer(user, amount);\\n    }\\n\\n    /* ****************** */\\n    /*     Governance     */\\n    /* ****************** */\\n\\n    function setClearingHouse(IClearingHouse newClearingHouse) external onlyOwner {\\n        if (address(newClearingHouse) == address(0)) revert Vault_ClearingHouseZeroAddress();\\n        clearingHouse = newClearingHouse;\\n        emit ClearingHouseChanged(newClearingHouse);\\n    }\\n\\n    function setInsurance(IInsurance newInsurance) external onlyOwner {\\n        if (address(newInsurance) == address(0)) revert Vault_InsuranceZeroAddress();\\n        insurance = newInsurance;\\n        emit InsuranceChanged(newInsurance);\\n    }\\n\\n    function setOracle(IOracle newOracle) external onlyOwner {\\n        if (address(newOracle) == address(0)) revert Vault_OracleZeroAddress();\\n        oracle = newOracle;\\n        emit OracleChanged(newOracle);\\n    }\\n\\n    /// @notice Add a new token to the list of white listed ERC20 which can be used as collaterals\\n    function addWhiteListedCollateral(IERC20Metadata asset, uint256 weight) public onlyOwner {\\n        if (weight < 1e16) revert Vault_InsufficientCollateralWeight();\\n        if (weight > 1e18) revert Vault_ExcessiveCollateralWeight();\\n\\n        for (uint256 i = 0; i < whiteListedCollaterals.length; i++) {\\n            if (whiteListedCollaterals[i].asset == asset) revert Vault_CollateralAlreadyWhiteListed();\\n        }\\n\\n        whiteListedCollaterals.push(Collateral({asset: asset, weight: weight, decimals: asset.decimals()}));\\n        tokenToCollateralIdx[asset] = whiteListedCollaterals.length - 1;\\n\\n        emit CollateralAdded(asset, weight);\\n    }\\n\\n    /// @notice Change weight of a white listed collateral\\n    ///         Useful as a risk mitigation measure in case one collateral drops in value\\n    function changeCollateralWeight(IERC20Metadata asset, uint256 newWeight) external onlyOwner {\\n        uint256 tokenIdx = tokenToCollateralIdx[asset];\\n        if (!((tokenIdx != 0) || (address(asset) == address(UA)))) revert Vault_UnsupportedCollateral();\\n\\n        if (newWeight < 1e16) revert Vault_InsufficientCollateralWeight();\\n        if (newWeight > 1e18) revert Vault_ExcessiveCollateralWeight();\\n\\n        for (uint256 i = 0; i < whiteListedCollaterals.length; i++) {\\n            if (whiteListedCollaterals[i].asset == asset) {\\n                whiteListedCollaterals[i].weight = newWeight;\\n            }\\n        }\\n\\n        emit CollateralWeightChanged(asset, newWeight);\\n    }\\n\\n    /* ****************** */\\n    /*   User getter      */\\n    /* ****************** */\\n\\n    /// @notice Get the balance of a trader, accounted for in USD. 18 decimals\\n    /// @param marketIdx Perpetual market index\\n    /// @param trader Trader address\\n    /// @return reserveValue Value of collaterals in USD. 18 decimals\\n    function getTraderReserveValue(uint256 marketIdx, address trader) external view override returns (int256) {\\n        return _getUserReserveValue(marketIdx, trader, true);\\n    }\\n\\n    /// @notice Get the balance of a liquidity provider, accounted for in USD. 18 decimals\\n    /// @param marketIdx Perpetual market index\\n    /// @param lp LP address\\n    /// @return reserveValue Value of collaterals in USD. 18 decimals\\n    function getLpReserveValue(uint256 marketIdx, address lp) external view override returns (int256) {\\n        return _getUserReserveValue(marketIdx, lp, false);\\n    }\\n\\n    function getTraderBalance(\\n        address user,\\n        uint256 marketIdx,\\n        uint256 tokenIdx\\n    ) external view override returns (int256) {\\n        return traderBalances[user][marketIdx][tokenIdx];\\n    }\\n\\n    function getLpBalance(\\n        address user,\\n        uint256 marketIdx,\\n        uint256 tokenIdx\\n    ) external view override returns (int256) {\\n        return lpBalances[user][marketIdx][tokenIdx];\\n    }\\n\\n    /* ****************** */\\n    /*   Global getter    */\\n    /* ****************** */\\n\\n    /// @notice Get the amount of UA tokens borrowed by insurance (bad debt)\\n    /// @return Amount of UA tokens borrowed by insurance. 18 decimals\\n    function getBadDebt() external view override returns (uint256) {\\n        return traderBadDebt;\\n    }\\n\\n    /// @notice Get all value of all tokens deposited into the vault\\n    /// @return Total Value Locked (tvl) in USD. 18 decimals\\n    function getTotalValueLocked() external view override returns (uint256) {\\n        Collateral[] memory collaterals = whiteListedCollaterals;\\n        uint256 tvl = 0;\\n\\n        for (uint256 i = 0; i < collaterals.length; i++) {\\n            int256 collateralBalance = collaterals[i].asset.balanceOf(address(this)).toInt256();\\n\\n            if (collateralBalance > 0) {\\n                tvl += _getUAUndiscountedCollateralPrice(collaterals[i], collateralBalance);\\n            }\\n        }\\n\\n        return tvl;\\n    }\\n\\n    /// @notice Get all collateral tokens available for margin trading\\n    /// @return List of Collateral tokens\\n    function getWhiteListedCollaterals() external view override returns (Collateral[] memory) {\\n        return whiteListedCollaterals;\\n    }\\n\\n    /* ****************** */\\n    /*   Internal Fcts    */\\n    /* ****************** */\\n\\n    function _settleLiquidationOnCollaterals(\\n        address liquidator,\\n        address liquidatee,\\n        uint256 marketIdx,\\n        bool isTrader\\n    ) internal {\\n        int256 balance = isTrader\\n            ? traderBalances[liquidatee][marketIdx][UA_IDX]\\n            : lpBalances[liquidatee][marketIdx][UA_IDX];\\n\\n        uint256 debtSize = balance < 0 ? (-balance).toUint256() : 0;\\n\\n        if (debtSize == 0) return;\\n\\n        Collateral[] memory collaterals = whiteListedCollaterals;\\n        int256 collateralBalance;\\n\\n        for (uint256 i = 0; i < collaterals.length; i++) {\\n            collateralBalance = isTrader\\n                ? traderBalances[liquidatee][marketIdx][i]\\n                : lpBalances[liquidatee][marketIdx][i];\\n\\n            if (collateralBalance > 0) {\\n                uint256 collateralUAValue = _getUAUndiscountedCollateralPrice(collaterals[i], collateralBalance);\\n\\n                if (collateralUAValue < debtSize) {\\n                    // sell 100% of the collateral\\n                    debtSize -= _sellCollateral(\\n                        liquidator,\\n                        liquidatee,\\n                        marketIdx,\\n                        collaterals[i],\\n                        collateralBalance,\\n                        1e18,\\n                        isTrader\\n                    );\\n                } else {\\n                    // sell only what is needed of the collateral to cover debtSize\\n                    uint256 collateralSellRatio = debtSize.wadDiv(collateralUAValue);\\n                    _sellCollateral(\\n                        liquidator,\\n                        liquidatee,\\n                        marketIdx,\\n                        collaterals[i],\\n                        collateralBalance,\\n                        collateralSellRatio,\\n                        isTrader\\n                    );\\n                    debtSize = 0;\\n                    break;\\n                }\\n            }\\n        }\\n        // liquidator can't buy back all the debt\\n        // use funds from insurance if UA amount is insufficient\\n        if (debtSize > 0) {\\n            if (UA.balanceOf(address(this)) < debtSize) {\\n                insurance.settleDebt(debtSize);\\n            }\\n\\n            traderBadDebt += debtSize;\\n            emit TraderBadDebtGenerated(marketIdx, liquidatee, debtSize);\\n        }\\n    }\\n\\n    function _sellCollateral(\\n        address liquidator,\\n        address liquidatee,\\n        uint256 marketIdx,\\n        Collateral memory collateral,\\n        int256 collateralBalance,\\n        uint256 collateralSellRatio, // max 1e18\\n        bool isTrader\\n    ) internal returns (uint256) {\\n        uint256 collateralToSell = (collateralBalance.wadMul(collateralSellRatio.toInt256())).toUint256();\\n\\n        // apply a discount to the collateral UA price & harmonize decimals to 18\\n        uint256 wadCollateralToSell = (LibReserve.tokenToWad(collateral.decimals, collateralToSell.toInt256()))\\n            .toUint256();\\n        uint256 discountedUAPriceOfCollateral = wadCollateralToSell.wadMul(LIQUIDATION_DISCOUNT);\\n\\n        // liquidatee receives a discounted value of his collateral in UA\\n        _changeBalance(liquidatee, marketIdx, UA_IDX, discountedUAPriceOfCollateral.toInt256(), isTrader);\\n        IERC20Metadata(UA).safeTransferFrom(liquidator, address(this), discountedUAPriceOfCollateral);\\n\\n        // liquidator receives the real value of the collateral\\n        _changeBalance(\\n            liquidator,\\n            marketIdx,\\n            tokenToCollateralIdx[collateral.asset],\\n            collateralToSell.toInt256(),\\n            true\\n        );\\n\\n        return discountedUAPriceOfCollateral;\\n    }\\n\\n    /// @notice Evaluate the Y USD price at which to sell X quantity of a given collateral\\n    /// @dev As a reminder, UA value = USD value\\n    /// @dev Same as _getCollateralUSDValue, expect that without weight\\n    function _getUAUndiscountedCollateralPrice(Collateral memory collateral, int256 collateralBalance)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        int256 wadCollateralBalance = LibReserve.tokenToWad(collateral.decimals, collateralBalance); // 18 decimals\\n\\n        int256 pricePerUnit = oracle.getPrice(address(collateral.asset)); // 18 decimals\\n        return wadCollateralBalance.wadMul(pricePerUnit).toUint256();\\n    }\\n\\n    function _changeBalance(\\n        address user,\\n        uint256 marketIdx,\\n        uint256 tokenIdx,\\n        int256 amount,\\n        bool isTrader\\n    ) internal {\\n        if (isTrader) {\\n            traderBalances[user][marketIdx][tokenIdx] += amount;\\n        } else {\\n            lpBalances[user][marketIdx][tokenIdx] += amount;\\n        }\\n    }\\n\\n    /// @notice Get the balance of a trader, accounted for in USD. 18 decimals\\n    /// @param marketIdx Perpetual market index\\n    /// @param user User address\\n    /// @return reserveValue Value of collaterals in USD. 18 decimals\\n    function _getUserReserveValue(\\n        uint256 marketIdx,\\n        address user,\\n        bool isTrader\\n    ) internal view returns (int256) {\\n        Collateral[] memory collaterals = whiteListedCollaterals;\\n        int256 collateralBalance;\\n\\n        int256 reserveValue = 0;\\n        for (uint256 i = 0; i < collaterals.length; i++) {\\n            collateralBalance = isTrader ? traderBalances[user][marketIdx][i] : lpBalances[user][marketIdx][i];\\n\\n            // user might have a negative UA balance\\n            if (collateralBalance != 0) {\\n                reserveValue += _getCollateralUSDValue(collaterals[i], collateralBalance);\\n            }\\n        }\\n\\n        return reserveValue;\\n    }\\n\\n    /// @notice Return collateral value in USD, normalized to 18 decimals\\n    /// @param collateral Collateral to evaluate\\n    /// @param collateralBalance Balance in the collateral. Might not be 18 decimals (decimals of the collateral token)\\n    /// @return collateralUSDValue Value of the collateral in USD, harmonized to 18 decimals\\n    function _getCollateralUSDValue(Collateral memory collateral, int256 collateralBalance)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        // collateralUSDValue = collateralBalance * weight * oracleUSDPrice\\n        int256 wadCollateralBalance = LibReserve.tokenToWad(collateral.decimals, collateralBalance); // 18 decimals\\n        int256 weightedWadCollateralBalance = wadCollateralBalance.wadMul(collateral.weight.toInt256()); // 18 decimals\\n\\n        int256 pricePerUnit = oracle.getPrice(address(collateral.asset)); // 18 decimals\\n        int256 collateralUSDValue = weightedWadCollateralBalance.wadMul(pricePerUnit);\\n\\n        return collateralUSDValue;\\n    }\\n}\\n\",\"keccak256\":\"0xe60d0572d162512bb9dc99ab2202ad5ee6d755ac626121bb1898ec542d974531\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IClearingHouse.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\nimport {IPerpetual} from \\\"./IPerpetual.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\n\\n// libraries\\nimport {LibPerpetual} from \\\"../lib/LibPerpetual.sol\\\";\\n\\ninterface IClearingHouse {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error ClearingHouse_ZeroAddressConstructor(uint8 paramIndex);\\n\\n    /// @notice Emitted when there is not enough margin to withdraw the requested amount\\n    error ClearingHouse_WithdrawInsufficientMargin();\\n\\n    /// @notice Emitted when the position is not reduced entirely using closePositionWithdrawCollateral\\n    error ClearingHouse_ClosePositionStillOpen();\\n\\n    /// @notice Emitted when the liquidatee does not have an open position\\n    error ClearingHouse_LiquidateInvalidPosition();\\n\\n    /// @notice Emitted when the margin of the liquidatee's position is still valid\\n    error ClearingHouse_LiquidateValidMargin();\\n\\n    /// @notice Emitted when the attempted liquidation does not close the full position\\n    error ClearingHouse_LiquidateInsufficientProposedAmount();\\n\\n    /// @notice Emitted when a user attempts to provide liquidity with amount equal to 0\\n    error ClearingHouse_ProvideLiquidityZeroAmount();\\n\\n    /// @notice Emitted when a user attempts to withdraw more liquidity than they have\\n    error ClearingHouse_RemoveLiquidityInsufficientFunds();\\n\\n    /// @notice Emitted when vault withdrawal is unsuccessful\\n    error ClearingHouse_VaultWithdrawUnsuccessful();\\n\\n    /// @notice Emitted when the proposed minMargin is too low\\n    error ClearingHouse_InsufficientMinMargin();\\n\\n    /// @notice Emitted when the proposed minMargin is too high\\n    error ClearingHouse_ExcessiveMinMargin();\\n\\n    /// @notice Emitted when the proposed liquidation reward is too low\\n    error ClearingHouse_InsufficientLiquidationReward();\\n\\n    /// @notice Emitted when the proposed liquidation reward is too high\\n    error ClearingHouse_ExcessiveLiquidationReward();\\n\\n    /// @notice Emitted when the proposed insurance ratio is too low\\n    error ClearingHouse_InsufficientInsuranceRatio();\\n\\n    /// @notice Emitted when the proposed insurance ratio is too high\\n    error ClearingHouse_ExcessiveInsuranceRatio();\\n\\n    /// @notice Emitted when a user attempts to extend their position with amount equal to 0\\n    error ClearingHouse_ExtendPositionZeroAmount();\\n\\n    /// @notice Emitted when there is not enough margin to extend to the proposed position amount\\n    error ClearingHouse_ExtendPositionInsufficientMargin();\\n\\n    /// @notice Emitted when a user attempts to reduce their position with amount equal to 0\\n    error ClearingHouse_ReducePositionZeroAmount();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function vault() external view returns (IVault);\\n\\n    function insurance() external view returns (IInsurance);\\n\\n    function perpetuals(uint256 idx) external view returns (IPerpetual);\\n\\n    function getNumMarkets() external view returns (uint256);\\n\\n    function getOwner() external view returns (address);\\n\\n    function minMargin() external view returns (int256);\\n\\n    function minMarginAtCreation() external view returns (int256);\\n\\n    function liquidationReward() external view returns (uint256);\\n\\n    function insuranceRatio() external view returns (uint256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function allowListPerpetual(IPerpetual perp) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function sellDust(\\n        uint256 idx,\\n        uint256 proposedAmount,\\n        uint256 minAmount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function setMinMargin(int256 newMinMargin) external;\\n\\n    function setMinMarginAtCreation(int256 newMinMarginAtCreation) external;\\n\\n    function setLiquidationReward(uint256 newLiquidationReward) external;\\n\\n    function setInsuranceRatio(uint256 newInsuranceRatio) external;\\n\\n    function deposit(\\n        uint256 idx,\\n        uint256 amount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function withdraw(\\n        uint256 idx,\\n        uint256 amount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function extendPositionWithCollateral(\\n        uint256 idx,\\n        uint256 collateralAmount,\\n        IERC20Metadata token,\\n        uint256 positionAmount,\\n        LibPerpetual.Side direction,\\n        uint256 minAmount\\n    ) external;\\n\\n    function extendPosition(\\n        uint256 idx,\\n        uint256 amount,\\n        LibPerpetual.Side direction,\\n        uint256 minAmount\\n    ) external;\\n\\n    function closePositionWithdrawCollateral(\\n        uint256 idx,\\n        uint256 proposedAmount,\\n        uint256 minAmount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function reducePosition(\\n        uint256 idx,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external;\\n\\n    function liquidate(\\n        uint256 idx,\\n        address liquidatee,\\n        uint256 proposedAmount,\\n        bool isTrader\\n    ) external;\\n\\n    function provideLiquidity(\\n        uint256 idx,\\n        uint256 amount,\\n        uint256 minLpAmount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function removeLiquidity(\\n        uint256 idx,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdbc2463924f06b75ec5fa31e0332db3117bdee135ef56db7d98a8ab34d7884d4\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ICryptoSwap.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n/// @dev Contract https://github.com/curvefi/curve-crypto-contract/blob/master/deployment-logs/2021-11-01.%20EURS%20on%20mainnet/CryptoSwap.vy\\ninterface ICryptoSwap {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function price_oracle() external view returns (uint256);\\n\\n    function mid_fee() external view returns (uint256);\\n\\n    function out_fee() external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    // Swap token i to j with amount dx and min amount min_dy\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external returns (uint256); // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external; // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\\n\\n    function last_prices() external view returns (uint256);\\n\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x64c144f037b8ba367ece87d0605374be7adbf93c186d39c220aec454594870a1\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\ninterface IInsurance {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Insurance_ZeroAddressConstructor(uint8 paramIndex);\\n\\n    /// @notice Emitted when the sender is not the vault address\\n    error Insurance_SenderNotVault();\\n\\n    /// @notice Emitted when the sender is not the clearingHouse address\\n    error Insurance_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when the balance of the vault is less than the amount to be settled\\n    error Insurance_InsufficientBalance();\\n\\n    /// @notice Emitted when locked insurance falls below insurance ratio\\n    error Insurance_InsufficientInsurance();\\n\\n    /// @notice Emitted when the proposed clearingHouse address is equal to the zero address\\n    error Insurance_ClearingHouseZeroAddress();\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when a new ClearingHouse is connected to the issuer\\n    /// @param newClearingHouse New ClearingHouse contract address\\n    event ClearingHouseChanged(IClearingHouse newClearingHouse);\\n\\n    /// @notice Emitted when (exceeding) insurance reserves are withdrawn by governance\\n    /// @param amount Amount of insurance reserves withdrawn. 18 decimals\\n    event InsuranceRemoved(uint256 amount);\\n\\n    /// @notice Emitted when a bail out is asked for by the Vault\\n    /// @param amount Amount of insurance reserves withdrawn. 18 decimals\\n    event SettleDebt(uint256 amount);\\n\\n    /// @notice Emitted when a bail out cant be fully served\\n    /// @param amount Amount of bad debt remaining. 18 decimals\\n    event SystemDebtGenerated(uint256 amount);\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function settleDebt(uint256 amount) external;\\n\\n    function removeInsurance(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x755bb2b93aab1d10f443668ffc8e5bfd6898130842d7f5a9a76c929d69a7c8db\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/// @notice Oracle interface created to ease oracle contract switch\\ninterface IOracle {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the latest round is incomplete\\n    error Oracle_IncompleteRound();\\n\\n    /// @notice Emitted when the latest round's price is invalid\\n    error Oracle_IntegerConversion();\\n\\n    /// @notice Emitted when the proposed asset address is equal to the zero address\\n    error Oracle_AssetZeroAddress();\\n\\n    /// @notice Emitted when the proposed aggregator address is equal to the zero address\\n    error Oracle_AggregatorZeroAddress();\\n\\n    /// @notice Emitted when owner tries to set fixed price to an unsupported asset\\n    error Oracle_UnsupportedAsset();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function getPrice(address asset) external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function setOracle(address asset, AggregatorV3Interface aggregator) external;\\n\\n    function setFixedPrice(address asset, int256 fixedPrice) external;\\n}\\n\",\"keccak256\":\"0xaa06ea6ca832e0b236b11751c4e1a34b1d6193967a3b927a32dac56d21694184\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPerpetual.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IVBase} from \\\"./IVBase.sol\\\";\\nimport {IVQuote} from \\\"./IVQuote.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\n// libraries\\nimport {LibPerpetual} from \\\"../lib/LibPerpetual.sol\\\";\\n\\ninterface IPerpetual {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Perpetual_ZeroAddressConstructor(uint256 paramIndex);\\n\\n    /// @notice Emitted when the constructor fails to give approval of a virtual token to the market\\n    error Perpetual_VirtualTokenApprovalConstructor(uint256 tokenIndex);\\n\\n    /// @notice Emitted when market mid fee does not equal out fee\\n    error Perpetual_MarketEqualFees();\\n\\n    /// @notice Emitted when the sender is not the clearing house\\n    error Perpetual_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when the sender is not the clearing house owner\\n    error Perpetual_SenderNotClearingHouseOwner();\\n\\n    /// @notice Emitted when the user attempts to reduce their position using extendPosition\\n    error Perpetual_AttemptReducePosition();\\n\\n    /// @notice Emitted when the price impact of a position is too high\\n    error Perpetual_ExcessivePriceImpact();\\n\\n    /// @notice Emitted when the user does not have an open position\\n    error Perpetual_NoOpenPosition();\\n\\n    /// @notice Emitted when the user attempts to withdraw more liquidity than they have deposited\\n    error Perpetual_LPWithdrawExceedsBalance();\\n\\n    /// @notice Emitted when the proposed insurance fee is insufficient\\n    error Perpetual_InsuranceFeeInsufficient(int256 fee);\\n\\n    /// @notice Emitted when the proposed insurance fee is excessive\\n    error Perpetual_InsuranceFeeExcessive(int256 fee);\\n\\n    /// @notice Emitted when the proposed trading fee is insufficient\\n    error Perpetual_TradingFeeInsufficient(int256 fee);\\n\\n    /// @notice Emitted when the proposed trading fee is excessive\\n    error Perpetual_TradingFeeExcessive(int256 fee);\\n\\n    /// @notice Emitted when a token balance of the market is lte 0\\n    error Perpetual_MarketBalanceTooLow(uint256 tokenIndex);\\n\\n    /// @notice Emitted when the liquidity provider has an open position\\n    error Perpetual_LPOpenPosition();\\n\\n    /// @notice Emitted when proposed amount is greater than position size\\n    error Perpetual_ProposedAmountExceedsPositionSize();\\n\\n    /// @notice Emitted when proposed amount is greater than maxVQuoteAmount\\n    error Perpetual_ProposedAmountExceedsMaxMarketPrice();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function market() external view returns (ICryptoSwap);\\n\\n    function vBase() external view returns (IVBase);\\n\\n    function vQuote() external view returns (IVQuote);\\n\\n    function clearingHouse() external view returns (IClearingHouse);\\n\\n    function getTraderPosition(address account) external view returns (LibPerpetual.TraderPosition memory);\\n\\n    function getLpPositionAfterWithdrawal(address account) external view returns (LibPerpetual.TraderPosition memory);\\n\\n    function getLpPosition(address account) external view returns (LibPerpetual.LiquidityProviderPosition memory);\\n\\n    function getGlobalPosition() external view returns (LibPerpetual.GlobalPosition memory);\\n\\n    function getInsuranceFee() external view returns (int256);\\n\\n    function getTradingFee() external view returns (int256);\\n\\n    function getTraderUnrealizedPnL(address account) external view returns (int256);\\n\\n    function getTraderFundingPayments(address account) external view returns (int256);\\n\\n    function getLpUnrealizedPnL(address account) external view returns (int256);\\n\\n    function getLpFundingPayments(address account) external view returns (int256);\\n\\n    function getLpTradingFees(address account) external view returns (uint256);\\n\\n    function marketPrice() external view returns (uint256);\\n\\n    function indexPrice() external view returns (int256);\\n\\n    function getTotalLiquidityProvided() external view returns (uint256);\\n\\n    function getOracleTwap() external view returns (int256);\\n\\n    function getMarketTwap() external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function extendPosition(\\n        address account,\\n        uint256 amount,\\n        LibPerpetual.Side direction,\\n        uint256 minAmount\\n    )\\n        external\\n        returns (\\n            int256 openNotional,\\n            int256 positionSize,\\n            int256 tradingFees\\n        );\\n\\n    function reducePosition(\\n        address account,\\n        uint256 amount,\\n        uint256 minAmount\\n    )\\n        external\\n        returns (\\n            int256 vQuoteProceeds,\\n            int256 vBaseAmount,\\n            int256 profit\\n        );\\n\\n    function settleTrader(address account) external returns (int256 fundingPayments);\\n\\n    function provideLiquidity(\\n        address account,\\n        uint256 wadAmount,\\n        uint256 minLpAmount\\n    ) external returns (int256 tradingFees);\\n\\n    function removeLiquidity(\\n        address account,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external returns (int256 profit, uint256 reductionRatio);\\n\\n    function settleLp(address account) external returns (int256 fundingPayments);\\n\\n    function setInsuranceFee(int256 newInsuranceFee) external;\\n\\n    function setTradingFee(int256 newInsuranceFee) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xec1f2ab112769a8f371e96d4108dcffae37f7970020c9b73b933a8dd2fbd60fc\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IVirtualToken} from \\\"../interfaces/IVirtualToken.sol\\\";\\n\\ninterface IVBase is IVirtualToken {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the proposed aggregators decimals are less than PRECISION\\n    error VBase_InsufficientPrecision();\\n\\n    /// @notice Emitted when the latest round is incomplete\\n    error VBase_IncompleteRound();\\n\\n    /// @notice Emitted when the latest round's price is invalid\\n    error VBase_IntegerConversion();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function getIndexPrice() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x93fe2a1b39f1fa7fec300893ce78ad0efb540e8ac8c394a1ab6e8882428472ee\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVQuote.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IVirtualToken} from \\\"../interfaces/IVirtualToken.sol\\\";\\n\\ninterface IVQuote is IVirtualToken {}\\n\",\"keccak256\":\"0xf3c21b1973b431c9e0fd63e60544be3e5a7e51bfb4d6f8b4dbac26f38dc3f17b\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {IOracle} from \\\"./IOracle.sol\\\";\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\n// @dev: deposit uint and withdraw int\\n// @author: The interface used in other contracts\\ninterface IVault {\\n    struct Collateral {\\n        IERC20Metadata asset;\\n        uint256 weight;\\n        uint8 decimals;\\n    }\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Vault_ZeroAddressConstructor(uint8 paramIndex);\\n\\n    /// @notice Emitted when the decimals of the proposed reserve token are gt 18\\n    error Vault_ExcessiveDecimalsConstructor();\\n\\n    /// @notice Emitted when user tries to withdraw collateral while having a UA debt\\n    error Vault_UADebt();\\n\\n    /// @notice Emitted when the sender is not the clearing house\\n    error Vault_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when a user attempts to use a token which is not whitelisted as collateral\\n    error Vault_UnsupportedCollateral();\\n\\n    /// @notice Emitted when owner tries to whitelist a collateral already whitelisted\\n    error Vault_CollateralAlreadyWhiteListed();\\n\\n    /// @notice Emitted when a user attempts to withdraw with a reduction ratio above 1e18\\n    error Vault_WithdrawReductionRatioTooHigh();\\n\\n    /// @notice Emitted when a user attempts to withdraw more than their balance\\n    error Vault_WithdrawExcessiveAmount();\\n\\n    /// @notice Emitted when a user attempts to withdraw an amount that reduces their balance below mMIN_DEPOSIT_AMOUNT\\n    error Vault_WithdrawBalanceBelowMin();\\n\\n    /// @notice Emitted when the proposed clearingHouse address is equal to the zero address\\n    error Vault_ClearingHouseZeroAddress();\\n\\n    /// @notice Emitted when the proposed insurance address is equal to the zero address\\n    error Vault_InsuranceZeroAddress();\\n\\n    /// @notice Emitted when the proposed oracle address is equal to the zero address\\n    error Vault_OracleZeroAddress();\\n\\n    /// @notice Emitted when the proposed collateral weight is under the limit\\n    error Vault_InsufficientCollateralWeight();\\n\\n    /// @notice Emitted when the proposed collateral weight is above the limit\\n    error Vault_ExcessiveCollateralWeight();\\n\\n    /// @notice Emitted when a user attempts to withdraw more collateral than available in vault\\n    error Vault_InsufficientBalance();\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when collateral is deposited into the vault\\n    /// @param idx Index of the perpetual market\\n    /// @param user User who deposited collateral\\n    /// @param asset Token to be used for the collateral\\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\\n    event Deposit(uint256 indexed idx, address indexed user, address indexed asset, uint256 amount);\\n\\n    /// @notice Emitted when collateral is withdrawn from the vault\\n    /// @param idx Index of the perpetual market\\n    /// @param user User who deposited collateral\\n    /// @param asset Token to be used for the collateral\\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\\n    event Withdraw(uint256 indexed idx, address indexed user, address indexed asset, uint256 amount);\\n\\n    /// @notice Emitted when bad debt is settled for by the insurance reserve\\n    /// @param idx Index of the perpetual market\\n    /// @param beneficiary Beneficiary of the insurance payment\\n    /// @param amount Amount of bad insurance requested\\n    event TraderBadDebtGenerated(uint256 idx, address beneficiary, uint256 amount);\\n\\n    /// @notice Emitted when a new ClearingHouse is connected to the vault\\n    /// @param newClearingHouse New ClearingHouse contract address\\n    event ClearingHouseChanged(IClearingHouse newClearingHouse);\\n\\n    /// @notice Emitted when a new Insurance is connected to the vault\\n    /// @param newInsurance New Insurance contract address\\n    event InsuranceChanged(IInsurance newInsurance);\\n\\n    /// @notice Emitted when a new Oracle is connected to the vault\\n    /// @param newOracle New Oracle contract address\\n    event OracleChanged(IOracle newOracle);\\n\\n    /// @notice Emitted when a new Oracle is connected to the vault\\n    /// @param asset Asset added as collateral\\n    /// @param weight Volatility measure of the asset\\n    event CollateralAdded(IERC20Metadata asset, uint256 weight);\\n\\n    /// @notice Emitted when a new Oracle is connected to the vault\\n    /// @param asset Asset added as collateral\\n    /// @param newWeight New volatility measure for the collateral\\n    event CollateralWeightChanged(IERC20Metadata asset, uint256 newWeight);\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n    function insurance() external view returns (IInsurance);\\n\\n    function oracle() external view returns (IOracle);\\n\\n    function clearingHouse() external view returns (IClearingHouse);\\n\\n    function getTotalValueLocked() external view returns (uint256);\\n\\n    function getBadDebt() external view returns (uint256);\\n\\n    function getWhiteListedCollaterals() external view returns (Collateral[] memory);\\n\\n    function getTraderReserveValue(uint256 marketIdx, address trader) external view returns (int256);\\n\\n    function getLpReserveValue(uint256 marketIdx, address lp) external view returns (int256);\\n\\n    function getLpBalance(\\n        address user,\\n        uint256 marketIdx,\\n        uint256 tokenIdx\\n    ) external view returns (int256);\\n\\n    function getTraderBalance(\\n        address user,\\n        uint256 marketIdx,\\n        uint256 tokenIdx\\n    ) external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function deposit(\\n        uint256 idx,\\n        address user,\\n        uint256 amount,\\n        IERC20Metadata token,\\n        bool isTrader\\n    ) external returns (int256 amountUSDValue);\\n\\n    function settlePnL(\\n        uint256 marketIdx,\\n        address user,\\n        int256 amount,\\n        bool isTrader\\n    ) external;\\n\\n    function withdraw(\\n        uint256 idx,\\n        address user,\\n        uint256 amount,\\n        IERC20Metadata token,\\n        bool isTrader\\n    ) external;\\n\\n    function withdrawPartial(\\n        uint256 idx,\\n        address user,\\n        uint256 reductionRatio,\\n        bool isTrader\\n    ) external;\\n\\n    function withdrawAll(\\n        uint256 idx,\\n        address user,\\n        IERC20Metadata withdrawToken,\\n        bool isTrader\\n    ) external;\\n\\n    function settleLiquidationOnCollaterals(\\n        address liquidator,\\n        address liquidatee,\\n        uint256 marketIdx,\\n        bool isTrader\\n    ) external;\\n\\n    function transferUa(address user, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x2adfd49ef5b4888a307e7396875c83414cd0175c0134df6b859d6c4e2dfe9051\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVirtualToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IVirtualToken is IERC20Metadata {\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0dda9dc3d416b9aaeb6e93915b33c2b358b4ee5b9e477fa3b7ff9be8198e95ec\",\"license\":\"AGPL-3.0\"},\"contracts/lib/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// libraries\\nimport {PRBMathUD60x18} from \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\nimport {PRBMathSD59x18} from \\\"prb-math/contracts/PRBMathSD59x18.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/*\\n * To be used if `b` decimals make `b` larger than what it would be otherwise.\\n * Especially useful for fixed point numbers, i.e. a way to represent decimal\\n * values without using decimals. E.g. 25e2 with 3 decimals represents 2.5%\\n *\\n * In our case, we get exchange rates with a 18 decimal precision\\n * (Solidity doesn't support decimal values natively).\\n * So if we have a EUR positions and want to get the equivalent USD amount\\n * we have to do: EUR_position * EUR_USD / 1e18 else the value would be way too high.\\n * To move from USD to EUR: (USD_position * 1e18) / EUR_USD else the value would\\n * be way too low.\\n *\\n * In essence,\\n * wadMul: a.mul(b).div(WAY)\\n * wadDiv: a.mul(WAY).div(b)\\n * where `WAY` represents the number of decimals\\n */\\nlibrary LibMath {\\n    // safe casting\\n    function toInt256(uint256 x) internal pure returns (int256) {\\n        return SafeCast.toInt256(x);\\n    }\\n\\n    function toUint256(int256 x) internal pure returns (uint256) {\\n        return SafeCast.toUint256(x);\\n    }\\n\\n    // absolute value\\n    function abs(int256 x) internal pure returns (int256) {\\n        return PRBMathSD59x18.abs(x);\\n    }\\n\\n    // int256: wad division / multiplication\\n    function wadDiv(int256 x, int256 y) internal pure returns (int256) {\\n        return PRBMathSD59x18.div(x, y);\\n    }\\n\\n    function wadMul(int256 x, int256 y) internal pure returns (int256) {\\n        return PRBMathSD59x18.mul(x, y);\\n    }\\n\\n    // uint256: wad division / multiplication\\n    function wadMul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return PRBMathUD60x18.mul(x, y);\\n    }\\n\\n    function wadDiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return PRBMathUD60x18.div(x, y);\\n    }\\n}\\n\",\"keccak256\":\"0x60393d01bf4cc02470b3f23cddc21c88389484c9ee0563e7ec22e9585e33f2ef\",\"license\":\"AGPL-3.0\"},\"contracts/lib/LibPerpetual.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// libraries\\nimport {LibMath} from \\\"./LibMath.sol\\\";\\n\\nlibrary LibPerpetual {\\n    using LibMath for int256;\\n    using LibMath for uint256;\\n\\n    enum Side {\\n        // long position\\n        Long,\\n        // short position\\n        Short\\n    }\\n\\n    struct LiquidityProviderPosition {\\n        // quote assets or liabilities\\n        int256 openNotional;\\n        // base assets or liabilities\\n        int256 positionSize;\\n        // user cumulative funding rate (updated when open/close position)\\n        int256 cumFundingRate;\\n        // lp token owned (is zero for traders)\\n        uint256 liquidityBalance;\\n        /* fees state */\\n\\n        // total percentage return of liquidity providers index\\n        uint256 totalTradingFeesGrowth;\\n        // total base fees paid in cryptoswap pool\\n        uint256 totalBaseFeesGrowth;\\n        // total quote fees paid in cryptoswap pool\\n        uint256 totalQuoteFeesGrowth;\\n    }\\n\\n    struct TraderPosition {\\n        // quote assets or liabilities\\n        int256 openNotional;\\n        // base assets or liabilities\\n        int256 positionSize;\\n        // user cumulative funding rate (updated when open/close position)\\n        int256 cumFundingRate;\\n    }\\n\\n    struct GlobalPosition {\\n        /* twap state */\\n\\n        // timestamp of last trade\\n        uint128 timeOfLastTrade;\\n        // timestamp of last TWAP update\\n        uint128 timeOfLastTwapUpdate;\\n        // global cumulative funding rate (updated every trade)\\n        int256 cumFundingRate;\\n        // market price at the start of the block\\n        int256 blockStartPrice;\\n        /* fees state */\\n\\n        // total percentage return of liquidity providers index\\n        uint256 totalTradingFeesGrowth;\\n        // total liquidity provided (in vQuote)\\n        uint256 totalLiquidityProvided;\\n        // total base fees paid in cryptoswap pool\\n        uint256 totalBaseFeesGrowth;\\n        // total quote fees paid in cryptoswap pool\\n        uint256 totalQuoteFeesGrowth;\\n    }\\n}\\n\",\"keccak256\":\"0x6ab4f05a6c671effd6cbd4d865aa8049cda387106af96b7b43a50636c2634b92\",\"license\":\"AGPL-3.0\"},\"contracts/lib/LibReserve.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// libraries\\nimport {LibMath} from \\\"./LibMath.sol\\\";\\n\\n/// @notice Emitted when the proposed token decimals exceeds MAX_DECIMALS\\nerror LibReserve_ExcessiveDecimals();\\n\\nlibrary LibReserve {\\n    using LibMath for int256;\\n    using LibMath for uint256;\\n\\n    uint8 internal constant MAX_DECIMALS = 18;\\n\\n    /// @notice Convert amount from 'tokenDecimals' to 18 decimals precision\\n    /// @param tokenDecimals Decimals of the token. 8 decimals uint like in the ERC20 standard\\n    /// @param tokenAmount Amount with tokenDecimals precision\\n    /// @return wadAmount Scaled amount to the proper number of decimals\\n    function tokenToWad(uint8 tokenDecimals, int256 tokenAmount) internal pure returns (int256) {\\n        if (tokenDecimals > MAX_DECIMALS) revert LibReserve_ExcessiveDecimals();\\n\\n        int256 scaler = int256(10**uint256(MAX_DECIMALS - tokenDecimals));\\n        return tokenAmount * scaler;\\n    }\\n\\n    /// @notice Convert amount from 'tokenDecimals' decimals to 18 decimals precision\\n    /// @param tokenDecimals Decimals of the token. 8 decimals uint like in the ERC20 standard\\n    /// @param wadAmount Amount with 18 decimals precision\\n    /// @return amount Amount scaled back to the initial amount of decimals\\n    function wadToToken(uint8 tokenDecimals, int256 wadAmount) internal pure returns (int256) {\\n        if (tokenDecimals > MAX_DECIMALS) revert LibReserve_ExcessiveDecimals();\\n\\n        int256 scaler = int256(10**uint256(MAX_DECIMALS - tokenDecimals));\\n        return wadAmount / scaler;\\n    }\\n}\\n\",\"keccak256\":\"0x99294722f1cdf8afe914b7b3ed01ce62712135fc322a111539c53006ae257989\",\"license\":\"AGPL-3.0\"},\"contracts/utils/IncreOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n/// @notice Emitted when the sender is not the owner\\nerror IncreOwnable_NotOwner();\\n\\n/// @notice Emitted when the sender is not the pending owner\\nerror IncreOwnable_NotPendingOwner();\\n\\n/// @notice Emitted when the proposed owner is equal to the zero address\\nerror IncreOwnable_TransferZeroAddress();\\n\\n/// @notice Increment access control contract.\\n/// @author Adapted from https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringOwnable.sol, License-Identifier: MIT.\\n/// @author Adapted from https://github.com/sushiswap/trident/blob/master/contracts/utils/TridentOwnable.sol, License-Identifier: GPL-3.0-or-later\\ncontract IncreOwnable {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    event TransferOwner(address indexed sender, address indexed recipient);\\n    event TransferOwnerClaim(address indexed sender, address indexed recipient);\\n\\n    /// @notice Initialize and grant deployer account (`msg.sender`) `owner` access role.\\n    constructor() {\\n        owner = msg.sender;\\n        emit TransferOwner(address(0), msg.sender);\\n    }\\n\\n    /// @notice Access control modifier that requires modified function to be called by `owner` account.\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert IncreOwnable_NotOwner();\\n        _;\\n    }\\n\\n    /// @notice `pendingOwner` can claim `owner` account.\\n    function claimOwner() external {\\n        if (msg.sender != pendingOwner) revert IncreOwnable_NotPendingOwner();\\n        emit TransferOwner(owner, msg.sender);\\n        owner = msg.sender;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Transfer `owner` account.\\n    /// @param recipient Account granted `owner` access control.\\n    /// @param direct If 'true', ownership is directly transferred.\\n    function transferOwner(address recipient, bool direct) external onlyOwner {\\n        if (recipient == address(0)) revert IncreOwnable_TransferZeroAddress();\\n        if (direct) {\\n            owner = recipient;\\n            emit TransferOwner(msg.sender, recipient);\\n        } else {\\n            pendingOwner = recipient;\\n            emit TransferOwnerClaim(msg.sender, recipient);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd98c075ae1e6304b4a88e94854a4f7f93a795ade40e70252e44697d72abe2d0e\",\"license\":\"AGPL-3.0\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62cbabae4910e168e99b9c2c3e3b5c9c7ad5e7abd961dcc63b7ea3d83d8ea87e\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathSD59x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\n\\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_WHOLE_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\n\\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_WHOLE_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Calculate the absolute value of x.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than MIN_SD59x18.\\n    ///\\n    /// @param x The number to calculate the absolute value for.\\n    /// @param result The absolute value of x.\\n    function abs(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x == MIN_SD59x18) {\\n                revert PRBMathSD59x18__AbsInputTooSmall();\\n            }\\n            result = x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            int256 sum = (x >> 1) + (y >> 1);\\n            if (sum < 0) {\\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\\n                // right rounds down to infinity.\\n                assembly {\\n                    result := add(sum, and(or(x, y), 1))\\n                }\\n            } else {\\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\\n                // remainder gets truncated twice.\\n                result = sum + (x & y & 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function ceil(int256 x) internal pure returns (int256 result) {\\n        if (x > MAX_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__CeilOverflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x > 0) {\\n                    result += SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    /// - None of the inputs can be MIN_SD59x18.\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within int256.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    ///\\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__DivInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x and y.\\n        uint256 ax;\\n        uint256 ay;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n        }\\n\\n        // Compute the absolute value of (x*SCALE)\\u00f7y. The result must fit within int256.\\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__DivOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x and y.\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n\\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\\n        // should be positive. Otherwise, it should be negative.\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (int256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\".\\n    /// - For any x less than -41.446531673892822322, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59.794705707972522261.\\n        if (x < -41_446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathSD59x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59.794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^(-x) = 1/2^x.\\n        if (x < 0) {\\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n            if (x < -59_794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked {\\n                result = 1e36 / exp2(-x);\\n            }\\n        } else {\\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n            if (x >= 192e18) {\\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\\n            }\\n\\n            unchecked {\\n                // Convert x to the 192.64-bit fixed-point format.\\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\\n                result = int256(PRBMath.exp2(x192x64));\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function floor(int256 x) internal pure returns (int256 result) {\\n        if (x < MIN_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__FloorUnderflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x < 0) {\\n                    result -= SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\\n    /// of the radix point for negative numbers.\\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\\n    function frac(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x % SCALE;\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\\n    function fromInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < MIN_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntUnderflow(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\\n    /// - x * y cannot be negative.\\n    ///\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            int256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathSD59x18__GmOverflow(x, y);\\n            }\\n\\n            // The product cannot be negative.\\n            if (xy < 0) {\\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = int256(PRBMath.sqrt(uint256(xy)));\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\\n    function inv(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\\n    function ln(int256 x) internal pure returns (int256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 195205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\\n    function log10(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            default {\\n                result := MAX_SD59x18\\n            }\\n        }\\n\\n        if (result == MAX_SD59x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n                assembly {\\n                    x := div(1000000000000000000000000000000000000, x)\\n                }\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\\n\\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n            result = int256(n) * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            int256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result * sign;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result *= sign;\\n        }\\n    }\\n\\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\\n    /// fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers and employs constant folding, i.e. the denominator is\\n    /// always 1e18.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - None of the inputs can be MIN_SD59x18\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    ///\\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__MulInputTooSmall();\\n        }\\n\\n        unchecked {\\n            uint256 ax;\\n            uint256 ay;\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n\\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\\n            if (rAbs > uint256(MAX_SD59x18)) {\\n                revert PRBMathSD59x18__MulOverflow(rAbs);\\n            }\\n\\n            uint256 sx;\\n            uint256 sy;\\n            assembly {\\n                sx := sgt(x, sub(0, 1))\\n                sy := sgt(y, sub(0, 1))\\n            }\\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n        }\\n    }\\n\\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\\n    function pi() internal pure returns (int256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - z cannot be zero.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : int256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"abs\\\" and \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\\n        uint256 xAbs = uint256(abs(x));\\n\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        uint256 yAux = y;\\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (yAux & 1 > 0) {\\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\\n            }\\n        }\\n\\n        // The result must fit within the 59.18-decimal fixed-point representation.\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\\n        }\\n\\n        // Is the base negative and the exponent an odd number?\\n        bool isNegative = x < 0 && y & 1 == 1;\\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\\n    function scale() internal pure returns (int256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x cannot be negative.\\n    /// - x must be less than MAX_SD59x18 / SCALE.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as a signed 59.18-decimal fixed-point .\\n    function sqrt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < 0) {\\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\\n        }\\n    }\\n\\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1886d687eace717c05b7dcc20e43a088df0e549df86b453c2222961b520308f0\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620031c2380380620031c283398101604081905262000034916200033c565b600080546001600160a01b0319163390811782556040519091907f5bb496b3f951b55d3a1d8e479725a4d25bdc7644fc355f0b71c540354820a1c5908290a36001600160a01b038116620000a25760405163356b644560e01b81526000600482015260240160405180910390fd5b6001600160601b0319606082901b16608052620000c881670de0b6b3a7640000620000cf565b50620003dd565b6000546001600160a01b03163314620000fb57604051637d369bab60e11b815260040160405180910390fd5b662386f26fc100008110156200012457604051632e01c96360e01b815260040160405180910390fd5b670de0b6b3a76400008111156200014e57604051635f08f99d60e01b815260040160405180910390fd5b60005b600654811015620001d757826001600160a01b0316600682815481106200018857634e487b7160e01b600052603260045260246000fd5b60009182526020909120600390910201546001600160a01b03161415620001c2576040516353dc2d7560e01b815260040160405180910390fd5b80620001ce81620003a9565b91505062000151565b5060066040518060600160405280846001600160a01b03168152602001838152602001846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200023457600080fd5b505afa15801562000249573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200026f91906200036c565b60ff9081169091528254600180820185556000948552602094859020845160039093020180546001600160a01b0319166001600160a01b0390931692909217825593830151818501556040909201516002909201805460ff191692909116919091179055600654620002e291906200038f565b6001600160a01b0383166000818152600760209081526040918290209390935580519182529181018390527f7dba1be544024070cd5eebfa8bdd80a8b198cea8058c7d3cc1f8dd36e41ab2f7910160405180910390a15050565b6000602082840312156200034e578081fd5b81516001600160a01b038116811462000365578182fd5b9392505050565b6000602082840312156200037e578081fd5b815160ff8116811462000365578182fd5b600082821015620003a457620003a4620003c7565b500390565b6000600019821415620003c057620003c0620003c7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b60805160601c612d956200042d600039600081816103d10152818161076401528181610b3701528181610e5b015281816114d70152818161166a01528181611f5901526123770152612d956000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063907fcf2911610104578063cf81afaa116100a2578063f201a49f11610071578063f201a49f14610452578063f9cf943f14610465578063fb6d681414610478578063feb8cbe91461048b57600080fd5b8063cf81afaa14610406578063d25540ee14610419578063da77cedb1461042c578063e30c39781461043f57600080fd5b8063bbffd719116100de578063bbffd719146103a6578063bf4aaff9146103b9578063c52e8c41146103cc578063cbb17c2c146103f357600080fd5b8063907fcf2914610350578063a45052c91461038b578063b26025aa1461039e57600080fd5b80637a8b6cad1161017c57806384c76b6a1161014b57806384c76b6a146102d657806387a954011461031757806389cf32041461032a5780638da5cb5b1461033d57600080fd5b80637a8b6cad146102955780637adbf973146102a85780637dc0d1d0146102bb5780638012ca08146102ce57600080fd5b80632e15ce52116101b85780632e15ce52146102525780633bd1adec14610265578063449323d81461026f5780636cd7751f1461028257600080fd5b8063040332cb146101df5780630a2b5499146102125780630af9680014610227575b600080fd5b6101ff6101ed366004612820565b60076020526000908152604090205481565b6040519081526020015b60405180910390f35b61021a610493565b6040516102099190612999565b60025461023a906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b6101ff6102603660046127d0565b610518565b61026d61054c565b005b61026d61027d366004612820565b6105cf565b61026d610290366004612820565b610676565b61026d6102a33660046128fe565b610716565b61026d6102b6366004612820565b6109ef565b60045461023a906001600160a01b031681565b6005546101ff565b6101ff6102e43660046127d0565b6001600160a01b038316600090815260096020908152604080832085845282528083208484529091529020549392505050565b6101ff61032536600461286c565b610a8f565b60035461023a906001600160a01b031681565b60005461023a906001600160a01b031681565b61036361035e366004612854565b610aa6565b604080516001600160a01b039094168452602084019290925260ff1690820152606001610209565b6101ff6103993660046128fe565b610ae6565b6101ff610c83565b61026d6103b43660046127a5565b610e24565b61026d6103c73660046127a5565b610e86565b61023a7f000000000000000000000000000000000000000000000000000000000000000081565b61026d6104013660046128d7565b6110e4565b61026d61041436600461276d565b61138a565b6101ff61042736600461286c565b61147b565b61026d61043a366004612890565b611489565b60015461023a906001600160a01b031681565b61026d6104603660046128d7565b6115ad565b61026d61047336600461271b565b6115e5565b61026d6104863660046127a5565b61161b565b6101ff600081565b60606006805480602002602001604051908101604052809291908181526020016000905b8282101561050f576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001808201548486015260029091015460ff169183019190915290835290920191016104b7565b50505050905090565b6001600160a01b038316600090815260086020908152604080832085845282528083208484529091529020545b9392505050565b6001546001600160a01b0316331461057757604051636d0c59cb60e01b815260040160405180910390fd5b6000805460405133926001600160a01b03909216917f5bb496b3f951b55d3a1d8e479725a4d25bdc7644fc355f0b71c540354820a1c591a3600080546001600160a01b03199081163317909155600180549091169055565b6000546001600160a01b031633146105fa57604051637d369bab60e11b815260040160405180910390fd5b6001600160a01b0381166106215760405163017638ad60e71b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527fd0654f5900f9e7e4e605a19334306e6a2786bbf960ac0484a4c12feb6428fe2f906020015b60405180910390a150565b6000546001600160a01b031633146106a157604051637d369bab60e11b815260040160405180910390fd5b6001600160a01b0381166106c8576040516363788cbd60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f6b7cc3294ba6328c864b090682147d055e6dfff6c9ccece6f22dee66c6c251cf9060200161066b565b6002546001600160a01b03163314610740576040516257034d60e91b815260040160405180910390fd5b6001600160a01b0382166000908152600760205260409020548015158061079857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b6107b55760405163a84d9d9760e01b815260040160405180910390fd5b6000826107ed576001600160a01b03861660009081526009602090815260408083208a8452825280832083805290915290205461081a565b6001600160a01b03861660009081526008602090815260408083208a845282528083208380529091529020545b9050600081121561083e576040516362422bc160e11b815260040160405180910390fd5b600083610876576001600160a01b03871660009081526009602090815260408083208b845282528083208684529091529020546108a3565b6001600160a01b03871660009081526008602090815260408083208b845282528083208684529091529020545b9050806108af876117f6565b13156108ce576040516306ed1da360e51b815260040160405180910390fd5b6108ec8789856108dd8a6117f6565b6108e690612d09565b88611801565b6040516370a0823160e01b81523060048201526001600160a01b038616906370a082319060240160206040518083038186803b15801561092b57600080fd5b505afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610963919061283c565b861115610983576040516301d8c68960e51b815260040160405180910390fd5b846001600160a01b0316876001600160a01b0316897ffeb2000dca3e617cd6f3a8bbb63014bb54a124aac6ccbf73ee7229b4cd01f120896040516109c991815260200190565b60405180910390a46109e56001600160a01b0386168888611895565b5050505050505050565b6000546001600160a01b03163314610a1a57604051637d369bab60e11b815260040160405180910390fd5b6001600160a01b038116610a4157604051632ed2e9a560e21b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe4189060200161066b565b6000610a9d838360016118fd565b90505b92915050565b60068181548110610ab657600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b03909116925060ff1683565b6002546000906001600160a01b03163314610b13576040516257034d60e91b815260040160405180910390fd5b6001600160a01b03831660009081526007602052604090205480151580610b6b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b610b885760405163a84d9d9760e01b815260040160405180910390fd5b610b9d868883610b97896117f6565b87611801565b610bb26001600160a01b038516873088611a59565b836001600160a01b0316866001600160a01b0316887f2c0f148b435140de488c1b34647f1511c646f7077e87007bacf22ef9977a16d888604051610bf891815260200190565b60405180910390a4610c7860068281548110610c2457634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051606081018252600390930290910180546001600160a01b0316835260018101549383019390935260029092015460ff1691810191909152610c73876117f6565b611a91565b979650505050505050565b6000806006805480602002602001604051908101604052809291908181526020016000905b82821015610d00576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001808201548486015260029091015460ff16918301919091529083529092019101610ca8565b5050505090506000805b8251811015610e1d576000610dc1848381518110610d3857634e487b7160e01b600052603260045260246000fd5b6020908102919091010151516040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbc919061283c565b6117f6565b90506000811315610e0a57610dfd848381518110610def57634e487b7160e01b600052603260045260246000fd5b602002602001015182611b4a565b610e079084612a72565b92505b5080610e1581612cee565b915050610d0a565b5092915050565b6002546001600160a01b03163314610e4e576040516257034d60e91b815260040160405180910390fd5b610e826001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383611895565b5050565b6000546001600160a01b03163314610eb157604051637d369bab60e11b815260040160405180910390fd5b662386f26fc10000811015610ed957604051632e01c96360e01b815260040160405180910390fd5b670de0b6b3a7640000811115610f0257604051635f08f99d60e01b815260040160405180910390fd5b60005b600654811015610f8557826001600160a01b031660068281548110610f3a57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600390910201546001600160a01b03161415610f73576040516353dc2d7560e01b815260040160405180910390fd5b80610f7d81612cee565b915050610f05565b5060066040518060600160405280846001600160a01b03168152602001838152602001846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe157600080fd5b505afa158015610ff5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611019919061295c565b60ff9081169091528254600180820185556000948552602094859020845160039093020180546001600160a01b0319166001600160a01b0390931692909217825593830151818501556040909201516002909201805460ff19169290911691909117905560065461108a9190612c71565b6001600160a01b0383166000818152600760209081526040918290209390935580519182529181018390527f7dba1be544024070cd5eebfa8bdd80a8b198cea8058c7d3cc1f8dd36e41ab2f7910160405180910390a15050565b6002546001600160a01b0316331461110e576040516257034d60e91b815260040160405180910390fd5b670de0b6b3a76400008211156111375760405163f4a4cb2360e01b815260040160405180910390fd5b60006111448585846118fd565b9050600061115b611154856117f6565b8390611bfe565b905060006006805480602002602001604051908101604052809291908181526020016000905b828210156111d9576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001808201548486015260029091015460ff16918301919091529083529092019101611181565b505050509050600080600080845190505b801561137d5787611238576001600160a01b038a1660009081526009602090815260408083208e8452909152812090611224600184612c71565b815260200190815260200160002054611277565b6001600160a01b038a1660009081526008602090815260408083208e8452909152812090611267600184612c71565b8152602001908152602001600020545b93506112b885611288600184612c71565b815181106112a657634e487b7160e01b600052603260045260246000fd5b60200260200101516040015185611c0a565b925085831261135157611300856112d0600184612c71565b815181106112ee57634e487b7160e01b600052603260045260246000fd5b60200260200101516040015187611c60565b915061134c8b8b61131085611cae565b8861131c600187612c71565b8151811061133a57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518c610716565b61137d565b61135f8b8b61131087611cae565b6113698387612c32565b95508061137581612cd7565b9150506111ea565b5050505050505050505050565b6000546001600160a01b031633146113b557604051637d369bab60e11b815260040160405180910390fd5b6001600160a01b0382166113dc5760405163755a183760e01b815260040160405180910390fd5b801561142e57600080546001600160a01b0319166001600160a01b0384169081178255604051909133917f5bb496b3f951b55d3a1d8e479725a4d25bdc7644fc355f0b71c540354820a1c59190a35050565b600180546001600160a01b0319166001600160a01b03841690811790915560405133907f87f5c8846f4c51400fa448cfb84edcec5cc0f333b6d20a5b903e050823dcb66790600090a35050565b6000610a9d838360006118fd565b6002546001600160a01b031633146114b3576040516257034d60e91b815260040160405180910390fd5b6001600160a01b0382166000908152600760205260409020548015158061150b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b6115285760405163a84d9d9760e01b815260040160405180910390fd5b600082611560576001600160a01b0385166000908152600960209081526040808320898452825280832085845290915290205461158d565b6001600160a01b038516600090815260086020908152604080832089845282528083208584529091529020545b90506115a4868661159d84611cae565b8787610716565b50505b50505050565b6002546001600160a01b031633146115d7576040516257034d60e91b815260040160405180910390fd5b6115a7838560008585611801565b6002546001600160a01b0316331461160f576040516257034d60e91b815260040160405180910390fd5b6115a784848484611cb9565b6000546001600160a01b0316331461164657604051637d369bab60e11b815260040160405180910390fd5b6001600160a01b0382166000908152600760205260409020548015158061169e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b6116bb5760405163a84d9d9760e01b815260040160405180910390fd5b662386f26fc100008210156116e357604051632e01c96360e01b815260040160405180910390fd5b670de0b6b3a764000082111561170c57604051635f08f99d60e01b815260040160405180910390fd5b60005b6006548110156117ae57836001600160a01b03166006828154811061174457634e487b7160e01b600052603260045260246000fd5b60009182526020909120600390910201546001600160a01b0316141561179c57826006828154811061178657634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600101819055505b806117a681612cee565b91505061170f565b50604080516001600160a01b0385168152602081018490527f961e2483fa09e9fd159361d604d3c547aca03801b1ce4c758b036e9bacd8c082910160405180910390a1505050565b6000610aa0826120aa565b801561184d576001600160a01b0385166000908152600860209081526040808320878452825280832086845290915281208054849290611842908490612a31565b9091555061188e9050565b6001600160a01b0385166000908152600960209081526040808320878452825280832086845290915281208054849290611888908490612a31565b90915550505b5050505050565b6040516001600160a01b0383166024820152604481018290526118f890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261211d565b505050565b6000806006805480602002602001604051908101604052809291908181526020016000905b8282101561197a576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001808201548486015260029091015460ff16918301919091529083529092019101611922565b5050505090506000806000905060005b8351811015611a4e57856119c9576001600160a01b03871660009081526009602090815260408083208b845282528083208484529091529020546119f6565b6001600160a01b03871660009081526008602090815260408083208b845282528083208484529091529020545b92508215611a3c57611a2f848281518110611a2157634e487b7160e01b600052603260045260246000fd5b602002602001015184611a91565b611a399083612a31565b91505b80611a4681612cee565b91505061198a565b509695505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526115a79085906323b872dd60e01b906084016118c1565b600080611aa2846040015184611c0a565b90506000611ab661115486602001516117f6565b6004805487516040516341976e0960e01b81526001600160a01b039182169381019390935292935060009216906341976e099060240160206040518083038186803b158015611b0457600080fd5b505afa158015611b18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3c919061283c565b90506000610c788383611bfe565b600080611b5b846040015184611c0a565b6004805486516040516341976e0960e01b81526001600160a01b039182169381019390935292935060009216906341976e099060240160206040518083038186803b158015611ba957600080fd5b505afa158015611bbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be1919061283c565b9050611bf5611bf08383611bfe565b611cae565b95945050505050565b6000610a9d83836121ef565b6000601260ff84161115611c3157604051635bb8b4ef60e11b815260040160405180910390fd5b6000611c3e846012612c88565b611c4c9060ff16600a612b07565b9050611c588184612baf565b949350505050565b6000601260ff84161115611c8757604051635bb8b4ef60e11b815260040160405180910390fd5b6000611c94846012612c88565b611ca29060ff16600a612b07565b9050611c588184612a8a565b6000610aa0826122b4565b600081611cf1576001600160a01b03841660009081526009602090815260408083208684528252808320838052909152902054611d1e565b6001600160a01b038416600090815260086020908152604080832086845282528083208380529091529020545b90506000808212611d30576000611d3c565b611d3c611bf083612d09565b905080611d4a5750506115a7565b60006006805480602002602001604051908101604052809291908181526020016000905b82821015611dc6576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001808201548486015260029091015460ff16918301919091529083529092019101611d6e565b505050509050600080600090505b8251811015611f3b5785611e13576001600160a01b03881660009081526009602090815260408083208a84528252808320848452909152902054611e40565b6001600160a01b03881660009081526008602090815260408083208a845282528083208484529091529020545b91506000821315611f29576000611e7e848381518110611e7057634e487b7160e01b600052603260045260246000fd5b602002602001015184611b4a565b905084811015611ed757611ec68a8a8a878681518110611eae57634e487b7160e01b600052603260045260246000fd5b602002602001015187670de0b6b3a76400008d612306565b611ed09086612c71565b9450611f27565b6000611ee386836123df565b9050611f1b8b8b8b888781518110611f0b57634e487b7160e01b600052603260045260246000fd5b602002602001015188868e612306565b50600095505050611f3b565b505b80611f3381612cee565b915050611dd4565b5082156109e5576040516370a0823160e01b815230600482015283907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611fa357600080fd5b505afa158015611fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdb919061283c565b1015612040576003546040516327a0bb3360e01b8152600481018590526001600160a01b03909116906327a0bb3390602401600060405180830381600087803b15801561202757600080fd5b505af115801561203b573d6000803e3d6000fd5b505050505b82600560008282546120529190612a72565b9091555050604080518781526001600160a01b03891660208201529081018490527f70760e5e8f27cd318ef13d09f0a02fc429ea59ec55756afeb679a33cd14753269060600160405180910390a15050505050505050565b60006001600160ff1b038211156121195760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084015b60405180910390fd5b5090565b6000612172826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123eb9092919063ffffffff16565b8051909150156118f857808060200190518101906121909190612804565b6118f85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401612110565b6000600160ff1b8314806122065750600160ff1b82145b1561222457604051630d01a11b60e21b815260040160405180910390fd5b60008060008512612235578461223a565b846000035b91506000841261224a578361224f565b836000035b9050600061225d83836123fa565b90506001600160ff1b0381111561228a5760405163bf79e8d960e01b815260048101829052602401612110565b6000198087139086138082186001146122a357826122a8565b826000035b98975050505050505050565b6000808212156121195760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401612110565b60008061231f611bf0612318866117f6565b8790611bfe565b9050600061233c611bf08860400151612337856117f6565b611c0a565b9050600061235282670d2f13f7789f00006124bc565b905061236a8a8a6000612364856117f6565b89611801565b61239f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168c3084611a59565b87516001600160a01b03166000908152600760205260409020546123d1908c908b906123ca876117f6565b6001611801565b9a9950505050505050505050565b6000610a9d83836124c8565b6060611c5884846000856124dd565b60008080600019848609848602925082811083820303915050670de0b6b3a7640000811061243e5760405163698d9a0160e11b815260048101829052602401612110565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826124785780670de0b6b3a7640000850401945050505050610aa0565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6000610a9d83836125fa565b6000610a9d83670de0b6b3a764000084612606565b60608247101561253e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401612110565b843b61258c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401612110565b600080866001600160a01b031685876040516125a8919061297d565b60006040518083038185875af1925050503d80600081146125e5576040519150601f19603f3d011682016040523d82523d6000602084013e6125ea565b606091505b5091509150610c788282866126e2565b6000610a9d83836123fa565b60008080600019858709858702925082811083820303915050806000141561264f5783828161264557634e487b7160e01b600052601260045260246000fd5b0492505050610545565b83811061267957604051631dcf306360e21b81526004810182905260248101859052604401612110565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b606083156126f1575081610545565b8251156127015782518084602001fd5b8160405162461bcd60e51b815260040161211091906129fe565b60008060008060808587031215612730578384fd5b843561273b81612d39565b9350602085013561274b81612d39565b925060408501359150606085013561276281612d51565b939692955090935050565b6000806040838503121561277f578182fd5b823561278a81612d39565b9150602083013561279a81612d51565b809150509250929050565b600080604083850312156127b7578182fd5b82356127c281612d39565b946020939093013593505050565b6000806000606084860312156127e4578283fd5b83356127ef81612d39565b95602085013595506040909401359392505050565b600060208284031215612815578081fd5b815161054581612d51565b600060208284031215612831578081fd5b813561054581612d39565b60006020828403121561284d578081fd5b5051919050565b600060208284031215612865578081fd5b5035919050565b6000806040838503121561287e578182fd5b82359150602083013561279a81612d39565b600080600080608085870312156128a5578182fd5b8435935060208501356128b781612d39565b925060408501356128c781612d39565b9150606085013561276281612d51565b600080600080608085870312156128ec578182fd5b84359350602085013561274b81612d39565b600080600080600060a08688031215612915578283fd5b85359450602086013561292781612d39565b935060408601359250606086013561293e81612d39565b9150608086013561294e81612d51565b809150509295509295909350565b60006020828403121561296d578081fd5b815160ff81168114610545578182fd5b6000825161298f818460208701612cab565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b828110156129f157815180516001600160a01b03168552868101518786015285015160ff1685850152606090930192908501906001016129b6565b5091979650505050505050565b6020815260008251806020840152612a1d816040850160208701612cab565b601f01601f19169190910160400192915050565b600080821280156001600160ff1b0384900385131615612a5357612a53612d23565b600160ff1b8390038412811615612a6c57612a6c612d23565b50500190565b60008219821115612a8557612a85612d23565b500190565b600082612aa557634e487b7160e01b81526012600452602481fd5b600160ff1b821460001984141615612abf57612abf612d23565b500590565b600181815b80851115612aff578160001904821115612ae557612ae5612d23565b80851615612af257918102915b93841c9390800290612ac9565b509250929050565b6000610a9d8383600082612b1d57506001610aa0565b81612b2a57506000610aa0565b8160018114612b405760028114612b4a57612b66565b6001915050610aa0565b60ff841115612b5b57612b5b612d23565b50506001821b610aa0565b5060208310610133831016604e8410600b8410161715612b89575081810a610aa0565b612b938383612ac4565b8060001904821115612ba757612ba7612d23565b029392505050565b60006001600160ff1b0381841382841380821686840486111615612bd557612bd5612d23565b600160ff1b84871282811687830589121615612bf357612bf3612d23565b858712925087820587128484161615612c0e57612c0e612d23565b87850587128184161615612c2457612c24612d23565b505050929093029392505050565b60008083128015600160ff1b850184121615612c5057612c50612d23565b6001600160ff1b0384018313811615612c6b57612c6b612d23565b50500390565b600082821015612c8357612c83612d23565b500390565b600060ff821660ff841680821015612ca257612ca2612d23565b90039392505050565b60005b83811015612cc6578181015183820152602001612cae565b838111156115a75750506000910152565b600081612ce657612ce6612d23565b506000190190565b6000600019821415612d0257612d02612d23565b5060010190565b6000600160ff1b821415612d1f57612d1f612d23565b0390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114612d4e57600080fd5b50565b8015158114612d4e57600080fdfea264697066735822122004452f19726638c0d37c4793cbb0975ac521fe2a8fb957520fdc5270339efff364736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063907fcf2911610104578063cf81afaa116100a2578063f201a49f11610071578063f201a49f14610452578063f9cf943f14610465578063fb6d681414610478578063feb8cbe91461048b57600080fd5b8063cf81afaa14610406578063d25540ee14610419578063da77cedb1461042c578063e30c39781461043f57600080fd5b8063bbffd719116100de578063bbffd719146103a6578063bf4aaff9146103b9578063c52e8c41146103cc578063cbb17c2c146103f357600080fd5b8063907fcf2914610350578063a45052c91461038b578063b26025aa1461039e57600080fd5b80637a8b6cad1161017c57806384c76b6a1161014b57806384c76b6a146102d657806387a954011461031757806389cf32041461032a5780638da5cb5b1461033d57600080fd5b80637a8b6cad146102955780637adbf973146102a85780637dc0d1d0146102bb5780638012ca08146102ce57600080fd5b80632e15ce52116101b85780632e15ce52146102525780633bd1adec14610265578063449323d81461026f5780636cd7751f1461028257600080fd5b8063040332cb146101df5780630a2b5499146102125780630af9680014610227575b600080fd5b6101ff6101ed366004612820565b60076020526000908152604090205481565b6040519081526020015b60405180910390f35b61021a610493565b6040516102099190612999565b60025461023a906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b6101ff6102603660046127d0565b610518565b61026d61054c565b005b61026d61027d366004612820565b6105cf565b61026d610290366004612820565b610676565b61026d6102a33660046128fe565b610716565b61026d6102b6366004612820565b6109ef565b60045461023a906001600160a01b031681565b6005546101ff565b6101ff6102e43660046127d0565b6001600160a01b038316600090815260096020908152604080832085845282528083208484529091529020549392505050565b6101ff61032536600461286c565b610a8f565b60035461023a906001600160a01b031681565b60005461023a906001600160a01b031681565b61036361035e366004612854565b610aa6565b604080516001600160a01b039094168452602084019290925260ff1690820152606001610209565b6101ff6103993660046128fe565b610ae6565b6101ff610c83565b61026d6103b43660046127a5565b610e24565b61026d6103c73660046127a5565b610e86565b61023a7f000000000000000000000000000000000000000000000000000000000000000081565b61026d6104013660046128d7565b6110e4565b61026d61041436600461276d565b61138a565b6101ff61042736600461286c565b61147b565b61026d61043a366004612890565b611489565b60015461023a906001600160a01b031681565b61026d6104603660046128d7565b6115ad565b61026d61047336600461271b565b6115e5565b61026d6104863660046127a5565b61161b565b6101ff600081565b60606006805480602002602001604051908101604052809291908181526020016000905b8282101561050f576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001808201548486015260029091015460ff169183019190915290835290920191016104b7565b50505050905090565b6001600160a01b038316600090815260086020908152604080832085845282528083208484529091529020545b9392505050565b6001546001600160a01b0316331461057757604051636d0c59cb60e01b815260040160405180910390fd5b6000805460405133926001600160a01b03909216917f5bb496b3f951b55d3a1d8e479725a4d25bdc7644fc355f0b71c540354820a1c591a3600080546001600160a01b03199081163317909155600180549091169055565b6000546001600160a01b031633146105fa57604051637d369bab60e11b815260040160405180910390fd5b6001600160a01b0381166106215760405163017638ad60e71b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527fd0654f5900f9e7e4e605a19334306e6a2786bbf960ac0484a4c12feb6428fe2f906020015b60405180910390a150565b6000546001600160a01b031633146106a157604051637d369bab60e11b815260040160405180910390fd5b6001600160a01b0381166106c8576040516363788cbd60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f6b7cc3294ba6328c864b090682147d055e6dfff6c9ccece6f22dee66c6c251cf9060200161066b565b6002546001600160a01b03163314610740576040516257034d60e91b815260040160405180910390fd5b6001600160a01b0382166000908152600760205260409020548015158061079857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b6107b55760405163a84d9d9760e01b815260040160405180910390fd5b6000826107ed576001600160a01b03861660009081526009602090815260408083208a8452825280832083805290915290205461081a565b6001600160a01b03861660009081526008602090815260408083208a845282528083208380529091529020545b9050600081121561083e576040516362422bc160e11b815260040160405180910390fd5b600083610876576001600160a01b03871660009081526009602090815260408083208b845282528083208684529091529020546108a3565b6001600160a01b03871660009081526008602090815260408083208b845282528083208684529091529020545b9050806108af876117f6565b13156108ce576040516306ed1da360e51b815260040160405180910390fd5b6108ec8789856108dd8a6117f6565b6108e690612d09565b88611801565b6040516370a0823160e01b81523060048201526001600160a01b038616906370a082319060240160206040518083038186803b15801561092b57600080fd5b505afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610963919061283c565b861115610983576040516301d8c68960e51b815260040160405180910390fd5b846001600160a01b0316876001600160a01b0316897ffeb2000dca3e617cd6f3a8bbb63014bb54a124aac6ccbf73ee7229b4cd01f120896040516109c991815260200190565b60405180910390a46109e56001600160a01b0386168888611895565b5050505050505050565b6000546001600160a01b03163314610a1a57604051637d369bab60e11b815260040160405180910390fd5b6001600160a01b038116610a4157604051632ed2e9a560e21b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe4189060200161066b565b6000610a9d838360016118fd565b90505b92915050565b60068181548110610ab657600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b03909116925060ff1683565b6002546000906001600160a01b03163314610b13576040516257034d60e91b815260040160405180910390fd5b6001600160a01b03831660009081526007602052604090205480151580610b6b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b610b885760405163a84d9d9760e01b815260040160405180910390fd5b610b9d868883610b97896117f6565b87611801565b610bb26001600160a01b038516873088611a59565b836001600160a01b0316866001600160a01b0316887f2c0f148b435140de488c1b34647f1511c646f7077e87007bacf22ef9977a16d888604051610bf891815260200190565b60405180910390a4610c7860068281548110610c2457634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051606081018252600390930290910180546001600160a01b0316835260018101549383019390935260029092015460ff1691810191909152610c73876117f6565b611a91565b979650505050505050565b6000806006805480602002602001604051908101604052809291908181526020016000905b82821015610d00576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001808201548486015260029091015460ff16918301919091529083529092019101610ca8565b5050505090506000805b8251811015610e1d576000610dc1848381518110610d3857634e487b7160e01b600052603260045260246000fd5b6020908102919091010151516040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbc919061283c565b6117f6565b90506000811315610e0a57610dfd848381518110610def57634e487b7160e01b600052603260045260246000fd5b602002602001015182611b4a565b610e079084612a72565b92505b5080610e1581612cee565b915050610d0a565b5092915050565b6002546001600160a01b03163314610e4e576040516257034d60e91b815260040160405180910390fd5b610e826001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383611895565b5050565b6000546001600160a01b03163314610eb157604051637d369bab60e11b815260040160405180910390fd5b662386f26fc10000811015610ed957604051632e01c96360e01b815260040160405180910390fd5b670de0b6b3a7640000811115610f0257604051635f08f99d60e01b815260040160405180910390fd5b60005b600654811015610f8557826001600160a01b031660068281548110610f3a57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600390910201546001600160a01b03161415610f73576040516353dc2d7560e01b815260040160405180910390fd5b80610f7d81612cee565b915050610f05565b5060066040518060600160405280846001600160a01b03168152602001838152602001846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe157600080fd5b505afa158015610ff5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611019919061295c565b60ff9081169091528254600180820185556000948552602094859020845160039093020180546001600160a01b0319166001600160a01b0390931692909217825593830151818501556040909201516002909201805460ff19169290911691909117905560065461108a9190612c71565b6001600160a01b0383166000818152600760209081526040918290209390935580519182529181018390527f7dba1be544024070cd5eebfa8bdd80a8b198cea8058c7d3cc1f8dd36e41ab2f7910160405180910390a15050565b6002546001600160a01b0316331461110e576040516257034d60e91b815260040160405180910390fd5b670de0b6b3a76400008211156111375760405163f4a4cb2360e01b815260040160405180910390fd5b60006111448585846118fd565b9050600061115b611154856117f6565b8390611bfe565b905060006006805480602002602001604051908101604052809291908181526020016000905b828210156111d9576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001808201548486015260029091015460ff16918301919091529083529092019101611181565b505050509050600080600080845190505b801561137d5787611238576001600160a01b038a1660009081526009602090815260408083208e8452909152812090611224600184612c71565b815260200190815260200160002054611277565b6001600160a01b038a1660009081526008602090815260408083208e8452909152812090611267600184612c71565b8152602001908152602001600020545b93506112b885611288600184612c71565b815181106112a657634e487b7160e01b600052603260045260246000fd5b60200260200101516040015185611c0a565b925085831261135157611300856112d0600184612c71565b815181106112ee57634e487b7160e01b600052603260045260246000fd5b60200260200101516040015187611c60565b915061134c8b8b61131085611cae565b8861131c600187612c71565b8151811061133a57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518c610716565b61137d565b61135f8b8b61131087611cae565b6113698387612c32565b95508061137581612cd7565b9150506111ea565b5050505050505050505050565b6000546001600160a01b031633146113b557604051637d369bab60e11b815260040160405180910390fd5b6001600160a01b0382166113dc5760405163755a183760e01b815260040160405180910390fd5b801561142e57600080546001600160a01b0319166001600160a01b0384169081178255604051909133917f5bb496b3f951b55d3a1d8e479725a4d25bdc7644fc355f0b71c540354820a1c59190a35050565b600180546001600160a01b0319166001600160a01b03841690811790915560405133907f87f5c8846f4c51400fa448cfb84edcec5cc0f333b6d20a5b903e050823dcb66790600090a35050565b6000610a9d838360006118fd565b6002546001600160a01b031633146114b3576040516257034d60e91b815260040160405180910390fd5b6001600160a01b0382166000908152600760205260409020548015158061150b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b6115285760405163a84d9d9760e01b815260040160405180910390fd5b600082611560576001600160a01b0385166000908152600960209081526040808320898452825280832085845290915290205461158d565b6001600160a01b038516600090815260086020908152604080832089845282528083208584529091529020545b90506115a4868661159d84611cae565b8787610716565b50505b50505050565b6002546001600160a01b031633146115d7576040516257034d60e91b815260040160405180910390fd5b6115a7838560008585611801565b6002546001600160a01b0316331461160f576040516257034d60e91b815260040160405180910390fd5b6115a784848484611cb9565b6000546001600160a01b0316331461164657604051637d369bab60e11b815260040160405180910390fd5b6001600160a01b0382166000908152600760205260409020548015158061169e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b6116bb5760405163a84d9d9760e01b815260040160405180910390fd5b662386f26fc100008210156116e357604051632e01c96360e01b815260040160405180910390fd5b670de0b6b3a764000082111561170c57604051635f08f99d60e01b815260040160405180910390fd5b60005b6006548110156117ae57836001600160a01b03166006828154811061174457634e487b7160e01b600052603260045260246000fd5b60009182526020909120600390910201546001600160a01b0316141561179c57826006828154811061178657634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600101819055505b806117a681612cee565b91505061170f565b50604080516001600160a01b0385168152602081018490527f961e2483fa09e9fd159361d604d3c547aca03801b1ce4c758b036e9bacd8c082910160405180910390a1505050565b6000610aa0826120aa565b801561184d576001600160a01b0385166000908152600860209081526040808320878452825280832086845290915281208054849290611842908490612a31565b9091555061188e9050565b6001600160a01b0385166000908152600960209081526040808320878452825280832086845290915281208054849290611888908490612a31565b90915550505b5050505050565b6040516001600160a01b0383166024820152604481018290526118f890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261211d565b505050565b6000806006805480602002602001604051908101604052809291908181526020016000905b8282101561197a576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001808201548486015260029091015460ff16918301919091529083529092019101611922565b5050505090506000806000905060005b8351811015611a4e57856119c9576001600160a01b03871660009081526009602090815260408083208b845282528083208484529091529020546119f6565b6001600160a01b03871660009081526008602090815260408083208b845282528083208484529091529020545b92508215611a3c57611a2f848281518110611a2157634e487b7160e01b600052603260045260246000fd5b602002602001015184611a91565b611a399083612a31565b91505b80611a4681612cee565b91505061198a565b509695505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526115a79085906323b872dd60e01b906084016118c1565b600080611aa2846040015184611c0a565b90506000611ab661115486602001516117f6565b6004805487516040516341976e0960e01b81526001600160a01b039182169381019390935292935060009216906341976e099060240160206040518083038186803b158015611b0457600080fd5b505afa158015611b18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3c919061283c565b90506000610c788383611bfe565b600080611b5b846040015184611c0a565b6004805486516040516341976e0960e01b81526001600160a01b039182169381019390935292935060009216906341976e099060240160206040518083038186803b158015611ba957600080fd5b505afa158015611bbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be1919061283c565b9050611bf5611bf08383611bfe565b611cae565b95945050505050565b6000610a9d83836121ef565b6000601260ff84161115611c3157604051635bb8b4ef60e11b815260040160405180910390fd5b6000611c3e846012612c88565b611c4c9060ff16600a612b07565b9050611c588184612baf565b949350505050565b6000601260ff84161115611c8757604051635bb8b4ef60e11b815260040160405180910390fd5b6000611c94846012612c88565b611ca29060ff16600a612b07565b9050611c588184612a8a565b6000610aa0826122b4565b600081611cf1576001600160a01b03841660009081526009602090815260408083208684528252808320838052909152902054611d1e565b6001600160a01b038416600090815260086020908152604080832086845282528083208380529091529020545b90506000808212611d30576000611d3c565b611d3c611bf083612d09565b905080611d4a5750506115a7565b60006006805480602002602001604051908101604052809291908181526020016000905b82821015611dc6576000848152602090819020604080516060810182526003860290920180546001600160a01b031683526001808201548486015260029091015460ff16918301919091529083529092019101611d6e565b505050509050600080600090505b8251811015611f3b5785611e13576001600160a01b03881660009081526009602090815260408083208a84528252808320848452909152902054611e40565b6001600160a01b03881660009081526008602090815260408083208a845282528083208484529091529020545b91506000821315611f29576000611e7e848381518110611e7057634e487b7160e01b600052603260045260246000fd5b602002602001015184611b4a565b905084811015611ed757611ec68a8a8a878681518110611eae57634e487b7160e01b600052603260045260246000fd5b602002602001015187670de0b6b3a76400008d612306565b611ed09086612c71565b9450611f27565b6000611ee386836123df565b9050611f1b8b8b8b888781518110611f0b57634e487b7160e01b600052603260045260246000fd5b602002602001015188868e612306565b50600095505050611f3b565b505b80611f3381612cee565b915050611dd4565b5082156109e5576040516370a0823160e01b815230600482015283907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611fa357600080fd5b505afa158015611fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdb919061283c565b1015612040576003546040516327a0bb3360e01b8152600481018590526001600160a01b03909116906327a0bb3390602401600060405180830381600087803b15801561202757600080fd5b505af115801561203b573d6000803e3d6000fd5b505050505b82600560008282546120529190612a72565b9091555050604080518781526001600160a01b03891660208201529081018490527f70760e5e8f27cd318ef13d09f0a02fc429ea59ec55756afeb679a33cd14753269060600160405180910390a15050505050505050565b60006001600160ff1b038211156121195760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084015b60405180910390fd5b5090565b6000612172826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123eb9092919063ffffffff16565b8051909150156118f857808060200190518101906121909190612804565b6118f85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401612110565b6000600160ff1b8314806122065750600160ff1b82145b1561222457604051630d01a11b60e21b815260040160405180910390fd5b60008060008512612235578461223a565b846000035b91506000841261224a578361224f565b836000035b9050600061225d83836123fa565b90506001600160ff1b0381111561228a5760405163bf79e8d960e01b815260048101829052602401612110565b6000198087139086138082186001146122a357826122a8565b826000035b98975050505050505050565b6000808212156121195760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401612110565b60008061231f611bf0612318866117f6565b8790611bfe565b9050600061233c611bf08860400151612337856117f6565b611c0a565b9050600061235282670d2f13f7789f00006124bc565b905061236a8a8a6000612364856117f6565b89611801565b61239f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168c3084611a59565b87516001600160a01b03166000908152600760205260409020546123d1908c908b906123ca876117f6565b6001611801565b9a9950505050505050505050565b6000610a9d83836124c8565b6060611c5884846000856124dd565b60008080600019848609848602925082811083820303915050670de0b6b3a7640000811061243e5760405163698d9a0160e11b815260048101829052602401612110565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826124785780670de0b6b3a7640000850401945050505050610aa0565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6000610a9d83836125fa565b6000610a9d83670de0b6b3a764000084612606565b60608247101561253e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401612110565b843b61258c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401612110565b600080866001600160a01b031685876040516125a8919061297d565b60006040518083038185875af1925050503d80600081146125e5576040519150601f19603f3d011682016040523d82523d6000602084013e6125ea565b606091505b5091509150610c788282866126e2565b6000610a9d83836123fa565b60008080600019858709858702925082811083820303915050806000141561264f5783828161264557634e487b7160e01b600052601260045260246000fd5b0492505050610545565b83811061267957604051631dcf306360e21b81526004810182905260248101859052604401612110565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b606083156126f1575081610545565b8251156127015782518084602001fd5b8160405162461bcd60e51b815260040161211091906129fe565b60008060008060808587031215612730578384fd5b843561273b81612d39565b9350602085013561274b81612d39565b925060408501359150606085013561276281612d51565b939692955090935050565b6000806040838503121561277f578182fd5b823561278a81612d39565b9150602083013561279a81612d51565b809150509250929050565b600080604083850312156127b7578182fd5b82356127c281612d39565b946020939093013593505050565b6000806000606084860312156127e4578283fd5b83356127ef81612d39565b95602085013595506040909401359392505050565b600060208284031215612815578081fd5b815161054581612d51565b600060208284031215612831578081fd5b813561054581612d39565b60006020828403121561284d578081fd5b5051919050565b600060208284031215612865578081fd5b5035919050565b6000806040838503121561287e578182fd5b82359150602083013561279a81612d39565b600080600080608085870312156128a5578182fd5b8435935060208501356128b781612d39565b925060408501356128c781612d39565b9150606085013561276281612d51565b600080600080608085870312156128ec578182fd5b84359350602085013561274b81612d39565b600080600080600060a08688031215612915578283fd5b85359450602086013561292781612d39565b935060408601359250606086013561293e81612d39565b9150608086013561294e81612d51565b809150509295509295909350565b60006020828403121561296d578081fd5b815160ff81168114610545578182fd5b6000825161298f818460208701612cab565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b828110156129f157815180516001600160a01b03168552868101518786015285015160ff1685850152606090930192908501906001016129b6565b5091979650505050505050565b6020815260008251806020840152612a1d816040850160208701612cab565b601f01601f19169190910160400192915050565b600080821280156001600160ff1b0384900385131615612a5357612a53612d23565b600160ff1b8390038412811615612a6c57612a6c612d23565b50500190565b60008219821115612a8557612a85612d23565b500190565b600082612aa557634e487b7160e01b81526012600452602481fd5b600160ff1b821460001984141615612abf57612abf612d23565b500590565b600181815b80851115612aff578160001904821115612ae557612ae5612d23565b80851615612af257918102915b93841c9390800290612ac9565b509250929050565b6000610a9d8383600082612b1d57506001610aa0565b81612b2a57506000610aa0565b8160018114612b405760028114612b4a57612b66565b6001915050610aa0565b60ff841115612b5b57612b5b612d23565b50506001821b610aa0565b5060208310610133831016604e8410600b8410161715612b89575081810a610aa0565b612b938383612ac4565b8060001904821115612ba757612ba7612d23565b029392505050565b60006001600160ff1b0381841382841380821686840486111615612bd557612bd5612d23565b600160ff1b84871282811687830589121615612bf357612bf3612d23565b858712925087820587128484161615612c0e57612c0e612d23565b87850587128184161615612c2457612c24612d23565b505050929093029392505050565b60008083128015600160ff1b850184121615612c5057612c50612d23565b6001600160ff1b0384018313811615612c6b57612c6b612d23565b50500390565b600082821015612c8357612c83612d23565b500390565b600060ff821660ff841680821015612ca257612ca2612d23565b90039392505050565b60005b83811015612cc6578181015183820152602001612cae565b838111156115a75750506000910152565b600081612ce657612ce6612d23565b506000190190565b6000600019821415612d0257612d02612d23565b5060010190565b6000600160ff1b821415612d1f57612d1f612d23565b0390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114612d4e57600080fd5b50565b8015158114612d4e57600080fdfea264697066735822122004452f19726638c0d37c4793cbb0975ac521fe2a8fb957520fdc5270339efff364736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256,address,uint256,address,bool)": {
        "details": "No differentiated treatment of deposit in the UA token and other collaterals",
        "params": {
          "amount": "Amount to be used as the collateral of the position. Might not be 18 decimals",
          "depositToken": "Token to be used for the collateral of the position",
          "isTrader": "True if the user is a trader, False if the user is a liquidity provider",
          "marketIdx": "Index of the perpetual market",
          "user": "Account to deposit to"
        },
        "returns": {
          "amountUSDValue": "USD value of the deposited amount because pools' vQuote are USD-based"
        }
      },
      "getBadDebt()": {
        "returns": {
          "_0": "Amount of UA tokens borrowed by insurance. 18 decimals"
        }
      },
      "getLpReserveValue(uint256,address)": {
        "params": {
          "lp": "LP address",
          "marketIdx": "Perpetual market index"
        },
        "returns": {
          "_0": "reserveValue Value of collaterals in USD. 18 decimals"
        }
      },
      "getTotalValueLocked()": {
        "returns": {
          "_0": "Total Value Locked (tvl) in USD. 18 decimals"
        }
      },
      "getTraderReserveValue(uint256,address)": {
        "params": {
          "marketIdx": "Perpetual market index",
          "trader": "Trader address"
        },
        "returns": {
          "_0": "reserveValue Value of collaterals in USD. 18 decimals"
        }
      },
      "getWhiteListedCollaterals()": {
        "returns": {
          "_0": "List of Collateral tokens"
        }
      },
      "settleLiquidationOnCollaterals(address,address,uint256,bool)": {
        "params": {
          "isTrader": "True if the user is a trader, False if the user is a liquidity provider",
          "liquidatee": "Liquidatee",
          "marketIdx": "Market on which the liquidation has to occur"
        }
      },
      "settlePnL(uint256,address,int256,bool)": {
        "params": {
          "amount": "PnL amount in UA to apply. 18 decimals",
          "isTrader": "True if the user is a trader, False if the user is a liquidity provider",
          "marketIdx": "Index of the perpetual market",
          "user": "Account to apply the PnL to"
        }
      },
      "transferOwner(address,bool)": {
        "params": {
          "direct": "If 'true', ownership is directly transferred.",
          "recipient": "Account granted `owner` access control."
        }
      },
      "transferUa(address,uint256)": {
        "params": {
          "amount": "Amount of UA tokens to be withdrawn. 18 decimals",
          "user": "Account to withdraw UA tokens to"
        }
      },
      "withdraw(uint256,address,uint256,address,bool)": {
        "details": "Unlike `deposit`, differentiated treatment of withdrawals in the UA token and other collaterals",
        "params": {
          "amount": "Amount to withdraw from the vault. Might not be 18 decimals (decimals of the token)",
          "isTrader": "True if the user is a trader, False if the user is a liquidity provider",
          "marketIdx": "Index of the perpetual market",
          "user": "Account to withdraw from",
          "withdrawToken": "Token to be withdrawn from the vault"
        }
      },
      "withdrawAll(uint256,address,address,bool)": {
        "params": {
          "isTrader": "True if the user is a trader, False if the user is a liquidity provider",
          "marketIdx": "Index of the perpetual market",
          "user": "Account to withdraw from",
          "withdrawToken": "Token to be withdrawn from the vault"
        }
      },
      "withdrawPartial(uint256,address,uint256,bool)": {
        "params": {
          "isTrader": "True if the user is a trader, False if the user is a liquidity provider",
          "marketIdx": "Index of the perpetual market",
          "reductionRatio": "Share of collateral to be withdrawn. Min: 0. Max: 1e18",
          "user": "Account to withdraw from"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "IncreOwnable_NotOwner()": [
        {
          "notice": "Emitted when the sender is not the owner"
        }
      ],
      "IncreOwnable_NotPendingOwner()": [
        {
          "notice": "Emitted when the sender is not the pending owner"
        }
      ],
      "IncreOwnable_TransferZeroAddress()": [
        {
          "notice": "Emitted when the proposed owner is equal to the zero address"
        }
      ],
      "LibReserve_ExcessiveDecimals()": [
        {
          "notice": "Emitted when the proposed token decimals exceeds MAX_DECIMALS"
        }
      ],
      "PRBMathSD59x18__MulInputTooSmall()": [
        {
          "notice": "Emitted when one of the inputs is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__MulOverflow(uint256)": [
        {
          "notice": "Emitted when the intermediary absolute result overflows SD59x18."
        }
      ],
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "Vault_ClearingHouseZeroAddress()": [
        {
          "notice": "Emitted when the proposed clearingHouse address is equal to the zero address"
        }
      ],
      "Vault_CollateralAlreadyWhiteListed()": [
        {
          "notice": "Emitted when owner tries to whitelist a collateral already whitelisted"
        }
      ],
      "Vault_ExcessiveCollateralWeight()": [
        {
          "notice": "Emitted when the proposed collateral weight is above the limit"
        }
      ],
      "Vault_ExcessiveDecimalsConstructor()": [
        {
          "notice": "Emitted when the decimals of the proposed reserve token are gt 18"
        }
      ],
      "Vault_InsufficientBalance()": [
        {
          "notice": "Emitted when a user attempts to withdraw more collateral than available in vault"
        }
      ],
      "Vault_InsufficientCollateralWeight()": [
        {
          "notice": "Emitted when the proposed collateral weight is under the limit"
        }
      ],
      "Vault_InsuranceZeroAddress()": [
        {
          "notice": "Emitted when the proposed insurance address is equal to the zero address"
        }
      ],
      "Vault_OracleZeroAddress()": [
        {
          "notice": "Emitted when the proposed oracle address is equal to the zero address"
        }
      ],
      "Vault_SenderNotClearingHouse()": [
        {
          "notice": "Emitted when the sender is not the clearing house"
        }
      ],
      "Vault_UADebt()": [
        {
          "notice": "Emitted when user tries to withdraw collateral while having a UA debt"
        }
      ],
      "Vault_UnsupportedCollateral()": [
        {
          "notice": "Emitted when a user attempts to use a token which is not whitelisted as collateral"
        }
      ],
      "Vault_WithdrawBalanceBelowMin()": [
        {
          "notice": "Emitted when a user attempts to withdraw an amount that reduces their balance below mMIN_DEPOSIT_AMOUNT"
        }
      ],
      "Vault_WithdrawExcessiveAmount()": [
        {
          "notice": "Emitted when a user attempts to withdraw more than their balance"
        }
      ],
      "Vault_WithdrawReductionRatioTooHigh()": [
        {
          "notice": "Emitted when a user attempts to withdraw with a reduction ratio above 1e18"
        }
      ],
      "Vault_ZeroAddressConstructor(uint8)": [
        {
          "notice": "Emitted when the zero address is provided as a parameter in the constructor"
        }
      ]
    },
    "events": {
      "ClearingHouseChanged(address)": {
        "notice": "Emitted when a new ClearingHouse is connected to the vault"
      },
      "CollateralAdded(address,uint256)": {
        "notice": "Emitted when a new Oracle is connected to the vault"
      },
      "CollateralWeightChanged(address,uint256)": {
        "notice": "Emitted when a new Oracle is connected to the vault"
      },
      "Deposit(uint256,address,address,uint256)": {
        "notice": "Emitted when collateral is deposited into the vault"
      },
      "InsuranceChanged(address)": {
        "notice": "Emitted when a new Insurance is connected to the vault"
      },
      "OracleChanged(address)": {
        "notice": "Emitted when a new Oracle is connected to the vault"
      },
      "TraderBadDebtGenerated(uint256,address,uint256)": {
        "notice": "Emitted when bad debt is settled for by the insurance reserve"
      },
      "Withdraw(uint256,address,address,uint256)": {
        "notice": "Emitted when collateral is withdrawn from the vault"
      }
    },
    "kind": "user",
    "methods": {
      "addWhiteListedCollateral(address,uint256)": {
        "notice": "Add a new token to the list of white listed ERC20 which can be used as collaterals"
      },
      "changeCollateralWeight(address,uint256)": {
        "notice": "Change weight of a white listed collateral         Useful as a risk mitigation measure in case one collateral drops in value"
      },
      "claimOwner()": {
        "notice": "`pendingOwner` can claim `owner` account."
      },
      "deposit(uint256,address,uint256,address,bool)": {
        "notice": "Deposit reserveTokens to account"
      },
      "getBadDebt()": {
        "notice": "Get the amount of UA tokens borrowed by insurance (bad debt)"
      },
      "getLpReserveValue(uint256,address)": {
        "notice": "Get the balance of a liquidity provider, accounted for in USD. 18 decimals"
      },
      "getTotalValueLocked()": {
        "notice": "Get all value of all tokens deposited into the vault"
      },
      "getTraderReserveValue(uint256,address)": {
        "notice": "Get the balance of a trader, accounted for in USD. 18 decimals"
      },
      "getWhiteListedCollaterals()": {
        "notice": "Get all collateral tokens available for margin trading"
      },
      "settleLiquidationOnCollaterals(address,address,uint256,bool)": {
        "notice": "Allow liquidator to buy back collateral(s) of liquidated user at discounted price whereby settling his debt"
      },
      "settlePnL(uint256,address,int256,bool)": {
        "notice": "Withdraw tokens from account"
      },
      "tokenToCollateralIdx(address)": {
        "notice": "Map white listed collateral tokens to their whiteListedCollaterals indexes"
      },
      "transferOwner(address,bool)": {
        "notice": "Transfer `owner` account."
      },
      "transferUa(address,uint256)": {
        "notice": "Transfer UA tokens from the vault"
      },
      "withdraw(uint256,address,uint256,address,bool)": {
        "notice": "Withdraw tokens from account"
      },
      "withdrawAll(uint256,address,address,bool)": {
        "notice": "Withdraw all tokens from account"
      },
      "withdrawPartial(uint256,address,uint256,bool)": {
        "notice": "Withdraw share of tokens from account, across multi-collaterals"
      }
    },
    "notice": "Keeps track of all token reserves for all market",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12395,
        "contract": "contracts/Vault.sol:Vault",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12397,
        "contract": "contracts/Vault.sol:Vault",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7881,
        "contract": "contracts/Vault.sol:Vault",
        "label": "clearingHouse",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IClearingHouse)9658"
      },
      {
        "astId": 7885,
        "contract": "contracts/Vault.sol:Vault",
        "label": "insurance",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IInsurance)10024"
      },
      {
        "astId": 7889,
        "contract": "contracts/Vault.sol:Vault",
        "label": "oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IOracle)10067"
      },
      {
        "astId": 7891,
        "contract": "contracts/Vault.sol:Vault",
        "label": "traderBadDebt",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7895,
        "contract": "contracts/Vault.sol:Vault",
        "label": "whiteListedCollaterals",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Collateral)10414_storage)dyn_storage"
      },
      {
        "astId": 7901,
        "contract": "contracts/Vault.sol:Vault",
        "label": "tokenToCollateralIdx",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_contract(IERC20Metadata)931,t_uint256)"
      },
      {
        "astId": 7909,
        "contract": "contracts/Vault.sol:Vault",
        "label": "traderBalances",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_int256)))"
      },
      {
        "astId": 7917,
        "contract": "contracts/Vault.sol:Vault",
        "label": "lpBalances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_int256)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Collateral)10414_storage)dyn_storage": {
        "base": "t_struct(Collateral)10414_storage",
        "encoding": "dynamic_array",
        "label": "struct IVault.Collateral[]",
        "numberOfBytes": "32"
      },
      "t_contract(IClearingHouse)9658": {
        "encoding": "inplace",
        "label": "contract IClearingHouse",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)931": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(IInsurance)10024": {
        "encoding": "inplace",
        "label": "contract IInsurance",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)10067": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_int256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => int256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_int256))"
      },
      "t_mapping(t_contract(IERC20Metadata)931,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Metadata)931",
        "label": "mapping(contract IERC20Metadata => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_int256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_int256)"
      },
      "t_struct(Collateral)10414_storage": {
        "encoding": "inplace",
        "label": "struct IVault.Collateral",
        "members": [
          {
            "astId": 10409,
            "contract": "contracts/Vault.sol:Vault",
            "label": "asset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20Metadata)931"
          },
          {
            "astId": 10411,
            "contract": "contracts/Vault.sol:Vault",
            "label": "weight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10413,
            "contract": "contracts/Vault.sol:Vault",
            "label": "decimals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}