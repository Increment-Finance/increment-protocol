{
  "address": "0x81fE037039fB2B42EA14cBA56832E2655C2b64A4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IClearingHouse",
          "name": "_clearingHouse",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "paramIndex",
          "type": "uint8"
        }
      ],
      "name": "ClearingHouseViewer_ZeroAddressConstructor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__AbsInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__DivInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAbs",
          "type": "uint256"
        }
      ],
      "name": "PRBMathSD59x18__DivOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "clearingHouse",
      "outputs": [
        {
          "internalType": "contract IClearingHouse",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "getBaseDust",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vQuoteAmountToSpend",
          "type": "uint256"
        }
      ],
      "name": "getExpectedVBaseAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vBaseAmountToSpend",
          "type": "uint256"
        }
      ],
      "name": "getExpectedVQuoteAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "getGlobalPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "timeOfLastTrade",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "timeOfLastTwapUpdate",
              "type": "uint128"
            },
            {
              "internalType": "int256",
              "name": "cumFundingRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "blockStartPrice",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "totalTradingFeesGrowth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalLiquidityProvided",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBaseFeesGrowth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalQuoteFeesGrowth",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibPerpetual.GlobalPosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "getInsuranceFee",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "marketIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenIdx",
          "type": "uint256"
        }
      ],
      "name": "getLpBalance",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLpFundingPayments",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLpPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "openNotional",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "positionSize",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "cumFundingRate",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalTradingFeesGrowth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBaseFeesGrowth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalQuoteFeesGrowth",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibPerpetual.LiquidityProviderPosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLpPositionAfterWithdrawal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "openNotional",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "positionSize",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "cumFundingRate",
              "type": "int256"
            }
          ],
          "internalType": "struct LibPerpetual.TraderPosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLpReserveValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLpUnrealizedPnL",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "internalType": "contract ICryptoSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "iter",
          "type": "uint256"
        }
      ],
      "name": "getProposedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "marketIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenIdx",
          "type": "uint256"
        }
      ],
      "name": "getTraderBalance",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTraderFundingPayments",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTraderPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "openNotional",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "positionSize",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "cumFundingRate",
              "type": "int256"
            }
          ],
          "internalType": "struct LibPerpetual.TraderPosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTraderReserveValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTraderUnrealizedPnL",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "indexPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "ratio",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "isTrader",
          "type": "bool"
        }
      ],
      "name": "marginIsValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isTrader",
          "type": "bool"
        }
      ],
      "name": "marginRatio",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x64c23900615e1b5de5a89f7c77e1e4a10259c751ac2fa48e638ff0ef49ae2062",
  "receipt": {
    "to": null,
    "from": "0x69C7c048e7C286B0a8Bcf7cD7620E71Ef7569421",
    "contractAddress": "0x81fE037039fB2B42EA14cBA56832E2655C2b64A4",
    "transactionIndex": 0,
    "gasUsed": "1772657",
    "logsBloom": "0x
    "blockHash": "0x5b1f8f98593f2d13c51053ee6d2002da9cc1e5c5f8a805c5bbe33239ff601025",
    "transactionHash": "0x64c23900615e1b5de5a89f7c77e1e4a10259c751ac2fa48e638ff0ef49ae2062",
    "logs": [],
    "blockNumber": 14861825,
    "cumulativeGasUsed": "1772657",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9893AFB20987973bFbA9469EA7B288A9827c99cb"
  ],
  "solcInputHash": "0e343dabaf86f1433359bcaf3343f5ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IClearingHouse\",\"name\":\"_clearingHouse\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"paramIndex\",\"type\":\"uint8\"}],\"name\":\"ClearingHouseViewer_ZeroAddressConstructor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__AbsInputTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__DivInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\"}],\"name\":\"PRBMathSD59x18__DivOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"clearingHouse\",\"outputs\":[{\"internalType\":\"contract IClearingHouse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getBaseDust\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vQuoteAmountToSpend\",\"type\":\"uint256\"}],\"name\":\"getExpectedVBaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vBaseAmountToSpend\",\"type\":\"uint256\"}],\"name\":\"getExpectedVQuoteAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getGlobalPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"timeOfLastTrade\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"timeOfLastTwapUpdate\",\"type\":\"uint128\"},{\"internalType\":\"int256\",\"name\":\"cumFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"blockStartPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"totalTradingFeesGrowth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidityProvided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBaseFeesGrowth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalQuoteFeesGrowth\",\"type\":\"uint256\"}],\"internalType\":\"struct LibPerpetual.GlobalPosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getInsuranceFee\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdx\",\"type\":\"uint256\"}],\"name\":\"getLpBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpFundingPayments\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"openNotional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"positionSize\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cumFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTradingFeesGrowth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBaseFeesGrowth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalQuoteFeesGrowth\",\"type\":\"uint256\"}],\"internalType\":\"struct LibPerpetual.LiquidityProviderPosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpPositionAfterWithdrawal\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"openNotional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"positionSize\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cumFundingRate\",\"type\":\"int256\"}],\"internalType\":\"struct LibPerpetual.TraderPosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpReserveValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpUnrealizedPnL\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getMarket\",\"outputs\":[{\"internalType\":\"contract ICryptoSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"iter\",\"type\":\"uint256\"}],\"name\":\"getProposedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdx\",\"type\":\"uint256\"}],\"name\":\"getTraderBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTraderFundingPayments\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTraderPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"openNotional\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"positionSize\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cumFundingRate\",\"type\":\"int256\"}],\"internalType\":\"struct LibPerpetual.TraderPosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTraderReserveValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTraderUnrealizedPnL\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"indexPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"ratio\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"isTrader\",\"type\":\"bool\"}],\"name\":\"marginIsValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isTrader\",\"type\":\"bool\"}],\"name\":\"marginRatio\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getBaseDust(uint256)\":{\"returns\":{\"_0\":\"Base balance of Governance. 18 decimals\"}},\"getExpectedVBaseAmount(uint256,uint256)\":{\"details\":\"It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as `minAmount` in `extendPosition`TODO: store market address to avoid second call\",\"params\":{\"idx\":\"Index of the perpetual market\",\"vQuoteAmountToSpend\":\"Amount of vQuote to be exchanged against some vBase. 18 decimals\"}},\"getExpectedVQuoteAmount(uint256,uint256)\":{\"details\":\"It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as `minAmount` in `extendPosition`TODO: store market address to avoid second call\",\"params\":{\"idx\":\"Index of the perpetual market\",\"vBaseAmountToSpend\":\"Amount of vBase to be exchanged against some vQuote. 18 decimals\"}},\"getGlobalPosition(uint256)\":{\"params\":{\"idx\":\"Index of the perpetual market\"}},\"getLpBalance(address,uint256,uint256)\":{\"params\":{\"marketIdx\":\"Index of the perpetual market\",\"tokenIdx\":\"Token to get the balance of\",\"user\":\"LP to get the balance of\"}},\"getLpFundingPayments(uint256,address)\":{\"params\":{\"account\":\"Lp to get the funding payments\",\"idx\":\"Index of the perpetual market\"}},\"getLpPosition(uint256,address)\":{\"params\":{\"account\":\"Address to get the LP position from\",\"idx\":\"Index of the perpetual market\"}},\"getLpPositionAfterWithdrawal(uint256,address)\":{\"params\":{\"account\":\"Liquidity Provider\"},\"returns\":{\"_0\":\"(Active) Liquidity Provider position\"}},\"getLpReserveValue(uint256,address)\":{\"params\":{\"account\":\"Address to get the portfolio value from\",\"idx\":\"Index of the perpetual market\"}},\"getLpUnrealizedPnL(uint256,address)\":{\"params\":{\"account\":\"Lp to get the unrealized PnL from\",\"idx\":\"Index of the perpetual market\"}},\"getMarket(uint256)\":{\"params\":{\"idx\":\"Index of the perpetual market\"}},\"getProposedAmount(uint256,address,uint256)\":{\"details\":\"Solidity implementation to minimize the node calls once has to make when finding proposed amountShould not be called from another contract\",\"params\":{\"idx\":\"Index of the perpetual market\",\"iter\":\"Maximum iterations\",\"trader\":\"Account\"},\"returns\":{\"amountIn\":\"Amount of tokens to swap. 18 decimals\",\"amountOut\":\"Amount of tokens to receive from the swap. 18 decimals\"}},\"getTraderBalance(address,uint256,uint256)\":{\"params\":{\"marketIdx\":\"Index of the perpetual market\",\"tokenIdx\":\"Token to get the balance of\",\"user\":\"Trader to get the balance of\"}},\"getTraderFundingPayments(uint256,address)\":{\"params\":{\"account\":\"Trader to get the funding payments\",\"idx\":\"Index of the perpetual market\"}},\"getTraderPosition(uint256,address)\":{\"params\":{\"account\":\"Address to get the trading position from\",\"idx\":\"Index of the perpetual market\"}},\"getTraderReserveValue(uint256,address)\":{\"params\":{\"account\":\"Address to get the portfolio value from\",\"idx\":\"Index of the perpetual market\"}},\"getTraderUnrealizedPnL(uint256,address)\":{\"params\":{\"account\":\"Trader to get the unrealized PnL from\",\"idx\":\"Index of the perpetual market\"}},\"indexPrice(uint256)\":{\"params\":{\"idx\":\"Index of the perpetual market\"}},\"marginIsValid(uint256,address,int256,bool)\":{\"params\":{\"account\":\"Account of the position to get the margin ratio from\",\"idx\":\"Index of the perpetual market\",\"isTrader\":\"True if the user is a trader, False if the user is a liquidity provider\",\"ratio\":\"Proposed ratio to compare the position against\"},\"returns\":{\"_0\":\"True if the position exceeds margin ratio, false otherwise\"}},\"marginRatio(uint256,address,bool)\":{\"params\":{\"account\":\"Account of the position to get the margin ratio from\",\"idx\":\"Index of the perpetual market\",\"isTrader\":\"True if the user is a trader, False if the user is a liquidity provider\"},\"returns\":{\"_0\":\"Margin ratio of the position (in 1e18)\"}},\"marketPrice(uint256)\":{\"params\":{\"idx\":\"Index of the perpetual market\"}}},\"title\":\"Clearing House Helper Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"ClearingHouseViewer_ZeroAddressConstructor(uint8)\":[{\"notice\":\"Emitted when the zero address is provided as a parameter in the constructor\"}],\"PRBMathSD59x18__AbsInputTooSmall()\":[{\"notice\":\"Emitted when the input is MIN_SD59x18.\"}],\"PRBMathSD59x18__DivInputTooSmall()\":[{\"notice\":\"Emitted when one of the inputs is MIN_SD59x18.\"}],\"PRBMathSD59x18__DivOverflow(uint256)\":[{\"notice\":\"Emitted when one of the intermediary unsigned results overflows SD59x18.\"}],\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"getBaseDust(uint256)\":{\"notice\":\"Get the current (base) dust balance\"},\"getExpectedVBaseAmount(uint256,uint256)\":{\"notice\":\"Return amount for vBase one would receive for exchanging `vQuoteAmountToSpend` in a select market (excluding slippage)\"},\"getExpectedVQuoteAmount(uint256,uint256)\":{\"notice\":\"Return amount for vQuote one would receive for exchanging `vBaseAmountToSpend` in a select market (excluding slippage)\"},\"getLpBalance(address,uint256,uint256)\":{\"notice\":\"Get LP balance\"},\"getLpFundingPayments(uint256,address)\":{\"notice\":\"Calculate missed funding payments\"},\"getLpPosition(uint256,address)\":{\"notice\":\"Get Lp position\"},\"getLpPositionAfterWithdrawal(uint256,address)\":{\"notice\":\"Get the (active) position of a liquidity provider after withdrawing liquidity\"},\"getLpReserveValue(uint256,address)\":{\"notice\":\"Get the portfolio value of an Lp\"},\"getProposedAmount(uint256,address,uint256)\":{\"notice\":\"Get the proposed amount needed to close a position\"},\"getTraderBalance(address,uint256,uint256)\":{\"notice\":\"Get trader balance\"},\"getTraderFundingPayments(uint256,address)\":{\"notice\":\"Calculate missed funding payments\"},\"getTraderPosition(uint256,address)\":{\"notice\":\"Get trader position\"},\"getTraderReserveValue(uint256,address)\":{\"notice\":\"Get the portfolio value of a trader\"},\"indexPrice(uint256)\":{\"notice\":\"Return the current off-chain exchange rate for vBase/vQuote\"},\"marginIsValid(uint256,address,int256,bool)\":{\"notice\":\"Approximately determine whether or not a position is valid for a given margin ratio (incl. an estimate of pending funding payments)\"},\"marginRatio(uint256,address,bool)\":{\"notice\":\"Get the (approximate) margin ratio of a trading position (given that, for now, 1 trading position = 1 address) incl. an estimate of pending funding payments\"},\"marketPrice(uint256)\":{\"notice\":\"Return the last traded price (used for TWAP)\"}},\"notice\":\"Utility functions to easily extract data from Perpetual Contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClearingHouseViewer.sol\":\"ClearingHouseViewer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x47c0131bd8a972c31596958aa86752ea18d60e33f1cd94d412b9e29fd6ab25a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\"},\"contracts/ClearingHouseViewer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// contracts\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IClearingHouse} from \\\"./interfaces/IClearingHouse.sol\\\";\\nimport {IClearingHouseViewer} from \\\"./interfaces/IClearingHouseViewer.sol\\\";\\nimport {ICryptoSwap} from \\\"./interfaces/ICryptoSwap.sol\\\";\\n\\n// libraries\\nimport {LibMath} from \\\"./lib/LibMath.sol\\\";\\nimport {LibPerpetual} from \\\"./lib/LibPerpetual.sol\\\";\\n\\n/// @title Clearing House Helper Contract\\n/// @notice Utility functions to easily extract data from Perpetual Contracts\\ncontract ClearingHouseViewer is IClearingHouseViewer {\\n    using LibMath for uint256;\\n    using LibMath for int256;\\n    using SafeERC20 for IERC20Metadata;\\n\\n    // dependencies\\n    IClearingHouse public clearingHouse;\\n\\n    uint256 private constant VQUOTE_INDEX = 0;\\n    uint256 private constant VBASE_INDEX = 1;\\n\\n    constructor(IClearingHouse _clearingHouse) {\\n        if (address(_clearingHouse) == address(0)) revert ClearingHouseViewer_ZeroAddressConstructor(0);\\n        clearingHouse = _clearingHouse;\\n    }\\n\\n    /// @notice Return amount for vBase one would receive for exchanging `vQuoteAmountToSpend` in a select market (excluding slippage)\\n    /// @dev It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as `minAmount` in `extendPosition`\\n    /// @dev TODO: store market address to avoid second call\\n    /// @param idx Index of the perpetual market\\n    /// @param vQuoteAmountToSpend Amount of vQuote to be exchanged against some vBase. 18 decimals\\n    function getExpectedVBaseAmount(uint256 idx, uint256 vQuoteAmountToSpend) public view override returns (uint256) {\\n        // TODO: add quote only fees\\n        // slither-disable-next-line calls-loop\\n        return clearingHouse.perpetuals(idx).market().get_dy(VQUOTE_INDEX, VBASE_INDEX, vQuoteAmountToSpend);\\n    }\\n\\n    /// @notice Return amount for vQuote one would receive for exchanging `vBaseAmountToSpend` in a select market (excluding slippage)\\n    /// @dev It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as `minAmount` in `extendPosition`\\n    /// @dev TODO: store market address to avoid second call\\n    /// @param idx Index of the perpetual market\\n    /// @param vBaseAmountToSpend Amount of vBase to be exchanged against some vQuote. 18 decimals\\n    function getExpectedVQuoteAmount(uint256 idx, uint256 vBaseAmountToSpend) public view override returns (uint256) {\\n        return clearingHouse.perpetuals(idx).market().get_dy(VBASE_INDEX, VQUOTE_INDEX, vBaseAmountToSpend);\\n    }\\n\\n    /// @notice Return the last traded price (used for TWAP)\\n    /// @param idx Index of the perpetual market\\n    function marketPrice(uint256 idx) public view override returns (uint256) {\\n        return clearingHouse.perpetuals(idx).marketPrice();\\n    }\\n\\n    /// @notice Return the current off-chain exchange rate for vBase/vQuote\\n    /// @param idx Index of the perpetual market\\n    function indexPrice(uint256 idx) external view override returns (int256) {\\n        return clearingHouse.perpetuals(idx).indexPrice();\\n    }\\n\\n    /// @param idx Index of the perpetual market\\n    function getGlobalPosition(uint256 idx) external view override returns (LibPerpetual.GlobalPosition memory) {\\n        return clearingHouse.perpetuals(idx).getGlobalPosition();\\n    }\\n\\n    /// @param idx Index of the perpetual market\\n    function getMarket(uint256 idx) external view override returns (ICryptoSwap) {\\n        return clearingHouse.perpetuals(idx).market();\\n    }\\n\\n    function getInsuranceFee(uint256 idx) external view override returns (int256) {\\n        return clearingHouse.perpetuals(idx).getInsuranceFee();\\n    }\\n\\n    /* ****************** */\\n    /*   User viewer      */\\n    /* ****************** */\\n\\n    /// @notice Approximately determine whether or not a position is valid for a given margin ratio (incl. an estimate of pending funding payments)\\n    /// @param idx Index of the perpetual market\\n    /// @param account Account of the position to get the margin ratio from\\n    /// @param ratio Proposed ratio to compare the position against\\n    /// @param isTrader True if the user is a trader, False if the user is a liquidity provider\\n    /// @return True if the position exceeds margin ratio, false otherwise\\n    function marginIsValid(\\n        uint256 idx,\\n        address account,\\n        int256 ratio,\\n        bool isTrader\\n    ) external view override returns (bool) {\\n        return marginRatio(idx, account, isTrader) >= ratio;\\n    }\\n\\n    /// @notice Get the (approximate) margin ratio of a trading position (given that, for now, 1 trading position = 1 address) incl. an estimate of pending funding payments\\n    /// @param idx Index of the perpetual market\\n    /// @param account Account of the position to get the margin ratio from\\n    /// @param isTrader True if the user is a trader, False if the user is a liquidity provider\\n    /// @return Margin ratio of the position (in 1e18)\\n    function marginRatio(\\n        uint256 idx,\\n        address account,\\n        bool isTrader\\n    ) public view override returns (int256) {\\n        // margin ratio = (collateral + unrealizedPositionPnl) / trader.openNotional\\n        // all amounts must be expressed in vQuote (e.g. USD), otherwise the end result doesn't make sense\\n        int256 openNotional = isTrader\\n            ? getTraderPosition(idx, account).openNotional\\n            : getLpPositionAfterWithdrawal(idx, account).openNotional;\\n\\n        // when no position open, margin ratio is 100%\\n        if (openNotional == 0) {\\n            return 1e18;\\n        }\\n\\n        int256 collateral = isTrader ? getTraderReserveValue(idx, account) : getLpReserveValue(idx, account);\\n        int256 unrealizedPositionPnl = isTrader\\n            ? getTraderUnrealizedPnL(idx, account)\\n            : getLpUnrealizedPnL(idx, account);\\n        int256 fundingPayments = isTrader ? getTraderFundingPayments(idx, account) : getLpFundingPayments(idx, account);\\n\\n        return _computeMarginRatio(collateral, unrealizedPositionPnl, fundingPayments, openNotional);\\n    }\\n\\n    /// @notice Calculate missed funding payments\\n    /// @param idx Index of the perpetual market\\n    /// @param account Trader to get the funding payments\\n    function getTraderFundingPayments(uint256 idx, address account) public view override returns (int256) {\\n        return clearingHouse.perpetuals(idx).getTraderFundingPayments(account);\\n    }\\n\\n    /// @param idx Index of the perpetual market\\n    /// @param account Trader to get the unrealized PnL from\\n    function getTraderUnrealizedPnL(uint256 idx, address account) public view override returns (int256) {\\n        return clearingHouse.perpetuals(idx).getTraderUnrealizedPnL(account);\\n    }\\n\\n    /// @notice Get the portfolio value of a trader\\n    /// @param idx Index of the perpetual market\\n    /// @param account Address to get the portfolio value from\\n    function getTraderReserveValue(uint256 idx, address account) public view override returns (int256) {\\n        return clearingHouse.vault().getTraderReserveValue(idx, account);\\n    }\\n\\n    /// @notice Get trader position\\n    /// @param idx Index of the perpetual market\\n    /// @param account Address to get the trading position from\\n    function getTraderPosition(uint256 idx, address account)\\n        public\\n        view\\n        override\\n        returns (LibPerpetual.TraderPosition memory)\\n    {\\n        return clearingHouse.perpetuals(idx).getTraderPosition(account);\\n    }\\n\\n    /// @notice Get trader balance\\n    /// @param user Trader to get the balance of\\n    /// @param marketIdx Index of the perpetual market\\n    /// @param tokenIdx Token to get the balance of\\n    function getTraderBalance(\\n        address user,\\n        uint256 marketIdx,\\n        uint256 tokenIdx\\n    ) external view override returns (int256) {\\n        return clearingHouse.vault().getTraderBalance(user, marketIdx, tokenIdx);\\n    }\\n\\n    /// @notice Get LP balance\\n    /// @param user LP to get the balance of\\n    /// @param marketIdx Index of the perpetual market\\n    /// @param tokenIdx Token to get the balance of\\n    function getLpBalance(\\n        address user,\\n        uint256 marketIdx,\\n        uint256 tokenIdx\\n    ) external view override returns (int256) {\\n        return clearingHouse.vault().getLpBalance(user, marketIdx, tokenIdx);\\n    }\\n\\n    /// @notice Calculate missed funding payments\\n    /// @param idx Index of the perpetual market\\n    /// @param account Lp to get the funding payments\\n    function getLpFundingPayments(uint256 idx, address account) public view override returns (int256) {\\n        return clearingHouse.perpetuals(idx).getLpFundingPayments(account);\\n    }\\n\\n    /// @param idx Index of the perpetual market\\n    /// @param account Lp to get the unrealized PnL from\\n    function getLpUnrealizedPnL(uint256 idx, address account) public view override returns (int256) {\\n        return clearingHouse.perpetuals(idx).getLpUnrealizedPnL(account);\\n    }\\n\\n    /// @notice Get the portfolio value of an Lp\\n    /// @param idx Index of the perpetual market\\n    /// @param account Address to get the portfolio value from\\n    function getLpReserveValue(uint256 idx, address account) public view override returns (int256) {\\n        return clearingHouse.vault().getLpReserveValue(idx, account);\\n    }\\n\\n    /// @notice Get the (active) position of a liquidity provider after withdrawing liquidity\\n    /// @param account Liquidity Provider\\n    /// @return (Active) Liquidity Provider position\\n    function getLpPositionAfterWithdrawal(uint256 idx, address account)\\n        public\\n        view\\n        override\\n        returns (LibPerpetual.TraderPosition memory)\\n    {\\n        return clearingHouse.perpetuals(idx).getLpPositionAfterWithdrawal(account);\\n    }\\n\\n    /// @notice Get Lp position\\n    /// @param idx Index of the perpetual market\\n    /// @param account Address to get the LP position from\\n    function getLpPosition(uint256 idx, address account)\\n        external\\n        view\\n        override\\n        returns (LibPerpetual.LiquidityProviderPosition memory)\\n    {\\n        return clearingHouse.perpetuals(idx).getLpPosition(account);\\n    }\\n\\n    /// @notice Get the current (base) dust balance\\n    /// @return Base balance of Governance. 18 decimals\\n    function getBaseDust(uint256 idx) external view override returns (uint256) {\\n        return getTraderPosition(idx, address(clearingHouse)).positionSize.toUint256();\\n    }\\n\\n    /// @notice Get the proposed amount needed to close a position\\n    /// @dev Solidity implementation to minimize the node calls once has to make when finding proposed amount\\n    /// @dev Should not be called from another contract\\n    /// @param idx Index of the perpetual market\\n    /// @param trader Account\\n    /// @param iter Maximum iterations\\n    /// @return amountIn Amount of tokens to swap. 18 decimals\\n    /// @return amountOut Amount of tokens to receive from the swap. 18 decimals\\n    // TODO: use reductionRatio parameters\\n    // TODO: adjust for curve fees reimbursed\\n    function getProposedAmount(\\n        uint256 idx,\\n        address trader,\\n        uint256 iter\\n    ) external view override returns (uint256 amountIn, uint256 amountOut) {\\n        int256 positionSize = getTraderPosition(idx, trader).positionSize;\\n        if (positionSize > 0) {\\n            amountIn = positionSize.toUint256();\\n            amountOut = getExpectedVQuoteAmount(idx, amountIn);\\n        } else {\\n            uint256 position = (-positionSize).toUint256();\\n            amountIn = position.wadMul(marketPrice(idx));\\n            // binary search in [marketPrice * 0.7, marketPrice * 1.3]\\n            uint256 maxVal = (amountIn * 13) / 10;\\n            uint256 minVal = (amountIn * 7) / 10;\\n\\n            for (uint256 i = 0; i < iter; i++) {\\n                amountIn = (minVal + maxVal) / 2;\\n                // slither-disable-next-line calls-loop\\n                amountOut = getExpectedVBaseAmount(idx, amountIn);\\n\\n                if (amountOut == position) {\\n                    break;\\n                } else if (amountOut < position) {\\n                    minVal = amountIn;\\n                } else {\\n                    maxVal = amountIn;\\n                }\\n            }\\n\\n            // take maxVal to make sure we are above the target\\n            if (amountOut < position) {\\n                amountIn = maxVal;\\n                amountOut = getExpectedVBaseAmount(idx, amountIn);\\n            }\\n        }\\n        return (amountIn, amountOut);\\n    }\\n\\n    /* ****************** */\\n    /*   Internal viewer  */\\n    /* ****************** */\\n\\n    function _computeMarginRatio(\\n        int256 collateral,\\n        int256 unrealizedPositionPnl,\\n        int256 fundingPayments,\\n        int256 openNotional\\n    ) internal pure returns (int256) {\\n        return (collateral + unrealizedPositionPnl + fundingPayments).wadDiv(openNotional.abs());\\n    }\\n}\\n\",\"keccak256\":\"0xf406cda796c25ddc108ff64820233f341b569cf5e2b57bd6d470bcd901585b8f\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IClearingHouse.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\nimport {IPerpetual} from \\\"./IPerpetual.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\n\\n// libraries\\nimport {LibPerpetual} from \\\"../lib/LibPerpetual.sol\\\";\\n\\ninterface IClearingHouse {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error ClearingHouse_ZeroAddressConstructor(uint8 paramIndex);\\n\\n    /// @notice Emitted when there is not enough margin to withdraw the requested amount\\n    error ClearingHouse_WithdrawInsufficientMargin();\\n\\n    /// @notice Emitted when the position is not reduced entirely using closePositionWithdrawCollateral\\n    error ClearingHouse_ClosePositionStillOpen();\\n\\n    /// @notice Emitted when the liquidatee does not have an open position\\n    error ClearingHouse_LiquidateInvalidPosition();\\n\\n    /// @notice Emitted when the margin of the liquidatee's position is still valid\\n    error ClearingHouse_LiquidateValidMargin();\\n\\n    /// @notice Emitted when the attempted liquidation does not close the full position\\n    error ClearingHouse_LiquidateInsufficientProposedAmount();\\n\\n    /// @notice Emitted when a user attempts to provide liquidity with amount equal to 0\\n    error ClearingHouse_ProvideLiquidityZeroAmount();\\n\\n    /// @notice Emitted when a user attempts to withdraw more liquidity than they have\\n    error ClearingHouse_RemoveLiquidityInsufficientFunds();\\n\\n    /// @notice Emitted when vault withdrawal is unsuccessful\\n    error ClearingHouse_VaultWithdrawUnsuccessful();\\n\\n    /// @notice Emitted when the proposed minMargin is too low\\n    error ClearingHouse_InsufficientMinMargin();\\n\\n    /// @notice Emitted when the proposed minMargin is too high\\n    error ClearingHouse_ExcessiveMinMargin();\\n\\n    /// @notice Emitted when the proposed liquidation reward is too low\\n    error ClearingHouse_InsufficientLiquidationReward();\\n\\n    /// @notice Emitted when the proposed liquidation reward is too high\\n    error ClearingHouse_ExcessiveLiquidationReward();\\n\\n    /// @notice Emitted when the proposed insurance ratio is too low\\n    error ClearingHouse_InsufficientInsuranceRatio();\\n\\n    /// @notice Emitted when the proposed insurance ratio is too high\\n    error ClearingHouse_ExcessiveInsuranceRatio();\\n\\n    /// @notice Emitted when a user attempts to extend their position with amount equal to 0\\n    error ClearingHouse_ExtendPositionZeroAmount();\\n\\n    /// @notice Emitted when there is not enough margin to extend to the proposed position amount\\n    error ClearingHouse_ExtendPositionInsufficientMargin();\\n\\n    /// @notice Emitted when a user attempts to reduce their position with amount equal to 0\\n    error ClearingHouse_ReducePositionZeroAmount();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function vault() external view returns (IVault);\\n\\n    function insurance() external view returns (IInsurance);\\n\\n    function perpetuals(uint256 idx) external view returns (IPerpetual);\\n\\n    function getNumMarkets() external view returns (uint256);\\n\\n    function getOwner() external view returns (address);\\n\\n    function minMargin() external view returns (int256);\\n\\n    function minMarginAtCreation() external view returns (int256);\\n\\n    function liquidationReward() external view returns (uint256);\\n\\n    function insuranceRatio() external view returns (uint256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function allowListPerpetual(IPerpetual perp) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function sellDust(\\n        uint256 idx,\\n        uint256 proposedAmount,\\n        uint256 minAmount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function setMinMargin(int256 newMinMargin) external;\\n\\n    function setMinMarginAtCreation(int256 newMinMarginAtCreation) external;\\n\\n    function setLiquidationReward(uint256 newLiquidationReward) external;\\n\\n    function setInsuranceRatio(uint256 newInsuranceRatio) external;\\n\\n    function deposit(\\n        uint256 idx,\\n        uint256 amount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function withdraw(\\n        uint256 idx,\\n        uint256 amount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function extendPositionWithCollateral(\\n        uint256 idx,\\n        uint256 collateralAmount,\\n        IERC20Metadata token,\\n        uint256 positionAmount,\\n        LibPerpetual.Side direction,\\n        uint256 minAmount\\n    ) external;\\n\\n    function extendPosition(\\n        uint256 idx,\\n        uint256 amount,\\n        LibPerpetual.Side direction,\\n        uint256 minAmount\\n    ) external;\\n\\n    function closePositionWithdrawCollateral(\\n        uint256 idx,\\n        uint256 proposedAmount,\\n        uint256 minAmount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function reducePosition(\\n        uint256 idx,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external;\\n\\n    function liquidate(\\n        uint256 idx,\\n        address liquidatee,\\n        uint256 proposedAmount,\\n        bool isTrader\\n    ) external;\\n\\n    function provideLiquidity(\\n        uint256 idx,\\n        uint256 amount,\\n        uint256 minLpAmount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function removeLiquidity(\\n        uint256 idx,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdbc2463924f06b75ec5fa31e0332db3117bdee135ef56db7d98a8ab34d7884d4\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IClearingHouseViewer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\nimport {IPerpetual} from \\\"./IPerpetual.sol\\\";\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\n\\n// libraries\\nimport {LibPerpetual} from \\\"../lib/LibPerpetual.sol\\\";\\n\\ninterface IClearingHouseViewer {\\n    /* ****************** */\\n    /*    Errors          */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error ClearingHouseViewer_ZeroAddressConstructor(uint8 paramIndex);\\n\\n    /* ****************** */\\n    /*    Global Getters  */\\n    /* ****************** */\\n\\n    function getExpectedVBaseAmount(uint256 idx, uint256 vQuoteAmountToSpend) external view returns (uint256);\\n\\n    function getExpectedVQuoteAmount(uint256 idx, uint256 vBaseAmountToSpend) external view returns (uint256);\\n\\n    function marketPrice(uint256 idx) external view returns (uint256);\\n\\n    function indexPrice(uint256 idx) external view returns (int256);\\n\\n    function getGlobalPosition(uint256 idx) external view returns (LibPerpetual.GlobalPosition memory);\\n\\n    function getBaseDust(uint256 idx) external view returns (uint256);\\n\\n    function getMarket(uint256 idx) external view returns (ICryptoSwap);\\n\\n    function getInsuranceFee(uint256 idx) external view returns (int256);\\n\\n    /* ****************** */\\n    /*    User Getters    */\\n    /* ****************** */\\n\\n    function marginIsValid(\\n        uint256 idx,\\n        address account,\\n        int256 ratio,\\n        bool isTrader\\n    ) external view returns (bool);\\n\\n    function marginRatio(\\n        uint256 idx,\\n        address account,\\n        bool isTrader\\n    ) external view returns (int256);\\n\\n    function getTraderFundingPayments(uint256 idx, address account) external view returns (int256);\\n\\n    function getTraderUnrealizedPnL(uint256 idx, address account) external view returns (int256);\\n\\n    function getTraderReserveValue(uint256 idx, address account) external view returns (int256);\\n\\n    function getTraderPosition(uint256 idx, address account) external view returns (LibPerpetual.TraderPosition memory);\\n\\n    function getTraderBalance(\\n        address user,\\n        uint256 marketIdx,\\n        uint256 tokenIdx\\n    ) external view returns (int256);\\n\\n    function getLpBalance(\\n        address user,\\n        uint256 marketIdx,\\n        uint256 tokenIdx\\n    ) external view returns (int256);\\n\\n    function getLpFundingPayments(uint256 idx, address account) external view returns (int256);\\n\\n    function getLpUnrealizedPnL(uint256 idx, address account) external view returns (int256);\\n\\n    function getLpReserveValue(uint256 idx, address account) external view returns (int256);\\n\\n    function getLpPositionAfterWithdrawal(uint256 idx, address account)\\n        external\\n        view\\n        returns (LibPerpetual.TraderPosition memory);\\n\\n    function getLpPosition(uint256 idx, address account)\\n        external\\n        view\\n        returns (LibPerpetual.LiquidityProviderPosition memory);\\n\\n    function getProposedAmount(\\n        uint256 idx,\\n        address trader,\\n        uint256 iter\\n    ) external view returns (uint256 amountIn, uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x30111cd3804f4d417fd4df4ab9e79124315426b8a0450fd7840930c064749629\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ICryptoSwap.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n/// @dev Contract https://github.com/curvefi/curve-crypto-contract/blob/master/deployment-logs/2021-11-01.%20EURS%20on%20mainnet/CryptoSwap.vy\\ninterface ICryptoSwap {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function price_oracle() external view returns (uint256);\\n\\n    function mid_fee() external view returns (uint256);\\n\\n    function out_fee() external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    // Swap token i to j with amount dx and min amount min_dy\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external returns (uint256); // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external; // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\\n\\n    function last_prices() external view returns (uint256);\\n\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x64c144f037b8ba367ece87d0605374be7adbf93c186d39c220aec454594870a1\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\ninterface IInsurance {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Insurance_ZeroAddressConstructor(uint8 paramIndex);\\n\\n    /// @notice Emitted when the sender is not the vault address\\n    error Insurance_SenderNotVault();\\n\\n    /// @notice Emitted when the sender is not the clearingHouse address\\n    error Insurance_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when the balance of the vault is less than the amount to be settled\\n    error Insurance_InsufficientBalance();\\n\\n    /// @notice Emitted when locked insurance falls below insurance ratio\\n    error Insurance_InsufficientInsurance();\\n\\n    /// @notice Emitted when the proposed clearingHouse address is equal to the zero address\\n    error Insurance_ClearingHouseZeroAddress();\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when a new ClearingHouse is connected to the issuer\\n    /// @param newClearingHouse New ClearingHouse contract address\\n    event ClearingHouseChanged(IClearingHouse newClearingHouse);\\n\\n    /// @notice Emitted when (exceeding) insurance reserves are withdrawn by governance\\n    /// @param amount Amount of insurance reserves withdrawn. 18 decimals\\n    event InsuranceRemoved(uint256 amount);\\n\\n    /// @notice Emitted when a bail out is asked for by the Vault\\n    /// @param amount Amount of insurance reserves withdrawn. 18 decimals\\n    event SettleDebt(uint256 amount);\\n\\n    /// @notice Emitted when a bail out cant be fully served\\n    /// @param amount Amount of bad debt remaining. 18 decimals\\n    event SystemDebtGenerated(uint256 amount);\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function settleDebt(uint256 amount) external;\\n\\n    function removeInsurance(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x755bb2b93aab1d10f443668ffc8e5bfd6898130842d7f5a9a76c929d69a7c8db\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/// @notice Oracle interface created to ease oracle contract switch\\ninterface IOracle {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the latest round is incomplete\\n    error Oracle_IncompleteRound();\\n\\n    /// @notice Emitted when the latest round's price is invalid\\n    error Oracle_IntegerConversion();\\n\\n    /// @notice Emitted when the proposed asset address is equal to the zero address\\n    error Oracle_AssetZeroAddress();\\n\\n    /// @notice Emitted when the proposed aggregator address is equal to the zero address\\n    error Oracle_AggregatorZeroAddress();\\n\\n    /// @notice Emitted when owner tries to set fixed price to an unsupported asset\\n    error Oracle_UnsupportedAsset();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function getPrice(address asset) external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function setOracle(address asset, AggregatorV3Interface aggregator) external;\\n\\n    function setFixedPrice(address asset, int256 fixedPrice) external;\\n}\\n\",\"keccak256\":\"0xaa06ea6ca832e0b236b11751c4e1a34b1d6193967a3b927a32dac56d21694184\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPerpetual.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IVBase} from \\\"./IVBase.sol\\\";\\nimport {IVQuote} from \\\"./IVQuote.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\n// libraries\\nimport {LibPerpetual} from \\\"../lib/LibPerpetual.sol\\\";\\n\\ninterface IPerpetual {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Perpetual_ZeroAddressConstructor(uint256 paramIndex);\\n\\n    /// @notice Emitted when the constructor fails to give approval of a virtual token to the market\\n    error Perpetual_VirtualTokenApprovalConstructor(uint256 tokenIndex);\\n\\n    /// @notice Emitted when market mid fee does not equal out fee\\n    error Perpetual_MarketEqualFees();\\n\\n    /// @notice Emitted when the sender is not the clearing house\\n    error Perpetual_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when the sender is not the clearing house owner\\n    error Perpetual_SenderNotClearingHouseOwner();\\n\\n    /// @notice Emitted when the user attempts to reduce their position using extendPosition\\n    error Perpetual_AttemptReducePosition();\\n\\n    /// @notice Emitted when the price impact of a position is too high\\n    error Perpetual_ExcessivePriceImpact();\\n\\n    /// @notice Emitted when the user does not have an open position\\n    error Perpetual_NoOpenPosition();\\n\\n    /// @notice Emitted when the user attempts to withdraw more liquidity than they have deposited\\n    error Perpetual_LPWithdrawExceedsBalance();\\n\\n    /// @notice Emitted when the proposed insurance fee is insufficient\\n    error Perpetual_InsuranceFeeInsufficient(int256 fee);\\n\\n    /// @notice Emitted when the proposed insurance fee is excessive\\n    error Perpetual_InsuranceFeeExcessive(int256 fee);\\n\\n    /// @notice Emitted when the proposed trading fee is insufficient\\n    error Perpetual_TradingFeeInsufficient(int256 fee);\\n\\n    /// @notice Emitted when the proposed trading fee is excessive\\n    error Perpetual_TradingFeeExcessive(int256 fee);\\n\\n    /// @notice Emitted when a token balance of the market is lte 0\\n    error Perpetual_MarketBalanceTooLow(uint256 tokenIndex);\\n\\n    /// @notice Emitted when the liquidity provider has an open position\\n    error Perpetual_LPOpenPosition();\\n\\n    /// @notice Emitted when proposed amount is greater than position size\\n    error Perpetual_ProposedAmountExceedsPositionSize();\\n\\n    /// @notice Emitted when proposed amount is greater than maxVQuoteAmount\\n    error Perpetual_ProposedAmountExceedsMaxMarketPrice();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function market() external view returns (ICryptoSwap);\\n\\n    function vBase() external view returns (IVBase);\\n\\n    function vQuote() external view returns (IVQuote);\\n\\n    function clearingHouse() external view returns (IClearingHouse);\\n\\n    function getTraderPosition(address account) external view returns (LibPerpetual.TraderPosition memory);\\n\\n    function getLpPositionAfterWithdrawal(address account) external view returns (LibPerpetual.TraderPosition memory);\\n\\n    function getLpPosition(address account) external view returns (LibPerpetual.LiquidityProviderPosition memory);\\n\\n    function getGlobalPosition() external view returns (LibPerpetual.GlobalPosition memory);\\n\\n    function getInsuranceFee() external view returns (int256);\\n\\n    function getTradingFee() external view returns (int256);\\n\\n    function getTraderUnrealizedPnL(address account) external view returns (int256);\\n\\n    function getTraderFundingPayments(address account) external view returns (int256);\\n\\n    function getLpUnrealizedPnL(address account) external view returns (int256);\\n\\n    function getLpFundingPayments(address account) external view returns (int256);\\n\\n    function getLpTradingFees(address account) external view returns (uint256);\\n\\n    function marketPrice() external view returns (uint256);\\n\\n    function indexPrice() external view returns (int256);\\n\\n    function getTotalLiquidityProvided() external view returns (uint256);\\n\\n    function getOracleTwap() external view returns (int256);\\n\\n    function getMarketTwap() external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function extendPosition(\\n        address account,\\n        uint256 amount,\\n        LibPerpetual.Side direction,\\n        uint256 minAmount\\n    )\\n        external\\n        returns (\\n            int256 openNotional,\\n            int256 positionSize,\\n            int256 tradingFees\\n        );\\n\\n    function reducePosition(\\n        address account,\\n        uint256 amount,\\n        uint256 minAmount\\n    )\\n        external\\n        returns (\\n            int256 vQuoteProceeds,\\n            int256 vBaseAmount,\\n            int256 profit\\n        );\\n\\n    function settleTrader(address account) external returns (int256 fundingPayments);\\n\\n    function provideLiquidity(\\n        address account,\\n        uint256 wadAmount,\\n        uint256 minLpAmount\\n    ) external returns (int256 tradingFees);\\n\\n    function removeLiquidity(\\n        address account,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external returns (int256 profit, uint256 reductionRatio);\\n\\n    function settleLp(address account) external returns (int256 fundingPayments);\\n\\n    function setInsuranceFee(int256 newInsuranceFee) external;\\n\\n    function setTradingFee(int256 newInsuranceFee) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xec1f2ab112769a8f371e96d4108dcffae37f7970020c9b73b933a8dd2fbd60fc\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IVirtualToken} from \\\"../interfaces/IVirtualToken.sol\\\";\\n\\ninterface IVBase is IVirtualToken {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the proposed aggregators decimals are less than PRECISION\\n    error VBase_InsufficientPrecision();\\n\\n    /// @notice Emitted when the latest round is incomplete\\n    error VBase_IncompleteRound();\\n\\n    /// @notice Emitted when the latest round's price is invalid\\n    error VBase_IntegerConversion();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function getIndexPrice() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x93fe2a1b39f1fa7fec300893ce78ad0efb540e8ac8c394a1ab6e8882428472ee\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVQuote.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IVirtualToken} from \\\"../interfaces/IVirtualToken.sol\\\";\\n\\ninterface IVQuote is IVirtualToken {}\\n\",\"keccak256\":\"0xf3c21b1973b431c9e0fd63e60544be3e5a7e51bfb4d6f8b4dbac26f38dc3f17b\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {IOracle} from \\\"./IOracle.sol\\\";\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\n// @dev: deposit uint and withdraw int\\n// @author: The interface used in other contracts\\ninterface IVault {\\n    struct Collateral {\\n        IERC20Metadata asset;\\n        uint256 weight;\\n        uint8 decimals;\\n    }\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Vault_ZeroAddressConstructor(uint8 paramIndex);\\n\\n    /// @notice Emitted when the decimals of the proposed reserve token are gt 18\\n    error Vault_ExcessiveDecimalsConstructor();\\n\\n    /// @notice Emitted when user tries to withdraw collateral while having a UA debt\\n    error Vault_UADebt();\\n\\n    /// @notice Emitted when the sender is not the clearing house\\n    error Vault_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when a user attempts to use a token which is not whitelisted as collateral\\n    error Vault_UnsupportedCollateral();\\n\\n    /// @notice Emitted when owner tries to whitelist a collateral already whitelisted\\n    error Vault_CollateralAlreadyWhiteListed();\\n\\n    /// @notice Emitted when a user attempts to withdraw with a reduction ratio above 1e18\\n    error Vault_WithdrawReductionRatioTooHigh();\\n\\n    /// @notice Emitted when a user attempts to withdraw more than their balance\\n    error Vault_WithdrawExcessiveAmount();\\n\\n    /// @notice Emitted when a user attempts to withdraw an amount that reduces their balance below mMIN_DEPOSIT_AMOUNT\\n    error Vault_WithdrawBalanceBelowMin();\\n\\n    /// @notice Emitted when the proposed clearingHouse address is equal to the zero address\\n    error Vault_ClearingHouseZeroAddress();\\n\\n    /// @notice Emitted when the proposed insurance address is equal to the zero address\\n    error Vault_InsuranceZeroAddress();\\n\\n    /// @notice Emitted when the proposed oracle address is equal to the zero address\\n    error Vault_OracleZeroAddress();\\n\\n    /// @notice Emitted when the proposed collateral weight is under the limit\\n    error Vault_InsufficientCollateralWeight();\\n\\n    /// @notice Emitted when the proposed collateral weight is above the limit\\n    error Vault_ExcessiveCollateralWeight();\\n\\n    /// @notice Emitted when a user attempts to withdraw more collateral than available in vault\\n    error Vault_InsufficientBalance();\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when collateral is deposited into the vault\\n    /// @param idx Index of the perpetual market\\n    /// @param user User who deposited collateral\\n    /// @param asset Token to be used for the collateral\\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\\n    event Deposit(uint256 indexed idx, address indexed user, address indexed asset, uint256 amount);\\n\\n    /// @notice Emitted when collateral is withdrawn from the vault\\n    /// @param idx Index of the perpetual market\\n    /// @param user User who deposited collateral\\n    /// @param asset Token to be used for the collateral\\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\\n    event Withdraw(uint256 indexed idx, address indexed user, address indexed asset, uint256 amount);\\n\\n    /// @notice Emitted when bad debt is settled for by the insurance reserve\\n    /// @param idx Index of the perpetual market\\n    /// @param beneficiary Beneficiary of the insurance payment\\n    /// @param amount Amount of bad insurance requested\\n    event TraderBadDebtGenerated(uint256 idx, address beneficiary, uint256 amount);\\n\\n    /// @notice Emitted when a new ClearingHouse is connected to the vault\\n    /// @param newClearingHouse New ClearingHouse contract address\\n    event ClearingHouseChanged(IClearingHouse newClearingHouse);\\n\\n    /// @notice Emitted when a new Insurance is connected to the vault\\n    /// @param newInsurance New Insurance contract address\\n    event InsuranceChanged(IInsurance newInsurance);\\n\\n    /// @notice Emitted when a new Oracle is connected to the vault\\n    /// @param newOracle New Oracle contract address\\n    event OracleChanged(IOracle newOracle);\\n\\n    /// @notice Emitted when a new Oracle is connected to the vault\\n    /// @param asset Asset added as collateral\\n    /// @param weight Volatility measure of the asset\\n    event CollateralAdded(IERC20Metadata asset, uint256 weight);\\n\\n    /// @notice Emitted when a new Oracle is connected to the vault\\n    /// @param asset Asset added as collateral\\n    /// @param newWeight New volatility measure for the collateral\\n    event CollateralWeightChanged(IERC20Metadata asset, uint256 newWeight);\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n    function insurance() external view returns (IInsurance);\\n\\n    function oracle() external view returns (IOracle);\\n\\n    function clearingHouse() external view returns (IClearingHouse);\\n\\n    function getTotalValueLocked() external view returns (uint256);\\n\\n    function getBadDebt() external view returns (uint256);\\n\\n    function getWhiteListedCollaterals() external view returns (Collateral[] memory);\\n\\n    function getTraderReserveValue(uint256 marketIdx, address trader) external view returns (int256);\\n\\n    function getLpReserveValue(uint256 marketIdx, address lp) external view returns (int256);\\n\\n    function getLpBalance(\\n        address user,\\n        uint256 marketIdx,\\n        uint256 tokenIdx\\n    ) external view returns (int256);\\n\\n    function getTraderBalance(\\n        address user,\\n        uint256 marketIdx,\\n        uint256 tokenIdx\\n    ) external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function deposit(\\n        uint256 idx,\\n        address user,\\n        uint256 amount,\\n        IERC20Metadata token,\\n        bool isTrader\\n    ) external returns (int256 amountUSDValue);\\n\\n    function settlePnL(\\n        uint256 marketIdx,\\n        address user,\\n        int256 amount,\\n        bool isTrader\\n    ) external;\\n\\n    function withdraw(\\n        uint256 idx,\\n        address user,\\n        uint256 amount,\\n        IERC20Metadata token,\\n        bool isTrader\\n    ) external;\\n\\n    function withdrawPartial(\\n        uint256 idx,\\n        address user,\\n        uint256 reductionRatio,\\n        bool isTrader\\n    ) external;\\n\\n    function withdrawAll(\\n        uint256 idx,\\n        address user,\\n        IERC20Metadata withdrawToken,\\n        bool isTrader\\n    ) external;\\n\\n    function settleLiquidationOnCollaterals(\\n        address liquidator,\\n        address liquidatee,\\n        uint256 marketIdx,\\n        bool isTrader\\n    ) external;\\n\\n    function transferUa(address user, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x2adfd49ef5b4888a307e7396875c83414cd0175c0134df6b859d6c4e2dfe9051\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVirtualToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IVirtualToken is IERC20Metadata {\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0dda9dc3d416b9aaeb6e93915b33c2b358b4ee5b9e477fa3b7ff9be8198e95ec\",\"license\":\"AGPL-3.0\"},\"contracts/lib/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// libraries\\nimport {PRBMathUD60x18} from \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\nimport {PRBMathSD59x18} from \\\"prb-math/contracts/PRBMathSD59x18.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/*\\n * To be used if `b` decimals make `b` larger than what it would be otherwise.\\n * Especially useful for fixed point numbers, i.e. a way to represent decimal\\n * values without using decimals. E.g. 25e2 with 3 decimals represents 2.5%\\n *\\n * In our case, we get exchange rates with a 18 decimal precision\\n * (Solidity doesn't support decimal values natively).\\n * So if we have a EUR positions and want to get the equivalent USD amount\\n * we have to do: EUR_position * EUR_USD / 1e18 else the value would be way too high.\\n * To move from USD to EUR: (USD_position * 1e18) / EUR_USD else the value would\\n * be way too low.\\n *\\n * In essence,\\n * wadMul: a.mul(b).div(WAY)\\n * wadDiv: a.mul(WAY).div(b)\\n * where `WAY` represents the number of decimals\\n */\\nlibrary LibMath {\\n    // safe casting\\n    function toInt256(uint256 x) internal pure returns (int256) {\\n        return SafeCast.toInt256(x);\\n    }\\n\\n    function toUint256(int256 x) internal pure returns (uint256) {\\n        return SafeCast.toUint256(x);\\n    }\\n\\n    // absolute value\\n    function abs(int256 x) internal pure returns (int256) {\\n        return PRBMathSD59x18.abs(x);\\n    }\\n\\n    // int256: wad division / multiplication\\n    function wadDiv(int256 x, int256 y) internal pure returns (int256) {\\n        return PRBMathSD59x18.div(x, y);\\n    }\\n\\n    function wadMul(int256 x, int256 y) internal pure returns (int256) {\\n        return PRBMathSD59x18.mul(x, y);\\n    }\\n\\n    // uint256: wad division / multiplication\\n    function wadMul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return PRBMathUD60x18.mul(x, y);\\n    }\\n\\n    function wadDiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return PRBMathUD60x18.div(x, y);\\n    }\\n}\\n\",\"keccak256\":\"0x60393d01bf4cc02470b3f23cddc21c88389484c9ee0563e7ec22e9585e33f2ef\",\"license\":\"AGPL-3.0\"},\"contracts/lib/LibPerpetual.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.4;\\n\\n// libraries\\nimport {LibMath} from \\\"./LibMath.sol\\\";\\n\\nlibrary LibPerpetual {\\n    using LibMath for int256;\\n    using LibMath for uint256;\\n\\n    enum Side {\\n        // long position\\n        Long,\\n        // short position\\n        Short\\n    }\\n\\n    struct LiquidityProviderPosition {\\n        // quote assets or liabilities\\n        int256 openNotional;\\n        // base assets or liabilities\\n        int256 positionSize;\\n        // user cumulative funding rate (updated when open/close position)\\n        int256 cumFundingRate;\\n        // lp token owned (is zero for traders)\\n        uint256 liquidityBalance;\\n        /* fees state */\\n\\n        // total percentage return of liquidity providers index\\n        uint256 totalTradingFeesGrowth;\\n        // total base fees paid in cryptoswap pool\\n        uint256 totalBaseFeesGrowth;\\n        // total quote fees paid in cryptoswap pool\\n        uint256 totalQuoteFeesGrowth;\\n    }\\n\\n    struct TraderPosition {\\n        // quote assets or liabilities\\n        int256 openNotional;\\n        // base assets or liabilities\\n        int256 positionSize;\\n        // user cumulative funding rate (updated when open/close position)\\n        int256 cumFundingRate;\\n    }\\n\\n    struct GlobalPosition {\\n        /* twap state */\\n\\n        // timestamp of last trade\\n        uint128 timeOfLastTrade;\\n        // timestamp of last TWAP update\\n        uint128 timeOfLastTwapUpdate;\\n        // global cumulative funding rate (updated every trade)\\n        int256 cumFundingRate;\\n        // market price at the start of the block\\n        int256 blockStartPrice;\\n        /* fees state */\\n\\n        // total percentage return of liquidity providers index\\n        uint256 totalTradingFeesGrowth;\\n        // total liquidity provided (in vQuote)\\n        uint256 totalLiquidityProvided;\\n        // total base fees paid in cryptoswap pool\\n        uint256 totalBaseFeesGrowth;\\n        // total quote fees paid in cryptoswap pool\\n        uint256 totalQuoteFeesGrowth;\\n    }\\n}\\n\",\"keccak256\":\"0x6ab4f05a6c671effd6cbd4d865aa8049cda387106af96b7b43a50636c2634b92\",\"license\":\"AGPL-3.0\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62cbabae4910e168e99b9c2c3e3b5c9c7ad5e7abd961dcc63b7ea3d83d8ea87e\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathSD59x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\n\\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_WHOLE_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\n\\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_WHOLE_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Calculate the absolute value of x.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than MIN_SD59x18.\\n    ///\\n    /// @param x The number to calculate the absolute value for.\\n    /// @param result The absolute value of x.\\n    function abs(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x == MIN_SD59x18) {\\n                revert PRBMathSD59x18__AbsInputTooSmall();\\n            }\\n            result = x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            int256 sum = (x >> 1) + (y >> 1);\\n            if (sum < 0) {\\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\\n                // right rounds down to infinity.\\n                assembly {\\n                    result := add(sum, and(or(x, y), 1))\\n                }\\n            } else {\\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\\n                // remainder gets truncated twice.\\n                result = sum + (x & y & 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function ceil(int256 x) internal pure returns (int256 result) {\\n        if (x > MAX_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__CeilOverflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x > 0) {\\n                    result += SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    /// - None of the inputs can be MIN_SD59x18.\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within int256.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    ///\\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__DivInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x and y.\\n        uint256 ax;\\n        uint256 ay;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n        }\\n\\n        // Compute the absolute value of (x*SCALE)\\u00f7y. The result must fit within int256.\\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__DivOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x and y.\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n\\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\\n        // should be positive. Otherwise, it should be negative.\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (int256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\".\\n    /// - For any x less than -41.446531673892822322, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59.794705707972522261.\\n        if (x < -41_446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathSD59x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59.794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^(-x) = 1/2^x.\\n        if (x < 0) {\\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n            if (x < -59_794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked {\\n                result = 1e36 / exp2(-x);\\n            }\\n        } else {\\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n            if (x >= 192e18) {\\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\\n            }\\n\\n            unchecked {\\n                // Convert x to the 192.64-bit fixed-point format.\\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\\n                result = int256(PRBMath.exp2(x192x64));\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function floor(int256 x) internal pure returns (int256 result) {\\n        if (x < MIN_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__FloorUnderflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x < 0) {\\n                    result -= SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\\n    /// of the radix point for negative numbers.\\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\\n    function frac(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x % SCALE;\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\\n    function fromInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < MIN_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntUnderflow(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\\n    /// - x * y cannot be negative.\\n    ///\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            int256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathSD59x18__GmOverflow(x, y);\\n            }\\n\\n            // The product cannot be negative.\\n            if (xy < 0) {\\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = int256(PRBMath.sqrt(uint256(xy)));\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\\n    function inv(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\\n    function ln(int256 x) internal pure returns (int256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 195205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\\n    function log10(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            default {\\n                result := MAX_SD59x18\\n            }\\n        }\\n\\n        if (result == MAX_SD59x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n                assembly {\\n                    x := div(1000000000000000000000000000000000000, x)\\n                }\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\\n\\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n            result = int256(n) * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            int256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result * sign;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result *= sign;\\n        }\\n    }\\n\\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\\n    /// fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers and employs constant folding, i.e. the denominator is\\n    /// always 1e18.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - None of the inputs can be MIN_SD59x18\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    ///\\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__MulInputTooSmall();\\n        }\\n\\n        unchecked {\\n            uint256 ax;\\n            uint256 ay;\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n\\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\\n            if (rAbs > uint256(MAX_SD59x18)) {\\n                revert PRBMathSD59x18__MulOverflow(rAbs);\\n            }\\n\\n            uint256 sx;\\n            uint256 sy;\\n            assembly {\\n                sx := sgt(x, sub(0, 1))\\n                sy := sgt(y, sub(0, 1))\\n            }\\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n        }\\n    }\\n\\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\\n    function pi() internal pure returns (int256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - z cannot be zero.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : int256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"abs\\\" and \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\\n        uint256 xAbs = uint256(abs(x));\\n\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        uint256 yAux = y;\\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (yAux & 1 > 0) {\\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\\n            }\\n        }\\n\\n        // The result must fit within the 59.18-decimal fixed-point representation.\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\\n        }\\n\\n        // Is the base negative and the exponent an odd number?\\n        bool isNegative = x < 0 && y & 1 == 1;\\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\\n    function scale() internal pure returns (int256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x cannot be negative.\\n    /// - x must be less than MAX_SD59x18 / SCALE.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as a signed 59.18-decimal fixed-point .\\n    function sqrt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < 0) {\\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\\n        }\\n    }\\n\\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1886d687eace717c05b7dcc20e43a088df0e549df86b453c2222961b520308f0\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162001f6a38038062001f6a83398101604081905261003191610084565b6001600160a01b03811661005f57604051632c9334bd60e11b81526000600482015260240160405180910390fd5b600080546001600160a01b0319166001600160a01b03929092169190911790556100b2565b600060208284031215610095578081fd5b81516001600160a01b03811681146100ab578182fd5b9392505050565b611ea880620000c26000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806359e39aab116100c3578063d25540ee1161007c578063d25540ee146103b6578063d67f9326146103c9578063eb44fdd3146103f1578063ed2633b514610404578063f5c7b13b14610417578063f82a61ec1461042a57600080fd5b806359e39aab146102b457806366e910dd146102e95780636ccc242f146102fc57806384c76b6a1461030f57806387a9540114610322578063cc2923c51461033557600080fd5b806326b59eae1161011557806326b59eae146102325780632e15ce52146102455780633adec5a7146102585780634af6d8f21461026b57806351aa4c9d1461027e578063549c0cff1461029157600080fd5b80630af96800146101525780630cd4ff3a146101825780631fb4ef67146101a35780631fdbc3c8146101b657806324012fcd1461021f575b600080fd5b600054610165906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610195610190366004611c6c565b61043d565b604051908152602001610179565b6101956101b1366004611c54565b61053f565b6101c96101c4366004611c6c565b61062c565b6040516101799190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b61019561022d366004611c6c565b610763565b610195610240366004611d56565b610810565b610195610253366004611a4d565b61093a565b610195610266366004611c54565b610a55565b610195610279366004611c6c565b610b0a565b61019561028c366004611d56565b610bb7565b6102a461029f366004611cd8565b610ce1565b6040519015158152602001610179565b6102c76102c2366004611c6c565b610cfa565b6040805182518152602080840151908201529181015190820152606001610179565b6102c76102f7366004611c6c565b610e16565b61019561030a366004611c6c565b610ee6565b61019561031d366004611a4d565b610f93565b610195610330366004611c6c565b611058565b610348610343366004611c54565b611116565b60405161017991906000610100820190506001600160801b038084511683528060208501511660208401525060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b6101956103c4366004611c6c565b61125d565b6103dc6103d7366004611d1f565b61131b565b60408051928352602083019190915201610179565b6101656103ff366004611c54565b61143d565b610195610412366004611c9b565b61152a565b610195610425366004611c54565b6115e4565b610195610438366004611c54565b611699565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa9060240160206040518083038186803b15801561048257600080fd5b505afa158015610496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ba9190611a81565b604051634074327f60e11b81526001600160a01b03848116600483015291909116906380e864fe906024015b60206040518083038186803b1580156104fe57600080fd5b505afa158015610512573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105369190611a9d565b90505b92915050565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa9060240160206040518083038186803b15801561058457600080fd5b505afa158015610598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bc9190611a81565b6001600160a01b03166310bace8c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f457600080fd5b505afa158015610608573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105399190611a9d565b61066c6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa9060240160206040518083038186803b1580156106b057600080fd5b505afa1580156106c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e89190611a81565b60405163cefc499360e01b81526001600160a01b038481166004830152919091169063cefc49939060240160e06040518083038186803b15801561072b57600080fd5b505afa15801561073f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105369190611b5e565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa9060240160206040518083038186803b1580156107a857600080fd5b505afa1580156107bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e09190611a81565b60405163aa407ae160e01b81526001600160a01b038481166004830152919091169063aa407ae1906024016104e6565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa9060240160206040518083038186803b15801561085557600080fd5b505afa158015610869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088d9190611a81565b6001600160a01b03166380f556056040518163ffffffff1660e01b815260040160206040518083038186803b1580156108c557600080fd5b505afa1580156108d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fd9190611a81565b60405163556d6e9f60e01b81526000600482015260016024820152604481018490526001600160a01b03919091169063556d6e9f906064016104e6565b60008060009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561098957600080fd5b505afa15801561099d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c19190611a81565b60405163170ae72960e11b81526001600160a01b03868116600483015260248201869052604482018590529190911690632e15ce52906064015b60206040518083038186803b158015610a1357600080fd5b505afa158015610a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4b9190611a9d565b90505b9392505050565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa9060240160206040518083038186803b158015610a9a57600080fd5b505afa158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad29190611a81565b6001600160a01b03166345a153886040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f457600080fd5b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa9060240160206040518083038186803b158015610b4f57600080fd5b505afa158015610b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b879190611a81565b604051632d3eb79b60e01b81526001600160a01b0384811660048301529190911690632d3eb79b906024016104e6565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa9060240160206040518083038186803b158015610bfc57600080fd5b505afa158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c349190611a81565b6001600160a01b03166380f556056040518163ffffffff1660e01b815260040160206040518083038186803b158015610c6c57600080fd5b505afa158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca49190611a81565b60405163556d6e9f60e01b81526001600482015260006024820152604481018490526001600160a01b03919091169063556d6e9f906064016104e6565b600082610cef86868561152a565b121595945050505050565b610d1e60405180606001604052806000815260200160008152602001600081525090565b600054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa9060240160206040518083038186803b158015610d6257600080fd5b505afa158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9a9190611a81565b6040516306387ded60e51b81526001600160a01b038481166004830152919091169063c70fbda0906024015b60606040518083038186803b158015610dde57600080fd5b505afa158015610df2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105369190611bed565b610e3a60405180606001604052806000815260200160008152602001600081525090565b600054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa9060240160206040518083038186803b158015610e7e57600080fd5b505afa158015610e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb69190611a81565b604051630f272c5b60e31b81526001600160a01b038481166004830152919091169063793962d890602401610dc6565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa9060240160206040518083038186803b158015610f2b57600080fd5b505afa158015610f3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f639190611a81565b604051633b6234db60e11b81526001600160a01b03848116600483015291909116906376c469b6906024016104e6565b60008060009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe257600080fd5b505afa158015610ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101a9190611a81565b604051634263b5b560e11b81526001600160a01b038681166004830152602482018690526044820185905291909116906384c76b6a906064016109fb565b60008060009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110a757600080fd5b505afa1580156110bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110df9190611a81565b6040516387a9540160e01b8152600481018590526001600160a01b03848116602483015291909116906387a95401906044016104e6565b61117060405180610100016040528060006001600160801b0316815260200160006001600160801b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa9060240160206040518083038186803b1580156111b457600080fd5b505afa1580156111c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ec9190611a81565b6001600160a01b0316639027b59e6040518163ffffffff1660e01b81526004016101006040518083038186803b15801561122557600080fd5b505afa158015611239573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105399190611ab5565b60008060009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112ac57600080fd5b505afa1580156112c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e49190611a81565b60405163692aa07760e11b8152600481018590526001600160a01b038481166024830152919091169063d25540ee906044016104e6565b600080600061132a8686610e16565b602001519050600081131561135557611342816116ba565b925061134e8684610bb7565b9150611434565b600061136861136383611e2a565b6116ba565b905061137d61137688610a55565b82906116c5565b93506000600a61138e86600d611df0565b6113989190611dd0565b90506000600a6113a9876007611df0565b6113b39190611dd0565b905060005b878110156114175760026113cc8484611db8565b6113d69190611dd0565b96506113e28a88610810565b9550838614156113f157611417565b8386101561140157869150611405565b8692505b8061140f81611e0f565b9150506113b8565b50828510156114305781955061142d8987610810565b94505b5050505b50935093915050565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa9060240160206040518083038186803b15801561148257600080fd5b505afa158015611496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ba9190611a81565b6001600160a01b03166380f556056040518163ffffffff1660e01b815260040160206040518083038186803b1580156114f257600080fd5b505afa158015611506573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105399190611a81565b600080826115425761153c8585610cfa565b5161154e565b61154c8585610e16565b515b90508061156657670de0b6b3a7640000915050610a4e565b60008361157c57611577868661125d565b611586565b6115868686611058565b905060008461159e57611599878761043d565b6115a8565b6115a88787610ee6565b90506000856115c0576115bb8888610763565b6115ca565b6115ca8888610b0a565b90506115d8838383876116d1565b98975050505050505050565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa9060240160206040518083038186803b15801561162957600080fd5b505afa15801561163d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116619190611a81565b6001600160a01b031663a5f1ac9a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f457600080fd5b60008054610539906116b59084906001600160a01b0316610e16565b602001515b600061053982611703565b6000610536838361175e565b60006116fa6116df8361176a565b846116ea8789611d77565b6116f49190611d77565b90611775565b95945050505050565b60008082121561175a5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064015b60405180910390fd5b5090565b60006105368383611781565b600061053982611843565b6000610536838361187f565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106117c55760405163698d9a0160e11b815260048101829052602401611751565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff8111826117ff5780670de0b6b3a7640000850401945050505050610539565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6000600160ff1b82141561186a57604051631d0742e360e21b815260040160405180910390fd5b600082126118785781610539565b5060000390565b6000600160ff1b8314806118965750600160ff1b82145b156118b45760405163b3c754a360e01b815260040160405180910390fd5b600080600085126118c557846118ca565b846000035b9150600084126118da57836118df565b836000035b905060006118f683670de0b6b3a764000084611945565b90506001600160ff1b0381111561192357604051637cb4bef560e01b815260048101829052602401611751565b60001980871390861380821860011461193c57826115d8565b6115d883611e2a565b60008080600019858709858702925082811083820303915050806000141561198e5783828161198457634e487b7160e01b600052601260045260246000fd5b0492505050610a4e565b8381106119b857604051631dcf306360e21b81526004810182905260248101859052604401611751565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b80358015158114611a3157600080fd5b919050565b80516001600160801b0381168114611a3157600080fd5b600080600060608486031215611a61578283fd5b8335611a6c81611e5a565b95602085013595506040909401359392505050565b600060208284031215611a92578081fd5b8151610a4e81611e5a565b600060208284031215611aae578081fd5b5051919050565b6000610100808385031215611ac8578182fd5b6040519081019067ffffffffffffffff82118183101715611af757634e487b7160e01b83526041600452602483fd5b81604052611b0484611a36565b8152611b1260208501611a36565b602082015260408401516040820152606084015160608201526080840151608082015260a084015160a082015260c084015160c082015260e084015160e0820152809250505092915050565b600060e08284031215611b6f578081fd5b60405160e0810181811067ffffffffffffffff82111715611b9e57634e487b7160e01b83526041600452602483fd5b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b600060608284031215611bfe578081fd5b6040516060810181811067ffffffffffffffff82111715611c2d57634e487b7160e01b83526041600452602483fd5b80604052508251815260208301516020820152604083015160408201528091505092915050565b600060208284031215611c65578081fd5b5035919050565b60008060408385031215611c7e578182fd5b823591506020830135611c9081611e5a565b809150509250929050565b600080600060608486031215611caf578081fd5b833592506020840135611cc181611e5a565b9150611ccf60408501611a21565b90509250925092565b60008060008060808587031215611ced578182fd5b843593506020850135611cff81611e5a565b925060408501359150611d1460608601611a21565b905092959194509250565b600080600060608486031215611d33578081fd5b833592506020840135611d4581611e5a565b929592945050506040919091013590565b60008060408385031215611d68578182fd5b50508035926020909101359150565b600080821280156001600160ff1b0384900385131615611d9957611d99611e44565b600160ff1b8390038412811615611db257611db2611e44565b50500190565b60008219821115611dcb57611dcb611e44565b500190565b600082611deb57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611e0a57611e0a611e44565b500290565b6000600019821415611e2357611e23611e44565b5060010190565b6000600160ff1b821415611e4057611e40611e44565b0390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114611e6f57600080fd5b5056fea2646970667358221220768fc1ec399dbe8d4d2852e778ad81d096ebe162ab1c4a1251cc93538f744c0064736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getBaseDust(uint256)": {
        "returns": {
          "_0": "Base balance of Governance. 18 decimals"
        }
      },
      "getExpectedVBaseAmount(uint256,uint256)": {
        "details": "It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as `minAmount` in `extendPosition`TODO: store market address to avoid second call",
        "params": {
          "idx": "Index of the perpetual market",
          "vQuoteAmountToSpend": "Amount of vQuote to be exchanged against some vBase. 18 decimals"
        }
      },
      "getExpectedVQuoteAmount(uint256,uint256)": {
        "details": "It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as `minAmount` in `extendPosition`TODO: store market address to avoid second call",
        "params": {
          "idx": "Index of the perpetual market",
          "vBaseAmountToSpend": "Amount of vBase to be exchanged against some vQuote. 18 decimals"
        }
      },
      "getGlobalPosition(uint256)": {
        "params": {
          "idx": "Index of the perpetual market"
        }
      },
      "getLpBalance(address,uint256,uint256)": {
        "params": {
          "marketIdx": "Index of the perpetual market",
          "tokenIdx": "Token to get the balance of",
          "user": "LP to get the balance of"
        }
      },
      "getLpFundingPayments(uint256,address)": {
        "params": {
          "account": "Lp to get the funding payments",
          "idx": "Index of the perpetual market"
        }
      },
      "getLpPosition(uint256,address)": {
        "params": {
          "account": "Address to get the LP position from",
          "idx": "Index of the perpetual market"
        }
      },
      "getLpPositionAfterWithdrawal(uint256,address)": {
        "params": {
          "account": "Liquidity Provider"
        },
        "returns": {
          "_0": "(Active) Liquidity Provider position"
        }
      },
      "getLpReserveValue(uint256,address)": {
        "params": {
          "account": "Address to get the portfolio value from",
          "idx": "Index of the perpetual market"
        }
      },
      "getLpUnrealizedPnL(uint256,address)": {
        "params": {
          "account": "Lp to get the unrealized PnL from",
          "idx": "Index of the perpetual market"
        }
      },
      "getMarket(uint256)": {
        "params": {
          "idx": "Index of the perpetual market"
        }
      },
      "getProposedAmount(uint256,address,uint256)": {
        "details": "Solidity implementation to minimize the node calls once has to make when finding proposed amountShould not be called from another contract",
        "params": {
          "idx": "Index of the perpetual market",
          "iter": "Maximum iterations",
          "trader": "Account"
        },
        "returns": {
          "amountIn": "Amount of tokens to swap. 18 decimals",
          "amountOut": "Amount of tokens to receive from the swap. 18 decimals"
        }
      },
      "getTraderBalance(address,uint256,uint256)": {
        "params": {
          "marketIdx": "Index of the perpetual market",
          "tokenIdx": "Token to get the balance of",
          "user": "Trader to get the balance of"
        }
      },
      "getTraderFundingPayments(uint256,address)": {
        "params": {
          "account": "Trader to get the funding payments",
          "idx": "Index of the perpetual market"
        }
      },
      "getTraderPosition(uint256,address)": {
        "params": {
          "account": "Address to get the trading position from",
          "idx": "Index of the perpetual market"
        }
      },
      "getTraderReserveValue(uint256,address)": {
        "params": {
          "account": "Address to get the portfolio value from",
          "idx": "Index of the perpetual market"
        }
      },
      "getTraderUnrealizedPnL(uint256,address)": {
        "params": {
          "account": "Trader to get the unrealized PnL from",
          "idx": "Index of the perpetual market"
        }
      },
      "indexPrice(uint256)": {
        "params": {
          "idx": "Index of the perpetual market"
        }
      },
      "marginIsValid(uint256,address,int256,bool)": {
        "params": {
          "account": "Account of the position to get the margin ratio from",
          "idx": "Index of the perpetual market",
          "isTrader": "True if the user is a trader, False if the user is a liquidity provider",
          "ratio": "Proposed ratio to compare the position against"
        },
        "returns": {
          "_0": "True if the position exceeds margin ratio, false otherwise"
        }
      },
      "marginRatio(uint256,address,bool)": {
        "params": {
          "account": "Account of the position to get the margin ratio from",
          "idx": "Index of the perpetual market",
          "isTrader": "True if the user is a trader, False if the user is a liquidity provider"
        },
        "returns": {
          "_0": "Margin ratio of the position (in 1e18)"
        }
      },
      "marketPrice(uint256)": {
        "params": {
          "idx": "Index of the perpetual market"
        }
      }
    },
    "title": "Clearing House Helper Contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ClearingHouseViewer_ZeroAddressConstructor(uint8)": [
        {
          "notice": "Emitted when the zero address is provided as a parameter in the constructor"
        }
      ],
      "PRBMathSD59x18__AbsInputTooSmall()": [
        {
          "notice": "Emitted when the input is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__DivInputTooSmall()": [
        {
          "notice": "Emitted when one of the inputs is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__DivOverflow(uint256)": [
        {
          "notice": "Emitted when one of the intermediary unsigned results overflows SD59x18."
        }
      ],
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "getBaseDust(uint256)": {
        "notice": "Get the current (base) dust balance"
      },
      "getExpectedVBaseAmount(uint256,uint256)": {
        "notice": "Return amount for vBase one would receive for exchanging `vQuoteAmountToSpend` in a select market (excluding slippage)"
      },
      "getExpectedVQuoteAmount(uint256,uint256)": {
        "notice": "Return amount for vQuote one would receive for exchanging `vBaseAmountToSpend` in a select market (excluding slippage)"
      },
      "getLpBalance(address,uint256,uint256)": {
        "notice": "Get LP balance"
      },
      "getLpFundingPayments(uint256,address)": {
        "notice": "Calculate missed funding payments"
      },
      "getLpPosition(uint256,address)": {
        "notice": "Get Lp position"
      },
      "getLpPositionAfterWithdrawal(uint256,address)": {
        "notice": "Get the (active) position of a liquidity provider after withdrawing liquidity"
      },
      "getLpReserveValue(uint256,address)": {
        "notice": "Get the portfolio value of an Lp"
      },
      "getProposedAmount(uint256,address,uint256)": {
        "notice": "Get the proposed amount needed to close a position"
      },
      "getTraderBalance(address,uint256,uint256)": {
        "notice": "Get trader balance"
      },
      "getTraderFundingPayments(uint256,address)": {
        "notice": "Calculate missed funding payments"
      },
      "getTraderPosition(uint256,address)": {
        "notice": "Get trader position"
      },
      "getTraderReserveValue(uint256,address)": {
        "notice": "Get the portfolio value of a trader"
      },
      "indexPrice(uint256)": {
        "notice": "Return the current off-chain exchange rate for vBase/vQuote"
      },
      "marginIsValid(uint256,address,int256,bool)": {
        "notice": "Approximately determine whether or not a position is valid for a given margin ratio (incl. an estimate of pending funding payments)"
      },
      "marginRatio(uint256,address,bool)": {
        "notice": "Get the (approximate) margin ratio of a trading position (given that, for now, 1 trading position = 1 address) incl. an estimate of pending funding payments"
      },
      "marketPrice(uint256)": {
        "notice": "Return the last traded price (used for TWAP)"
      }
    },
    "notice": "Utility functions to easily extract data from Perpetual Contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3754,
        "contract": "contracts/ClearingHouseViewer.sol:ClearingHouseViewer",
        "label": "clearingHouse",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IClearingHouse)9658"
      }
    ],
    "types": {
      "t_contract(IClearingHouse)9658": {
        "encoding": "inplace",
        "label": "contract IClearingHouse",
        "numberOfBytes": "20"
      }
    }
  }
}