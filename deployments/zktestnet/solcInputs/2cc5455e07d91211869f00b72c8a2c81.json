{
  "language": "Solidity",
  "sources": {
    "contracts/ClearingHouse.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {IncreAccessControl} from \"./utils/IncreAccessControl.sol\";\n\n// interfaces\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IClearingHouse} from \"./interfaces/IClearingHouse.sol\";\nimport {IPerpetual} from \"./interfaces/IPerpetual.sol\";\nimport {IInsurance} from \"./interfaces/IInsurance.sol\";\nimport {IVault} from \"./interfaces/IVault.sol\";\nimport {ICryptoSwap} from \"./interfaces/ICryptoSwap.sol\";\nimport {IStakingContract} from \"./interfaces/IStakingContract.sol\";\n\n// libraries\nimport {LibMath} from \"./lib/LibMath.sol\";\nimport {LibPerpetual} from \"./lib/LibPerpetual.sol\";\nimport {LibReserve} from \"./lib/LibReserve.sol\";\n\n/// @notice Entry point for users to vault and perpetual markets\ncontract ClearingHouse is IClearingHouse, IncreAccessControl, Pausable, ReentrancyGuard {\n    using LibMath for int256;\n    using LibMath for uint256;\n    using SafeERC20 for IERC20Metadata;\n\n    // constants\n    uint256 internal constant VQUOTE_INDEX = 0; // index of quote asset in curve pool\n    uint256 internal constant VBASE_INDEX = 1; // index of base asset in curve pool\n\n    // parameterization\n\n    /// @notice minimum maintenance margin\n    int256 public override minMargin;\n\n    /// @notice minimum margin when opening a position\n    int256 public override minMarginAtCreation;\n\n    /// @notice minimum positive open notional when opening a position\n    uint256 public override minPositiveOpenNotional;\n\n    /// @notice liquidation reward payed to liquidators\n    /// @dev Paid on dollar value of an trader position. important: liquidationReward < minMargin or liquidations will result in protocol losses\n    uint256 public override liquidationReward;\n\n    /// @notice Insurance ratio\n    /// @dev Once the insurance reserve exceed this ratio of the tvl, governance can withdraw exceeding insurance fee\n    uint256 public override insuranceRatio;\n\n    /// @notice Portion of the liquidation reward that the insurance gets\n    uint256 public override liquidationRewardInsuranceShare;\n\n    /// @notice Discount on the collateral price for the liquidator\n    uint256 public override liquidationDiscount;\n\n    /// @notice Discount ratio to be applied on non-UA collaterals before seizing said collaterals for some UA\n    /// @dev Must be lower than liquidationDiscount to ensure liquidations don't generate bad debt\n    uint256 public override nonUACollSeizureDiscount;\n\n    /// @notice UA debt amount at which non-UA collaterals can be seized to pay back UA debts\n    int256 public override uaDebtSeizureThreshold;\n\n    // dependencies\n\n    /// @notice Vault contract\n    IVault public override vault;\n\n    /// @notice Insurance contract\n    IInsurance public override insurance;\n\n    /// @notice Staking contract\n    IStakingContract public override stakingContract;\n\n    /// @notice Allowlisted Perpetual contracts\n    IPerpetual[] public override perpetuals;\n\n    constructor(\n        IVault _vault,\n        IInsurance _insurance,\n        ClearingHouseParams memory _params\n    ) {\n        if (address(_vault) == address(0)) revert ClearingHouse_ZeroAddress();\n        if (address(_insurance) == address(0)) revert ClearingHouse_ZeroAddress();\n\n        vault = _vault;\n        insurance = _insurance;\n\n        setParameters(_params);\n    }\n\n    /* **************************** */\n    /*   Collateral operations      */\n    /* **************************** */\n\n    /// @notice Deposit tokens into the vault\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\n    /// @param token Token to be used for the collateral\n    function deposit(uint256 amount, IERC20Metadata token) external override nonReentrant whenNotPaused {\n        _deposit(amount, token);\n    }\n\n    /// @notice Withdraw tokens from the vault\n    /// @param amount Amount of collateral to withdraw. Might not be 18 decimals (decimals of `token`)\n    /// @param token Token of the collateral\n    function withdraw(uint256 amount, IERC20Metadata token) external override nonReentrant whenNotPaused {\n        vault.withdraw(msg.sender, amount, token);\n\n        if (!_isPositionValid(msg.sender, minMarginAtCreation)) revert ClearingHouse_WithdrawInsufficientMargin();\n    }\n\n    /// @notice Withdraw all tokens from the vault\n    /// @dev Should only be called by the trader\n    /// @param token Token of the collateral\n    function withdrawAll(IERC20Metadata token) external override nonReentrant whenNotPaused {\n        vault.withdrawAll(msg.sender, token);\n\n        if (!_isPositionValid(msg.sender, minMarginAtCreation)) revert ClearingHouse_WithdrawInsufficientMargin();\n    }\n\n    /* ****************** */\n    /*   Trader flow      */\n    /* ****************** */\n\n    /// @notice Open or increase or reduce a position, either LONG or SHORT\n    /// @dev No number for the leverage is given but the amount in the vault must be bigger than minMarginAtCreation\n    /// @param idx Index of the perpetual market\n    /// @param amount Amount in vQuote (if LONG) or vBase (if SHORT) to sell. 18 decimals\n    /// @param minAmount Minimum amount that the user is willing to accept. 18 decimals\n    /// @param direction Whether the trader wants to go in the LONG or SHORT direction overall\n    function changePosition(\n        uint256 idx,\n        uint256 amount,\n        uint256 minAmount,\n        LibPerpetual.Side direction\n    ) external override nonReentrant whenNotPaused {\n        _changePosition(idx, amount, minAmount, direction);\n    }\n\n    /// @notice Open a position in the opposite direction of the currently opened position\n    /// @notice For example, a trader with a LONG position can switch to a SHORT position with just one call to this function\n    /// @param idx Index of the perpetual market\n    /// @param closeProposedAmount Amount in vQuote (if LONG) or vBase (if SHORT) to sell to close the position. 18 decimals\n    /// @param closeMinAmount Minimum amount that the user is willing to accept when closing the position. 18 decimals\n    /// @param openProposedAmount Amount in vQuote (if LONG) or vBase (if SHORT) to sell to open the reversed position. 18 decimals\n    /// @param openMinAmount Minimum amount that the user is willing to accept when opening the reversed position. 18 decimals\n    /// @param direction Whether the trader wants to go in the LONG or SHORT direction overall\n    function openReversePosition(\n        uint256 idx,\n        uint256 closeProposedAmount,\n        uint256 closeMinAmount,\n        uint256 openProposedAmount,\n        uint256 openMinAmount,\n        LibPerpetual.Side direction\n    ) external override nonReentrant whenNotPaused {\n        _changePosition(idx, closeProposedAmount, closeMinAmount, direction);\n        if (perpetuals[idx].isTraderPositionOpen(msg.sender)) revert ClearingHouse_ClosePositionStillOpen();\n        _changePosition(idx, openProposedAmount, openMinAmount, direction);\n    }\n\n    /// @notice Single open position function, groups depositing collateral and extending position\n    /// @param idx Index of the perpetual market\n    /// @param collateralAmount Amount to be used as the collateral of the position. Might not be 18 decimals\n    /// @param token Token to be used for the collateral of the position\n    /// @param positionAmount Amount to be sold, in vQuote (if LONG) or vBase (if SHORT). Must be 18 decimals\n    /// @param direction Whether the position is LONG or SHORT\n    /// @param minAmount Minimum amount that the user is willing to accept. 18 decimals\n    function extendPositionWithCollateral(\n        uint256 idx,\n        uint256 collateralAmount,\n        IERC20Metadata token,\n        uint256 positionAmount,\n        LibPerpetual.Side direction,\n        uint256 minAmount\n    ) external override nonReentrant whenNotPaused {\n        _deposit(collateralAmount, token);\n        _changePosition(idx, positionAmount, minAmount, direction);\n    }\n\n    /// @notice Single close position function, groups closing position and withdrawing collateral\n    /// @notice Important: `proposedAmount` must be large enough to close the entire position else the function call will fail\n    /// @param idx Index of the perpetual market\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\n    /// @param minAmount Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\n    /// @param token Token used for the collateral\n    function closePositionWithdrawCollateral(\n        uint256 idx,\n        uint256 proposedAmount,\n        uint256 minAmount,\n        IERC20Metadata token\n    ) external override nonReentrant whenNotPaused {\n        int256 traderPositionSize = _getTraderPosition(idx, msg.sender).positionSize;\n\n        LibPerpetual.Side closeDirection = traderPositionSize > 0 ? LibPerpetual.Side.Short : LibPerpetual.Side.Long;\n\n        _changePosition(idx, proposedAmount, minAmount, closeDirection);\n\n        if (perpetuals[idx].isTraderPositionOpen(msg.sender)) revert ClearingHouse_ClosePositionStillOpen();\n\n        // tentatively remove all liquidity of user\n        // if user had just one position (trading or LP) in one market, it'll pass, else not\n        vault.withdrawAll(msg.sender, token);\n\n        if (!_isPositionValid(msg.sender, minMarginAtCreation)) revert ClearingHouse_WithdrawInsufficientMargin();\n    }\n\n    /* ****************** */\n    /*  Liquidation flow  */\n    /* ****************** */\n\n    /// @notice Submit the address of an user whose position is worth liquidating for a reward\n    /// @param idx Index of the perpetual market\n    /// @param liquidatee Address of the account to liquidate\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\n    /// @param isTrader Whether or not the position to liquidate is a trading position\n    function liquidate(\n        uint256 idx,\n        address liquidatee,\n        uint256 proposedAmount,\n        bool isTrader\n    ) external override nonReentrant whenNotPaused {\n        address liquidator = msg.sender;\n\n        int256 positiveOpenNotional;\n        if (isTrader) {\n            (positiveOpenNotional) = int256(_getTraderPosition(idx, liquidatee).openNotional).abs();\n            if (positiveOpenNotional == 0) revert ClearingHouse_LiquidateInvalidPosition();\n        } else {\n            if (!(perpetuals[idx].isLpPositionOpen(liquidatee))) revert ClearingHouse_LiquidateInvalidPosition();\n\n            positiveOpenNotional = _getLpOpenNotional(idx, liquidatee).abs();\n        }\n\n        _settleUserFundingPayments(liquidatee);\n\n        if (_isPositionValid(liquidatee, minMargin)) revert ClearingHouse_LiquidateValidMargin();\n\n        int256 pnl = isTrader\n            ? _liquidateTrader(idx, liquidatee, proposedAmount)\n            : _liquidateLp(idx, liquidatee, proposedAmount);\n\n        // take fee from liquidatee for liquidator and insurance\n        uint256 liquidationRewardAmount = positiveOpenNotional.toUint256().wadMul(liquidationReward);\n        uint256 insuranceLiquidationReward = liquidationRewardAmount.wadMul(liquidationRewardInsuranceShare);\n        uint256 liquidatorLiquidationReward = liquidationRewardAmount - insuranceLiquidationReward;\n\n        vault.settlePnL(liquidatee, pnl - liquidationRewardAmount.toInt256());\n        vault.settlePnL(liquidator, liquidatorLiquidationReward.toInt256());\n        insurance.fundInsurance(insuranceLiquidationReward);\n\n        emit LiquidationCall(idx, liquidatee, liquidator, positiveOpenNotional.toUint256());\n    }\n\n    /// @notice Buy the non-UA collaterals of a user at a discounted UA price to settle the debt of said user\n    /// @param liquidatee Address of the account to liquidate\n    function seizeCollateral(address liquidatee) external override nonReentrant whenNotPaused {\n        address liquidator = msg.sender;\n\n        // all positions must be closed\n        uint256 numMarkets = getNumMarkets();\n        for (uint256 i = 0; i < numMarkets; ) {\n            if (perpetuals[i].isTraderPositionOpen(liquidatee) || perpetuals[i].isLpPositionOpen(liquidatee))\n                revert ClearingHouse_SeizeCollateralStillOpen();\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        int256 uaBalance = vault.getBalance(liquidatee, 0);\n        int256 discountedCollateralsBalance = vault.getReserveValue(liquidatee, true);\n        int256 discountedCollateralsBalanceExUA = discountedCollateralsBalance - uaBalance;\n\n        // user must have UA debt\n        if (uaBalance >= 0) revert ClearingHouse_LiquidationDebtSizeZero();\n\n        // for a user to have his non-UA collaterals seized, one of the following 2 conditions must be met:\n        // 1) the aggregate value of non-UA collaterals discounted by their weights and the nonUACollSeizureDiscount\n        //    ratio must be smaller than his UA debt\n        // 2) UA debt must be larger than the threshold defined by uaDebtSeizureThreshold\n        if (\n            -uaBalance > discountedCollateralsBalanceExUA.wadMul((nonUACollSeizureDiscount).toInt256()) ||\n            -uaBalance > uaDebtSeizureThreshold\n        ) {\n            vault.settleLiquidationOnCollaterals(liquidator, liquidatee);\n\n            emit SeizeCollateral(liquidatee, liquidator);\n        } else {\n            revert ClearingHouse_SufficientUserCollateral();\n        }\n    }\n\n    /* ****************** */\n    /*   Liquidity flow   */\n    /* ****************** */\n\n    /// @notice Provide liquidity to the pool, without depositing new capital in the vault\n    /// @param idx Index of the perpetual market\n    /// @param amounts Amount of virtual tokens ([vQuote, vBase]) provided. 18 decimals\n    /// @param minLpAmount Minimum amount of Lp tokens minted. 18 decimals\n    function provideLiquidity(\n        uint256 idx,\n        uint256[2] calldata amounts,\n        uint256 minLpAmount\n    ) external override nonReentrant whenNotPaused {\n        _provideLiquidity(idx, amounts, minLpAmount);\n    }\n\n    /// @notice Remove liquidity from the pool and account profit/loss in UA\n    /// @param idx Index of the perpetual market\n    /// @param liquidityAmountToRemove Amount of liquidity (in LP tokens) to be removed from the pool. 18 decimals\n    /// @param minVTokenAmounts Minimum amount of virtual tokens [vQuote, vBase] to withdraw from the curve pool. 18 decimals\n    /// @param proposedAmount Amount at which to sell the active LP position (in vBase if LONG, in vQuote if SHORT). 18 decimals\n    /// @param minAmount Minimum amount that the user is willing to accept when closing his active position\n    ///        generated after removing liquidity, in vQuote if LONG, in vBase if SHORT. 18 decimals\n    function removeLiquidity(\n        uint256 idx,\n        uint256 liquidityAmountToRemove,\n        uint256[2] calldata minVTokenAmounts,\n        uint256 proposedAmount,\n        uint256 minAmount\n    ) external override nonReentrant whenNotPaused {\n        _settleUserFundingPayments(msg.sender);\n\n        (int256 profit, uint256 reductionRatio, int256 quoteProceeds) = perpetuals[idx].removeLiquidity(\n            msg.sender,\n            liquidityAmountToRemove,\n            minVTokenAmounts,\n            proposedAmount,\n            minAmount,\n            false\n        );\n\n        // pay insurance fee on traded amount\n        int256 insuranceFeeAmount = quoteProceeds.abs().wadMul(perpetuals[idx].insuranceFee());\n        insurance.fundInsurance(insuranceFeeAmount.toUint256());\n\n        vault.settlePnL(msg.sender, profit - insuranceFeeAmount);\n\n        _isOpenNotionalRequirementValid(idx, msg.sender, false);\n        emit LiquidityRemoved(idx, msg.sender, reductionRatio);\n    }\n\n    /* ****************** */\n    /*     Governance     */\n    /* ****************** */\n\n    /// @notice Sell dust of a given market\n    /// @dev Can only be called by Manager\n    /// @param idx Index of the perpetual market to sell dust from\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\n    /// @param minAmount Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\n    function sellDust(\n        uint256 idx,\n        uint256 proposedAmount,\n        uint256 minAmount\n    ) external override nonReentrant onlyRole(MANAGER) {\n        (, , int256 profit, ) = perpetuals[idx].changePosition(\n            address(this),\n            proposedAmount,\n            minAmount,\n            LibPerpetual.Side.Short,\n            false\n        );\n\n        // no Vault balance to reduce because the positions where dust have been taken out\n        // have already been reduced (see `Perpetual._donate`)\n        insurance.fundInsurance(profit.toUint256());\n\n        emit DustSold(idx, profit);\n    }\n\n    /// @notice Pause the contract\n    /// @dev Can only be called by Manager\n    function pause() external override onlyRole(MANAGER) {\n        _pause();\n    }\n\n    /// @notice Unpause the contract\n    /// @dev Can only be called by Manager\n    function unpause() external override onlyRole(MANAGER) {\n        _unpause();\n    }\n\n    /// @notice Add one perpetual market to the list of markets\n    /// @param perp Market to add to the list of supported market\n    function allowListPerpetual(IPerpetual perp) external override onlyRole(GOVERNANCE) {\n        if (address(perp) == address(0)) revert ClearingHouse_ZeroAddress();\n\n        for (uint256 i = 0; i < getNumMarkets(); i++) {\n            if (perpetuals[i] == perp) revert ClearingHouse_PerpetualMarketAlreadyAssigned();\n        }\n\n        perpetuals.push(perp);\n        emit MarketAdded(perp, perpetuals.length);\n    }\n\n    /// @notice Add a staking contract\n    /// @dev Staking contract is not implemented yet\n    /// @param staking Staking Contract\n    function addStakingContract(IStakingContract staking) external override onlyRole(GOVERNANCE) {\n        if (address(staking) == address(0)) revert ClearingHouse_ZeroAddress();\n        stakingContract = staking;\n\n        emit StakingContractChanged(staking);\n    }\n\n    /// @notice Update the value of the param listed in `IClearingHouse.ClearingHouseParams`\n    /// @param params New economic parameters\n    function setParameters(ClearingHouseParams memory params) public override onlyRole(GOVERNANCE) {\n        if (params.minMargin < 2e16 || params.minMargin > 2e17) revert ClearingHouse_InvalidMinMargin();\n        if (params.minMarginAtCreation <= params.minMargin || params.minMarginAtCreation > 5e17)\n            revert ClearingHouse_InvalidMinMarginAtCreation();\n        if (params.minPositiveOpenNotional > 1000 * 1e18) revert ClearingHouse_ExcessivePositiveOpenNotional();\n        if (params.liquidationReward < 1e16 || params.liquidationReward >= params.minMargin.toUint256())\n            revert ClearingHouse_InvalidLiquidationReward();\n        if (params.liquidationDiscount < 7e17) revert ClearingHouse_ExcessiveLiquidationDiscount();\n        if (params.nonUACollSeizureDiscount + 1e17 > params.liquidationDiscount)\n            revert ClearingHouse_InsufficientDiffBtwLiquidationDiscountAndNonUACollSeizureDiscount(); // even with an assets with a weight of 1 the nonUACollateralSeizeDiscount should be less than the liquidationDiscount\n        if (params.uaDebtSeizureThreshold < 1e20) revert ClearingHouse_InsufficientUaDebtSeizureThreshold();\n        if (params.insuranceRatio < 1e17 || params.insuranceRatio > 5e17) revert ClearingHouse_InvalidInsuranceRatio();\n        if (params.liquidationRewardInsuranceShare > 1e18)\n            revert ClearingHouse_ExcessiveLiquidationRewardInsuranceShare();\n\n        minMargin = params.minMargin;\n        minPositiveOpenNotional = params.minPositiveOpenNotional;\n        liquidationReward = params.liquidationReward;\n        liquidationDiscount = params.liquidationDiscount;\n        nonUACollSeizureDiscount = params.nonUACollSeizureDiscount;\n        uaDebtSeizureThreshold = params.uaDebtSeizureThreshold;\n        insuranceRatio = params.insuranceRatio;\n        minMarginAtCreation = params.minMarginAtCreation;\n        liquidationRewardInsuranceShare = params.liquidationRewardInsuranceShare;\n\n        emit ClearingHouseParametersChanged(\n            params.minMargin,\n            params.minMarginAtCreation,\n            params.minPositiveOpenNotional,\n            params.liquidationReward,\n            params.insuranceRatio,\n            params.liquidationRewardInsuranceShare,\n            params.liquidationDiscount,\n            params.nonUACollSeizureDiscount,\n            params.uaDebtSeizureThreshold\n        );\n    }\n\n    /* ****************** */\n    /*   Market viewer    */\n    /* ****************** */\n\n    /// @notice Return the number of active markets\n    function getNumMarkets() public view override returns (uint256) {\n        return perpetuals.length;\n    }\n\n    /* ****************** */\n    /*   User viewer      */\n    /* ****************** */\n\n    /// @notice Get user profit/loss across all perpetual markets\n    /// @param account User address (trader and/or liquidity provider)\n    function getPnLAcrossMarkets(address account) public view override returns (int256 unrealizedPositionPnl) {\n        uint256 numMarkets = getNumMarkets();\n        for (uint256 i = 0; i < numMarkets; ) {\n            unrealizedPositionPnl += perpetuals[i].getPendingPnL(account);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Get user debt across all perpetual markets\n    /// @param account User address (trader and/or liquidity provider)\n    function getDebtAcrossMarkets(address account) public view override returns (int256 userDebt) {\n        uint256 numMarkets = getNumMarkets();\n        for (uint256 i = 0; i < numMarkets; ) {\n            uint256 weight = perpetuals[i].riskWeight();\n            userDebt += perpetuals[i].getUserDebt(account).wadMul(weight.toInt256());\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Get the margin required to serve user debt at a chosen margin ratio\n    /// @param account User address (trader and/or liquidity provider)\n    /// @param ratio Margin ratio (minMargin or minMarginAtCreation)\n    function getTotalMarginRequirement(address account, int256 ratio) public view returns (int256 requiredMargin) {\n        int256 userDebt = getDebtAcrossMarkets(account);\n        /*\n            From the margin ratio formula we know:\n            margin / userDebt = ratio\n\n            So we can compute the required margin as:\n            margin = userDebt * ratio\n        */\n        return userDebt.wadMul(ratio);\n    }\n\n    /// @notice Get free collateral of a user given a chosen margin ratio\n    /// @param account User address (trader and/or liquidity provider)\n    /// @param ratio Margin ratio (minMargin or minMarginAtCreation)\n    function getFreeCollateralByRatio(address account, int256 ratio) public view returns (int256 freeCollateral) {\n        int256 pnl = getPnLAcrossMarkets(account);\n        int256 reserveValue = _getReserveValue(account, true);\n        int256 marginRequired = getTotalMarginRequirement(account, ratio);\n\n        // We define freeCollateral as follows:\n        // freeCollateral = min(totalCollateralValue, totalCollateralValue + pnl) - marginRequired)\n        // This is a conservative approach when compared to\n        // freeCollateral = totalCollateralValue + pnl - marginRequired\n        // since the unrealized pnl depends on the index price\n        // where a deviation could allow a trader to empty the vault\n\n        return reserveValue.min(reserveValue + pnl) - marginRequired;\n    }\n\n    /* ****************** */\n    /*   Internal user    */\n    /* ****************** */\n\n    function _liquidateTrader(\n        uint256 idx,\n        address liquidatee,\n        uint256 proposedAmount\n    ) internal returns (int256) {\n        LibPerpetual.Side closeDirection = _getTraderPosition(idx, liquidatee).positionSize >= 0\n            ? LibPerpetual.Side.Short\n            : LibPerpetual.Side.Long;\n\n        // (liquidatee, proposedAmount)\n        (, , int256 pnL, ) = perpetuals[idx].changePosition(liquidatee, proposedAmount, 0, closeDirection, true);\n\n        // traders are allowed to reduce their positions partially, but liquidators have to close positions in full\n        if (perpetuals[idx].isTraderPositionOpen(liquidatee))\n            revert ClearingHouse_LiquidateInsufficientProposedAmount();\n\n        return pnL;\n    }\n\n    function _liquidateLp(\n        uint256 idx,\n        address liquidatee,\n        uint256 proposedAmount\n    ) internal returns (int256) {\n        // close lp\n        (int256 pnL, , ) = perpetuals[idx].removeLiquidity(\n            liquidatee,\n            _getLpLiquidity(idx, liquidatee),\n            [uint256(0), uint256(0)],\n            proposedAmount,\n            0,\n            true\n        );\n        _distributeLpRewards(idx, liquidatee);\n\n        return pnL;\n    }\n\n    function _deposit(uint256 amount, IERC20Metadata token) internal {\n        vault.deposit(msg.sender, amount, token);\n    }\n\n    function _changePosition(\n        uint256 idx,\n        uint256 amount,\n        uint256 minAmount,\n        LibPerpetual.Side direction\n    ) internal {\n        if (amount == 0) revert ClearingHouse_ChangePositionZeroAmount();\n\n        _settleUserFundingPayments(msg.sender);\n\n        (int256 quoteProceeds, int256 baseProceeds, int256 profit, bool isPositionIncreased) = perpetuals[idx]\n            .changePosition(msg.sender, amount, minAmount, direction, false);\n\n        // pay insurance fee\n        int256 insuranceFeeAmount = 0;\n        if (isPositionIncreased) {\n            insuranceFeeAmount = quoteProceeds.abs().wadMul(perpetuals[idx].insuranceFee());\n            insurance.fundInsurance(insuranceFeeAmount.toUint256());\n        }\n\n        int256 traderVaultDiff = profit - insuranceFeeAmount;\n        vault.settlePnL(msg.sender, traderVaultDiff);\n\n        if (!_isPositionValid(msg.sender, minMarginAtCreation)) revert ClearingHouse_ExtendPositionInsufficientMargin();\n        if (!_isOpenNotionalRequirementValid(idx, msg.sender, true))\n            revert ClearingHouse_UnderOpenNotionalAmountRequired();\n\n        emit ChangePosition(\n            idx,\n            msg.sender,\n            direction,\n            quoteProceeds,\n            baseProceeds,\n            traderVaultDiff,\n            isPositionIncreased\n        );\n    }\n\n    function _provideLiquidity(\n        uint256 idx,\n        uint256[2] calldata amounts,\n        uint256 minLpAmount\n    ) internal {\n        if (amounts[VQUOTE_INDEX] == 0 && amounts[VBASE_INDEX] == 0) revert ClearingHouse_ProvideLiquidityZeroAmount();\n\n        _settleUserFundingPayments(msg.sender);\n\n        // check enough free collateral\n        int256 freeCollateralUSD = getFreeCollateralByRatio(msg.sender, minMarginAtCreation);\n\n        // compare the dollar value of quantities q1 & q2 with the free collateral\n        // allow to provide liquidity with 2x leverage\n        if (\n            amounts[VQUOTE_INDEX].toInt256() + amounts[VBASE_INDEX].toInt256().wadMul(perpetuals[idx].indexPrice()) >\n            2 * freeCollateralUSD\n        ) revert ClearingHouse_AmountProvidedTooLarge();\n\n        int256 tradingFees = perpetuals[idx].provideLiquidity(msg.sender, amounts, minLpAmount);\n        if (tradingFees != 0) vault.settlePnL(msg.sender, tradingFees);\n\n        _distributeLpRewards(idx, msg.sender);\n\n        _isOpenNotionalRequirementValid(idx, msg.sender, false);\n        _isPositionValid(msg.sender, minMarginAtCreation);\n\n        emit LiquidityProvided(idx, msg.sender, amounts[VQUOTE_INDEX], amounts[VBASE_INDEX]);\n    }\n\n    /// @notice Settle funding payments of a user across all markets, on trading and liquidity positions\n    function _settleUserFundingPayments(address account) internal {\n        int256 fundingPayments;\n        uint256 numMarkets = getNumMarkets();\n        for (uint256 i = 0; i < numMarkets; ) {\n            fundingPayments += perpetuals[i].settleTrader(account) + perpetuals[i].settleLp(account);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        if (fundingPayments != 0) {\n            vault.settlePnL(account, fundingPayments);\n        }\n    }\n\n    /// @notice Distribute LP staking rewards\n    function _distributeLpRewards(uint256 idx, address lp) internal {\n        if (address(stakingContract) != address(0)) stakingContract.updateStakingPosition(idx, lp);\n    }\n\n    /* ****************** */\n    /*   Internal getter  */\n    /* ****************** */\n\n    function _isOpenNotionalRequirementValid(\n        uint256 idx,\n        address account,\n        bool isTrader\n    ) internal view returns (bool) {\n        int256 openNotional = isTrader\n            ? _getTraderPosition(idx, account).openNotional\n            : _getLpOpenNotional(idx, account);\n        uint256 absOpenNotional = openNotional.abs().toUint256();\n\n        // we don't want the check to fail if the position has been closed (e.g. in `reducePosition`)\n        if (absOpenNotional > 0) {\n            return absOpenNotional > minPositiveOpenNotional;\n        }\n\n        return true;\n    }\n\n    function _isPositionValid(address account, int256 ratio) internal view returns (bool) {\n        return getFreeCollateralByRatio(account, ratio) >= 0;\n    }\n\n    function _getReserveValue(address account, bool isDiscounted) internal view returns (int256) {\n        return vault.getReserveValue(account, isDiscounted);\n    }\n\n    function _getTraderPosition(uint256 idx, address account)\n        internal\n        view\n        returns (LibPerpetual.TraderPosition memory)\n    {\n        return perpetuals[idx].getTraderPosition(account);\n    }\n\n    function _getLpLiquidity(uint256 idx, address account) internal view returns (uint256) {\n        return perpetuals[idx].getLpLiquidity(account);\n    }\n\n    function _getLpOpenNotional(uint256 idx, address account) internal view returns (int256) {\n        return perpetuals[idx].getLpOpenNotional(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/utils/IncreAccessControl.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n// interfaces\nimport {IIncreAccessControl} from \"../interfaces/IIncreAccessControl.sol\";\n\n/// @notice Increment access control contract.\ncontract IncreAccessControl is AccessControl {\n    bytes32 public constant GOVERNANCE = keccak256(\"GOVERNANCE\");\n    bytes32 public constant MANAGER = keccak256(\"MANAGER\");\n\n    constructor() {\n        _setupRole(GOVERNANCE, msg.sender);\n        _setRoleAdmin(GOVERNANCE, GOVERNANCE);\n\n        _setupRole(MANAGER, msg.sender);\n        _setRoleAdmin(MANAGER, GOVERNANCE);\n    }\n\n    // utils\n    function isGovernor(address account) external view returns (bool) {\n        return hasRole(GOVERNANCE, account);\n    }\n\n    function isManager(address account) external view returns (bool) {\n        return hasRole(MANAGER, account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/interfaces/IClearingHouse.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// interfaces\nimport {IClearingHouse} from \"./IClearingHouse.sol\";\nimport {IPerpetual} from \"./IPerpetual.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IVault} from \"./IVault.sol\";\nimport {IInsurance} from \"./IInsurance.sol\";\nimport {ICryptoSwap} from \"./ICryptoSwap.sol\";\nimport {IStakingContract} from \"./IStakingContract.sol\";\n\n// libraries\nimport {LibPerpetual} from \"../lib/LibPerpetual.sol\";\n\ninterface IClearingHouse {\n    struct ClearingHouseParams {\n        int256 minMargin;\n        int256 minMarginAtCreation;\n        uint256 minPositiveOpenNotional;\n        uint256 liquidationReward;\n        uint256 insuranceRatio;\n        uint256 liquidationRewardInsuranceShare;\n        uint256 liquidationDiscount;\n        uint256 nonUACollSeizureDiscount;\n        int256 uaDebtSeizureThreshold;\n    }\n\n    /* ****************** */\n    /*     Errors         */\n    /* ****************** */\n\n    /// @notice Emitted when the zero address is provided\n    error ClearingHouse_ZeroAddress();\n\n    /// @notice Emitted when passing the address of a perpetual market which has already been added\n    error ClearingHouse_PerpetualMarketAlreadyAssigned();\n\n    /// @notice Emitted when there is not enough margin to withdraw the requested amount\n    error ClearingHouse_WithdrawInsufficientMargin();\n\n    /// @notice Emitted when the position is not reduced entirely using closePositionWithdrawCollateral\n    error ClearingHouse_ClosePositionStillOpen();\n\n    /// @notice Emitted when the liquidatee does not have an open position\n    error ClearingHouse_LiquidateInvalidPosition();\n\n    /// @notice Emitted when the margin of the liquidatee's position is still valid\n    error ClearingHouse_LiquidateValidMargin();\n\n    /// @notice Emitted when the attempted liquidation does not close the full position\n    error ClearingHouse_LiquidateInsufficientProposedAmount();\n\n    /// @notice Emitted when attempting to seize collateral of a user with an open position\n    error ClearingHouse_SeizeCollateralStillOpen();\n\n    /// @notice Emitted when a user attempts to provide liquidity with amount equal to 0\n    error ClearingHouse_ProvideLiquidityZeroAmount();\n\n    /// @notice Emitted when a user attempts to provide liquidity with amount larger than his free collateral or collateral balance\n    error ClearingHouse_AmountProvidedTooLarge();\n\n    /// @notice Emitted when a user attempts to withdraw more liquidity than they have\n    error ClearingHouse_RemoveLiquidityInsufficientFunds();\n\n    /// @notice Emitted when vault withdrawal is unsuccessful\n    error ClearingHouse_VaultWithdrawUnsuccessful();\n\n    /// @notice Emitted when the proposed minMargin is too low or too high\n    error ClearingHouse_InvalidMinMargin();\n\n    /// @notice Emitted when the proposed minimum open notional is too high\n    error ClearingHouse_ExcessivePositiveOpenNotional();\n\n    /// @notice Emitted when the proposed minMarginAtCreation is too low or too high\n    error ClearingHouse_InvalidMinMarginAtCreation();\n\n    /// @notice Emitted when the proposed liquidation reward is too low or too high\n    error ClearingHouse_InvalidLiquidationReward();\n\n    /// @notice Emitted when the proposed insurance ratio is too low or too high\n    error ClearingHouse_InvalidInsuranceRatio();\n\n    /// @notice Emitted when the proposed share of the liquidation reward for the insurance is too high\n    error ClearingHouse_ExcessiveLiquidationRewardInsuranceShare();\n\n    /// @notice Emitted when the difference between liquidationDiscount and nonUACollSeizureDiscount isn't large enough\n    error ClearingHouse_InsufficientDiffBtwLiquidationDiscountAndNonUACollSeizureDiscount();\n\n    /// @notice Emitted when the liquidationDiscount is too high\n    error ClearingHouse_ExcessiveLiquidationDiscount();\n\n    /// @notice Emitted when the proposed UA debt limit is lower than the minimum acceptable value\n    error ClearingHouse_InsufficientUaDebtSeizureThreshold();\n\n    /// @notice Emitted when a user attempts to extend their position with amount equal to 0\n    error ClearingHouse_ExtendPositionZeroAmount();\n\n    /// @notice Emitted when there is not enough margin to extend to the proposed position amount\n    error ClearingHouse_ExtendPositionInsufficientMargin();\n\n    /// @notice Emitted when a user attempts to reduce their position with amount equal to 0\n    error ClearingHouse_ReducePositionZeroAmount();\n\n    /// @notice Emitted when a user attempts to change his position with no amount\n    error ClearingHouse_ChangePositionZeroAmount();\n\n    /// @notice Emitted when a user tries to open a position with an incorrect open notional amount\n    error ClearingHouse_UnderOpenNotionalAmountRequired();\n\n    /// @notice Emitted when a collateral liquidation for a user with no UA debt is tried\n    error ClearingHouse_LiquidationDebtSizeZero();\n\n    /// @notice Emitted when a liquidator tries seizing collateral of user with sufficient collaterals level\n    error ClearingHouse_SufficientUserCollateral();\n\n    /* ****************** */\n    /*     Events         */\n    /* ****************** */\n\n    /// @notice Emitted when new perpetual market is added\n    /// @param perpetual New perpetual market\n    /// @param numPerpetuals New number of perpetual markets\n    event MarketAdded(IPerpetual indexed perpetual, uint256 numPerpetuals);\n\n    /// @notice Emitted when a position is opened/extended\n    /// @param idx Index of the perpetual market\n    /// @param user User who opened/extended a position\n    /// @param direction Whether the position is LONG or SHORT\n    /// @param addedOpenNotional Notional (USD assets/debt) added to the position\n    /// @param addedPositionSize PositionSize (Base assets/debt) added to the position\n    /// @param profit Sum of pnL + tradingFeesPayed + fundingPaymentsPaid\n    /// @param isPositionIncreased Whether the position was extended or reduced / reversed\n    event ChangePosition(\n        uint256 indexed idx,\n        address indexed user,\n        LibPerpetual.Side direction,\n        int256 addedOpenNotional,\n        int256 addedPositionSize,\n        int256 profit,\n        bool isPositionIncreased\n    );\n\n    /// @notice Emitted when an user position is liquidated\n    /// @param idx Index of the perpetual market\n    /// @param liquidatee User who gets liquidated\n    /// @param liquidator User who is liquidating\n    /// @param notional Notional amount of the liquidatee\n    event LiquidationCall(\n        uint256 indexed idx,\n        address indexed liquidatee,\n        address indexed liquidator,\n        uint256 notional\n    );\n\n    /// @notice Emitted when an user non-UA collaterals are seized\n    /// @param liquidatee User whose non-UA assets are seized\n    /// @param liquidator User who is seizing the assets\n    event SeizeCollateral(address indexed liquidatee, address indexed liquidator);\n\n    /// @notice Emitted when (additional) liquidity is provided\n    /// @param idx Index of the perpetual market\n    /// @param liquidityProvider User who provides liquidity\n    /// @param quoteAmount vQuote amount (i.e. USD amount) to be added to the targeted market\n    /// @param baseAmount vBase amount (i.e. Base amount) to be added to the targeted market\n    event LiquidityProvided(\n        uint256 indexed idx,\n        address indexed liquidityProvider,\n        uint256 quoteAmount,\n        uint256 baseAmount\n    );\n\n    /// @notice Emitted when liquidity is removed\n    /// @param idx Index of the perpetual market\n    /// @param liquidityProvider User who provides liquidity\n    /// @param reductionRatio Pourcentage of previous position reduced\n    event LiquidityRemoved(uint256 indexed idx, address indexed liquidityProvider, uint256 reductionRatio);\n\n    /// @notice Emitted when dust is sold by governance\n    /// @param idx Index of the perpetual market\n    /// @param profit Amount of profit generated by the dust sale. 18 decimals\n    event DustSold(uint256 indexed idx, int256 profit);\n\n    /// @notice Emitted when parameters are changed\n    event ClearingHouseParametersChanged(\n        int256 newMinMargin,\n        int256 newMinMarginAtCreation,\n        uint256 newMinPositiveOpenNotional,\n        uint256 newLiquidationReward,\n        uint256 newInsuranceRatio,\n        uint256 newLiquidationRewardInsuranceShare,\n        uint256 newLiquidationDiscount,\n        uint256 nonUACollSeizureDiscount,\n        int256 uaDebtSeizureThreshold\n    );\n\n    event StakingContractChanged(IStakingContract newStakingContract);\n\n    /* ****************** */\n    /*     Viewer         */\n    /* ****************** */\n\n    function vault() external view returns (IVault);\n\n    function insurance() external view returns (IInsurance);\n\n    function perpetuals(uint256 idx) external view returns (IPerpetual);\n\n    function stakingContract() external view returns (IStakingContract);\n\n    function getNumMarkets() external view returns (uint256);\n\n    function minMargin() external view returns (int256);\n\n    function minMarginAtCreation() external view returns (int256);\n\n    function minPositiveOpenNotional() external view returns (uint256);\n\n    function liquidationReward() external view returns (uint256);\n\n    function insuranceRatio() external view returns (uint256);\n\n    function liquidationRewardInsuranceShare() external view returns (uint256);\n\n    function liquidationDiscount() external view returns (uint256);\n\n    function nonUACollSeizureDiscount() external view returns (uint256);\n\n    function uaDebtSeizureThreshold() external view returns (int256);\n\n    function getPnLAcrossMarkets(address account) external view returns (int256);\n\n    function getDebtAcrossMarkets(address account) external view returns (int256);\n\n    /* ****************** */\n    /*  State modifying   */\n    /* ****************** */\n\n    function allowListPerpetual(IPerpetual perp) external;\n\n    function pause() external;\n\n    function unpause() external;\n\n    function sellDust(\n        uint256 idx,\n        uint256 proposedAmount,\n        uint256 minAmount\n    ) external;\n\n    function setParameters(ClearingHouseParams memory params) external;\n\n    function addStakingContract(IStakingContract staking) external;\n\n    function deposit(uint256 amount, IERC20Metadata token) external;\n\n    function withdraw(uint256 amount, IERC20Metadata token) external;\n\n    function withdrawAll(IERC20Metadata token) external;\n\n    function changePosition(\n        uint256 idx,\n        uint256 amount,\n        uint256 minAmount,\n        LibPerpetual.Side direction\n    ) external;\n\n    function extendPositionWithCollateral(\n        uint256 idx,\n        uint256 collateralAmount,\n        IERC20Metadata token,\n        uint256 positionAmount,\n        LibPerpetual.Side direction,\n        uint256 minAmount\n    ) external;\n\n    function closePositionWithdrawCollateral(\n        uint256 idx,\n        uint256 proposedAmount,\n        uint256 minAmount,\n        IERC20Metadata token\n    ) external;\n\n    function openReversePosition(\n        uint256 idx,\n        uint256 closeProposedAmount,\n        uint256 closeMinAmount,\n        uint256 openProposedAmount,\n        uint256 openMinAmount,\n        LibPerpetual.Side direction\n    ) external;\n\n    function liquidate(\n        uint256 idx,\n        address liquidatee,\n        uint256 proposedAmount,\n        bool isTrader\n    ) external;\n\n    function seizeCollateral(address liquidatee) external;\n\n    function provideLiquidity(\n        uint256 idx,\n        uint256[2] calldata amounts,\n        uint256 minLpAmount\n    ) external;\n\n    function removeLiquidity(\n        uint256 idx,\n        uint256 liquidityAmountToRemove,\n        uint256[2] calldata minVTokenAmounts,\n        uint256 proposedAmount,\n        uint256 minAmount\n    ) external;\n}\n"
    },
    "contracts/interfaces/IPerpetual.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// interfaces\nimport {ICryptoSwap} from \"./ICryptoSwap.sol\";\nimport {IVault} from \"./IVault.sol\";\nimport {ICryptoSwap} from \"./ICryptoSwap.sol\";\nimport {IVBase} from \"./IVBase.sol\";\nimport {IVQuote} from \"./IVQuote.sol\";\nimport {IInsurance} from \"./IInsurance.sol\";\nimport {IClearingHouse} from \"./IClearingHouse.sol\";\nimport {ICurveCryptoViews} from \"./ICurveCryptoViews.sol\";\n\n// libraries\nimport {LibPerpetual} from \"../lib/LibPerpetual.sol\";\n\ninterface IPerpetual {\n    struct PerpetualParams {\n        uint256 riskWeight;\n        uint256 maxLiquidityProvided;\n        uint256 twapFrequency;\n        int256 sensitivity;\n        uint256 maxBlockTradeAmount;\n        int256 insuranceFee;\n        int256 lpDebtCoef;\n        uint256 lockPeriod;\n    }\n\n    /* ****************** */\n    /*     Errors         */\n    /* ****************** */\n\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\n    error Perpetual_ZeroAddressConstructor(uint256 paramIndex);\n\n    /// @notice Emitted when the constructor fails to give approval of a virtual token to the market\n    error Perpetual_VirtualTokenApprovalConstructor(uint256 tokenIndex);\n\n    /// @notice Emitted when market mid fee does not equal out fee\n    error Perpetual_MarketEqualFees();\n\n    /// @notice Emitted when the curve admin fee is invalid\n    error Perpetual_InvalidAdminFee();\n\n    /// @notice Emitted when the sender is not the clearing house\n    error Perpetual_SenderNotClearingHouse();\n\n    /// @notice Emitted when the sender is not the clearing house owner\n    error Perpetual_SenderNotClearingHouseOwner();\n\n    /// @notice Emitted when the user attempts to reduce their position using extendPosition\n    error Perpetual_AttemptReducePosition();\n\n    /// @notice Emitted when the user attempts to reverse their position using changePosition\n    error Perpetual_AttemptReversePosition();\n\n    /// @notice Emitted when the price impact of a position is too high\n    error Perpetual_ExcessiveBlockTradeAmount();\n\n    /// @notice Emitted when the user does not have an open position\n    error Perpetual_NoOpenPosition();\n\n    /// @notice Emitted when the user attempts to withdraw more liquidity than they have deposited\n    error Perpetual_LPWithdrawExceedsBalance();\n\n    /// @notice Emitted when the proposed twap frequency is insufficient/excessive\n    error Perpetual_TwapFrequencyInvalid(uint256 twapFrequency);\n\n    /// @notice Emitted when the proposed funding rate sensitivity is insufficient/excessive\n    error Perpetual_SensitivityInvalid(int256 sensitivity);\n\n    /// @notice Emitted when the proposed maximum block trade amount is insufficient\n    error Perpetual_MaxBlockAmountInvalid(uint256 maxBlockTradeAmount);\n\n    /// @notice Emitted when the proposed insurance fee is insufficient/excessive\n    error Perpetual_InsuranceFeeInvalid(int256 fee);\n\n    /// @notice Emitted when the proposed lp debt coefficient is insufficient/excessive\n    error Perpetual_LpDebtCoefInvalid(int256 lpDebtCoef);\n\n    /// @notice Emitted when the proposed lp lock period is insufficient/excessive\n    error Perpetual_LockPeriodInvalid(uint256 lockPeriod);\n\n    /// @notice Emitted when the proposed market risk weight is insufficient/excessive\n    error Perpetual_RiskWeightInvalid(uint256 riskWeight);\n\n    /// @notice Emitted when a token balance of the market is lte 1\n    error Perpetual_MarketBalanceTooLow();\n\n    /// @notice Emitted when the liquidity provider has an open position\n    error Perpetual_LPOpenPosition();\n\n    /// @notice Emitted when proposed amount is greater than position size\n    error Perpetual_ProposedAmountExceedsPositionSize();\n\n    /// @notice Emitted when proposed amount is greater than maxVQuoteAmount\n    error Perpetual_ProposedAmountExceedsMaxMarketPrice();\n\n    /// @notice Emitted when the max tvl is reached\n    error Perpetual_MaxLiquidityProvided();\n\n    /// @notice Emitted when the position exceeds the max position size\n    error Perpetual_MaxPositionSize();\n\n    /// @notice Emitted when the user attempts provide liquidity with skewed ratios\n    error Perpetual_LpAmountDeviation();\n\n    /// @notice Emitted when the user attempts remove liquidity too early\n    error Perpetual_LockPeriodNotReached(uint256 withdrawTime);\n\n    /* ****************** */\n    /*     Events         */\n    /* ****************** */\n\n    /// @notice Emitted when TWAP is updated\n    /// @param newOracleTwap Latest oracle Time-weighted-average-price\n    /// @param newMarketTwap Latest market Time-weighted-average-price\n    event TwapUpdated(int256 newOracleTwap, int256 newMarketTwap);\n\n    /// @notice Emitted when funding rate is updated\n    /// @param cumulativeFundingRate Cumulative sum of all funding rate updates\n    /// @param fundingRate Latest fundingRate update\n    event FundingRateUpdated(int256 cumulativeFundingRate, int256 fundingRate);\n\n    /// @notice Emitted when swap with cryptoswap pool fails\n    /// @param errorMessage Return error message\n    event Log(string errorMessage);\n\n    /// @notice Emitted when (base) dust is generated\n    /// @param vBaseAmount Amount of dust\n    event DustGenerated(uint256 vBaseAmount);\n\n    /// @notice Emitted when parameters are updated\n    event PerpetualParametersChanged(\n        uint256 newRiskWeight,\n        uint256 newMaxLiquidityProvided,\n        uint256 newTwapFrequency,\n        int256 newSensitivity,\n        uint256 newMaxBlockTradeAmount,\n        int256 newInsuranceFee,\n        int256 newLpDebtCoef,\n        uint256 lockPeriod\n    );\n\n    /* ****************** */\n    /*     Viewer         */\n    /* ****************** */\n\n    function market() external view returns (ICryptoSwap);\n\n    function vBase() external view returns (IVBase);\n\n    function vQuote() external view returns (IVQuote);\n\n    function clearingHouse() external view returns (IClearingHouse);\n\n    function curveCryptoViews() external view returns (ICurveCryptoViews);\n\n    function maxLiquidityProvided() external view returns (uint256);\n\n    function riskWeight() external view returns (uint256);\n\n    function twapFrequency() external view returns (uint256);\n\n    function sensitivity() external view returns (int256);\n\n    function maxBlockTradeAmount() external view returns (uint256);\n\n    function maxPosition() external view returns (uint256);\n\n    function insuranceFee() external view returns (int256);\n\n    function lpDebtCoef() external view returns (int256);\n\n    function lockPeriod() external view returns (uint256);\n\n    function oracleTwap() external view returns (int128);\n\n    function marketTwap() external view returns (int128);\n\n    function getTraderPosition(address account) external view returns (LibPerpetual.TraderPosition memory);\n\n    function getLpPositionAfterWithdrawal(address account) external view returns (LibPerpetual.TraderPosition memory);\n\n    function getLpLiquidity(address account) external view returns (uint256);\n\n    function getLpPosition(address account) external view returns (LibPerpetual.LiquidityProviderPosition memory);\n\n    function getGlobalPosition() external view returns (LibPerpetual.GlobalPosition memory);\n\n    function getTraderUnrealizedPnL(address account) external view returns (int256);\n\n    function getTraderFundingPayments(address account) external view returns (int256);\n\n    function getLpUnrealizedPnL(address account) external view returns (int256);\n\n    function getLpFundingPayments(address account) external view returns (int256);\n\n    function getLpTradingFees(address account) external view returns (uint256);\n\n    function marketPrice() external view returns (uint256);\n\n    function indexPrice() external view returns (int256);\n\n    function getTotalLiquidityProvided() external view returns (uint256);\n\n    function getPendingPnL(address account) external view returns (int256 pnL);\n\n    function getUserDebt(address account) external view returns (int256 debt);\n\n    function isTraderPositionOpen(address account) external view returns (bool);\n\n    function isLpPositionOpen(address account) external view returns (bool);\n\n    function getLpOpenNotional(address account) external view returns (int256);\n\n    /* ************* */\n    /*    Helpers    */\n    /* ************* */\n\n    function removeLiquiditySwap(\n        address user,\n        uint256 liquidityAmountToRemove,\n        uint256[2] calldata minVTokenAmounts,\n        uint256 proposedAmount\n    ) external;\n\n    /* ****************** */\n    /*  State modifying   */\n    /* ****************** */\n\n    function changePosition(\n        address account,\n        uint256 amount,\n        uint256 minAmount,\n        LibPerpetual.Side direction,\n        bool isLiquidation\n    )\n        external\n        returns (\n            int256 openNotional,\n            int256 positionSize,\n            int256 profit,\n            bool isPositionIncreased\n        );\n\n    function provideLiquidity(\n        address account,\n        uint256[2] calldata amounts,\n        uint256 minLpAmount\n    ) external returns (int256 tradingFees);\n\n    function removeLiquidity(\n        address account,\n        uint256 liquidityAmountToRemove,\n        uint256[2] calldata minVTokenAmounts,\n        uint256 proposedAmount,\n        uint256 minAmount,\n        bool isLiquidation\n    )\n        external\n        returns (\n            int256 profit,\n            uint256 reductionRatio,\n            int256 quoteProceeds\n        );\n\n    function settleTrader(address account) external returns (int256 fundingPayments);\n\n    function settleLp(address account) external returns (int256 fundingPayments);\n\n    function pause() external;\n\n    function unpause() external;\n\n    function setParameters(PerpetualParams memory params) external;\n}\n"
    },
    "contracts/interfaces/IInsurance.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\nimport {IClearingHouse} from \"./IClearingHouse.sol\";\n\ninterface IInsurance {\n    /* ****************** */\n    /*     Errors         */\n    /* ****************** */\n\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\n    error Insurance_ZeroAddressConstructor(uint8 paramIndex);\n\n    /// @notice Emitted when the sender is not the vault address\n    error Insurance_SenderNotVault();\n\n    /// @notice Emitted when the sender is not the clearingHouse address\n    error Insurance_SenderNotClearingHouse();\n\n    /// @notice Emitted when the balance of the vault is less than the amount to be settled\n    error Insurance_InsufficientBalance();\n\n    /// @notice Emitted when locked insurance falls below insurance ratio\n    error Insurance_InsufficientInsurance();\n\n    /// @notice Emitted when the proposed clearingHouse address is equal to the zero address\n    error Insurance_ClearingHouseZeroAddress();\n\n    /* ****************** */\n    /*     Events         */\n    /* ****************** */\n\n    /// @notice Emitted when a new ClearingHouse is connected to the issuer\n    /// @param newClearingHouse New ClearingHouse contract address\n    event ClearingHouseChanged(IClearingHouse newClearingHouse);\n\n    /// @notice Emitted when some insurance reserves are withdrawn by governance\n    /// @param amount Amount of insurance reserves withdrawn. 18 decimals\n    event InsuranceRemoved(uint256 amount);\n\n    /// @notice Emitted when the system debt is updated, upwards or downwards\n    /// @param newSystemDebt New amount of system debt. 18 decimals (accounted for in UA)\n    event SystemDebtChanged(uint256 newSystemDebt);\n\n    /* ****************** */\n    /*     Viewer         */\n    /* ****************** */\n\n    /* ****************** */\n    /*  State modifying   */\n    /* ****************** */\n\n    function fundInsurance(uint256 amount) external;\n\n    function settleDebt(uint256 amount) external;\n\n    function removeInsurance(uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// interfaces\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IInsurance} from \"./IInsurance.sol\";\nimport {IOracle} from \"./IOracle.sol\";\nimport {IClearingHouse} from \"./IClearingHouse.sol\";\n\ninterface IVault {\n    struct Collateral {\n        IERC20Metadata asset;\n        uint256 weight;\n        uint8 decimals;\n        uint256 currentAmount;\n        uint256 maxAmount;\n    }\n\n    /* ****************** */\n    /*     Errors         */\n    /* ****************** */\n\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\n    error Vault_ZeroAddressConstructor(uint8 paramIndex);\n\n    /// @notice Emitted when user tries to withdraw collateral while having a UA debt\n    error Vault_UADebt();\n\n    /// @notice Emitted when the sender is not the clearing house\n    error Vault_SenderNotClearingHouse();\n\n    /// @notice Emitted when the sender is not the clearing house, nor the insurance\n    error Vault_SenderNotClearingHouseNorInsurance();\n\n    /// @notice Emitted when a user attempts to use a token which is not whitelisted as collateral\n    error Vault_UnsupportedCollateral();\n\n    /// @notice Emitted when owner tries to whitelist a collateral already whitelisted\n    error Vault_CollateralAlreadyWhiteListed();\n\n    /// @notice Emitted when a user attempts to withdraw with a reduction ratio above 1e18\n    error Vault_WithdrawReductionRatioTooHigh();\n\n    /// @notice Emitted when a user attempts to withdraw more than their balance\n    error Vault_WithdrawExcessiveAmount();\n\n    /// @notice Emitted when the proposed clearingHouse address is equal to the zero address\n    error Vault_ClearingHouseZeroAddress();\n\n    /// @notice Emitted when the proposed insurance address is equal to the zero address\n    error Vault_InsuranceZeroAddress();\n\n    /// @notice Emitted when the proposed oracle address is equal to the zero address\n    error Vault_OracleZeroAddress();\n\n    /// @notice Emitted when the proposed collateral weight is under the limit\n    error Vault_InsufficientCollateralWeight();\n\n    /// @notice Emitted when the proposed collateral weight is above the limit\n    error Vault_ExcessiveCollateralWeight();\n\n    /// @notice Emitted when a user attempts to withdraw more collateral than available in vault\n    error Vault_InsufficientBalance();\n\n    /// @notice Emitted when a user attempts to withdraw more collateral than available in vault\n    error Vault_MaxCollateralAmountExceeded();\n\n    /* ****************** */\n    /*     Events         */\n    /* ****************** */\n\n    /// @notice Emitted when collateral is deposited into the vault\n    /// @param user User who deposited collateral\n    /// @param asset Token to be used for the collateral\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\n    event Deposit(address indexed user, address indexed asset, uint256 amount);\n\n    /// @notice Emitted when collateral is withdrawn from the vault\n    /// @param user User who deposited collateral\n    /// @param asset Token to be used for the collateral\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\n    event Withdraw(address indexed user, address indexed asset, uint256 amount);\n\n    /// @notice Emitted when bad debt is settled for by the insurance reserve\n    /// @param beneficiary Beneficiary of the insurance payment\n    /// @param amount Amount of bad insurance requested\n    event TraderBadDebtGenerated(address beneficiary, uint256 amount);\n\n    /// @notice Emitted when the ClearingHouse address is updated\n    /// @param newClearingHouse New ClearingHouse contract address\n    event ClearingHouseChanged(IClearingHouse newClearingHouse);\n\n    /// @notice Emitted when the Insurance address is updated\n    /// @param newInsurance New Insurance contract address\n    event InsuranceChanged(IInsurance newInsurance);\n\n    /// @notice Emitted when the Oracle address is updated\n    /// @param newOracle New Oracle contract address\n    event OracleChanged(IOracle newOracle);\n\n    /// @notice Emitted when a new collateral is added to the Vault\n    /// @param asset Asset added as collateral\n    /// @param weight Volatility measure of the asset\n    /// @param maxAmount weight for the collateral\n    event CollateralAdded(IERC20Metadata asset, uint256 weight, uint256 maxAmount);\n\n    /// @notice Emitted when a collateral weight is updated\n    /// @param asset Asset targeted by the change\n    /// @param newWeight New volatility measure for the collateral\n    event CollateralWeightChanged(IERC20Metadata asset, uint256 newWeight);\n\n    /// @notice Emitted when a collateral max amount is updated\n    /// @param asset Asset targeted by the change\n    /// @param newMaxAmount New max amount for the collateral\n    event CollateralMaxAmountChanged(IERC20Metadata asset, uint256 newMaxAmount);\n\n    /* ****************** */\n    /*     Viewer         */\n    /* ****************** */\n    function insurance() external view returns (IInsurance);\n\n    function oracle() external view returns (IOracle);\n\n    function clearingHouse() external view returns (IClearingHouse);\n\n    // slither-disable-next-line naming-convention\n    function UA() external view returns (IERC20Metadata);\n\n    function tokenToCollateralIdx(IERC20Metadata token) external view returns (uint256);\n\n    function getTotalValueLocked() external view returns (int256);\n\n    function getWhiteListedCollateral(uint256 idx) external view returns (Collateral memory);\n\n    function getNumberOfCollaterals() external view returns (uint256);\n\n    function getReserveValue(address trader, bool isDiscounted) external view returns (int256);\n\n    function getBalance(address user, uint256 tokenIdx) external view returns (int256);\n\n    /* ****************** */\n    /*  State modifying   */\n    /* ****************** */\n\n    function deposit(\n        address user,\n        uint256 amount,\n        IERC20Metadata token\n    ) external;\n\n    function settlePnL(address user, int256 amount) external;\n\n    function withdraw(\n        address user,\n        uint256 amount,\n        IERC20Metadata token\n    ) external;\n\n    function withdrawAll(address user, IERC20Metadata withdrawToken) external;\n\n    function settleLiquidationOnCollaterals(address liquidator, address liquidatee) external;\n\n    function transferUa(address user, uint256 amount) external;\n\n    /* ****************** */\n    /*     Governance     */\n    /* ****************** */\n\n    function setClearingHouse(IClearingHouse newClearingHouse) external;\n\n    function setInsurance(IInsurance newInsurance) external;\n\n    function setOracle(IOracle newOracle) external;\n\n    function addWhiteListedCollateral(\n        IERC20Metadata asset,\n        uint256 weight,\n        uint256 maxAmount\n    ) external;\n\n    function changeCollateralWeight(IERC20Metadata asset, uint256 newWeight) external;\n\n    function changeCollateralMaxAmount(IERC20Metadata asset, uint256 newMaxAmount) external;\n}\n"
    },
    "contracts/interfaces/ICryptoSwap.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n/// @dev Contract https://github.com/curvefi/curve-crypto-contract/blob/master/deployment-logs/2021-11-01.%20EURS%20on%20mainnet/CryptoSwap.vy\ninterface ICryptoSwap {\n    function get_virtual_price() external view returns (uint256);\n\n    function price_oracle() external view returns (uint256);\n\n    function mid_fee() external view returns (uint256);\n\n    function out_fee() external view returns (uint256);\n\n    function admin_fee() external view returns (uint256);\n\n    function A() external view returns (uint256);\n\n    function gamma() external view returns (uint256);\n\n    function price_scale() external view returns (uint256);\n\n    function balances(uint256 i) external view returns (uint256);\n\n    function D() external view returns (uint256);\n\n    function fee_calc(uint256[2] memory x) external view returns (uint256);\n\n    function calc_token_fee(uint256[2] memory amounts, uint256[2] memory xp) external view returns (uint256);\n\n    function future_A_gamma_time() external view returns (uint256);\n\n    // Swap token i to j with amount dx and min amount min_dy\n    function exchange(\n        uint256 i,\n        uint256 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external returns (uint256);\n\n    function get_dy(\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external returns (uint256); // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\n\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external; // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\n\n    function last_prices() external view returns (uint256);\n\n    function token() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IStakingContract.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\ninterface IStakingContract {\n    /* ****************** */\n    /*  State modifying   */\n    /* ****************** */\n\n    function updateStakingPosition(uint256 idx, address lp) external;\n}\n"
    },
    "contracts/lib/LibMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// libraries\nimport {PRBMathUD60x18} from \"prb-math/contracts/PRBMathUD60x18.sol\";\nimport {PRBMathSD59x18} from \"prb-math/contracts/PRBMathSD59x18.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {SignedMath} from \"@openzeppelin/contracts/utils/math/SignedMath.sol\";\n\n/*\n * To be used if `b` decimals make `b` larger than what it would be otherwise.\n * Especially useful for fixed point numbers, i.e. a way to represent decimal\n * values without using decimals. E.g. 25e2 with 3 decimals represents 2.5%\n *\n * In our case, we get exchange rates with a 18 decimal precision\n * (Solidity doesn't support decimal values natively).\n * So if we have a EUR positions and want to get the equivalent USD amount\n * we have to do: EUR_position * EUR_USD / 1e18 else the value would be way too high.\n * To move from USD to EUR: (USD_position * 1e18) / EUR_USD else the value would\n * be way too low.\n *\n * In essence,\n * wadMul: a.mul(b).div(WAY)\n * wadDiv: a.mul(WAY).div(b)\n * where `WAY` represents the number of decimals\n */\nlibrary LibMath {\n    /* ****************** */\n    /*   Safe casting     */\n    /* ****************** */\n\n    // int256 -> uint256\n    function toUint256(int256 x) internal pure returns (uint256) {\n        return SafeCast.toUint256(x);\n    }\n\n    // uint256 -> int256\n    function toInt256(uint256 x) internal pure returns (int256) {\n        return SafeCast.toInt256(x);\n    }\n\n    // uint256 -> uint128\n    function toUint128(uint256 x) internal pure returns (uint128) {\n        return SafeCast.toUint128(x);\n    }\n\n    // int256 -> int128\n    function toInt128(int256 x) internal pure returns (int128) {\n        return SafeCast.toInt128(x);\n    }\n\n    // uint256 -> uint64\n    function toUint64(uint256 x) internal pure returns (uint64) {\n        return SafeCast.toUint64(x);\n    }\n\n    /* ********************* */\n    /*   Other operations    */\n    /* ********************* */\n\n    // absolute value\n    function abs(int256 x) internal pure returns (int256) {\n        return PRBMathSD59x18.abs(x);\n    }\n\n    // min value\n    function min(int256 x, int256 y) internal pure returns (int256) {\n        return SignedMath.min(x, y);\n    }\n\n    // int256: wad division / multiplication\n    function wadDiv(int256 x, int256 y) internal pure returns (int256) {\n        return PRBMathSD59x18.div(x, y);\n    }\n\n    function wadMul(int256 x, int256 y) internal pure returns (int256) {\n        return PRBMathSD59x18.mul(x, y);\n    }\n\n    // uint256: wad division / multiplication\n    function wadMul(uint256 x, uint256 y) internal pure returns (uint256) {\n        return PRBMathUD60x18.mul(x, y);\n    }\n\n    function wadDiv(uint256 x, uint256 y) internal pure returns (uint256) {\n        return PRBMathUD60x18.div(x, y);\n    }\n}\n"
    },
    "contracts/lib/LibPerpetual.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// libraries\nimport {LibMath} from \"./LibMath.sol\";\n\nlibrary LibPerpetual {\n    using LibMath for int256;\n    using LibMath for uint256;\n\n    enum Side {\n        // long position\n        Long,\n        // short position\n        Short\n    }\n\n    struct LiquidityProviderPosition {\n        // quote assets or liabilities\n        int128 openNotional;\n        // base assets or liabilities\n        int128 positionSize;\n        // user cumulative funding rate (updated when open/close position)\n        int128 cumFundingRate;\n        // lp token owned (is zero for traders)\n        uint128 liquidityBalance;\n\n        // last time when liquidity was provided\n        uint64 depositTime;\n\n        // total percentage return of liquidity providers index\n        uint128 totalTradingFeesGrowth;\n        // total base fees paid in cryptoswap pool\n        uint128 totalBaseFeesGrowth;\n        // total quote fees paid in cryptoswap pool\n        uint128 totalQuoteFeesGrowth;\n    }\n\n    struct TraderPosition {\n        // quote assets or liabilities\n        int128 openNotional;\n        // base assets or liabilities\n        int128 positionSize;\n        // user cumulative funding rate (updated when open/close position)\n        int128 cumFundingRate;\n    }\n\n    struct GlobalPosition {\n        /* twap state */\n\n        // timestamp of last trade\n        uint64 timeOfLastTrade;\n        // timestamp of last TWAP update\n        uint64 timeOfLastTwapUpdate;\n        // global cumulative funding rate (updated every trade)\n        int128 cumFundingRate;\n\n        // total liquidity provided (in vQuote)\n        uint256 totalQuoteProvided;\n        // current trade amount in the block\n        uint128 currentBlockTradeAmount;\n        /* fees state */\n\n        // total percentage return of liquidity providers index\n        uint128 totalTradingFeesGrowth;\n        // total base fees paid in cryptoswap pool\n        uint128 totalBaseFeesGrowth;\n        // total quote fees paid in cryptoswap pool\n        uint128 totalQuoteFeesGrowth;\n    }\n}\n"
    },
    "contracts/lib/LibReserve.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// libraries\nimport {LibMath} from \"./LibMath.sol\";\n\nlibrary LibReserve {\n    using LibMath for uint256;\n\n    uint8 internal constant PROTOCOL_DECIMALS = 18;\n\n    /// @notice Convert amount from 'tokenDecimals' to 18 decimals precision\n    /// @param tokenDecimals Decimals of the token. 8 decimals uint like in the ERC20 standard\n    /// @param tokenAmount Amount with tokenDecimals precision\n    /// @return wadAmount Scaled amount to the proper number of decimals\n    function tokenToWad(uint8 tokenDecimals, uint256 tokenAmount) internal pure returns (uint256) {\n        if (tokenDecimals == PROTOCOL_DECIMALS) {\n            return tokenAmount;\n        } else if (tokenDecimals < PROTOCOL_DECIMALS) {\n            return tokenAmount * (10**(PROTOCOL_DECIMALS - tokenDecimals));\n        }\n\n        return tokenAmount / (10**(tokenDecimals - PROTOCOL_DECIMALS));\n    }\n\n    /// @notice Convert amount from 'tokenDecimals' decimals to 18 decimals precision\n    /// @param tokenDecimals Decimals of the token. 8 decimals uint like in the ERC20 standard\n    /// @param wadAmount Amount with 18 decimals precision\n    /// @return amount Amount scaled back to the initial amount of decimals\n    function wadToToken(uint8 tokenDecimals, uint256 wadAmount) internal pure returns (uint256) {\n        if (tokenDecimals == PROTOCOL_DECIMALS) {\n            return wadAmount;\n        } else if (tokenDecimals < PROTOCOL_DECIMALS) {\n            return wadAmount / (10**(PROTOCOL_DECIMALS - tokenDecimals));\n        }\n\n        return wadAmount * 10**(tokenDecimals - PROTOCOL_DECIMALS);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IIncreAccessControl.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\n\ninterface IIncreAccessControl is IAccessControl {\n    /* ****************** */\n    /*     Events         */\n    /* ****************** */\n\n    /* ****************** */\n    /*     Viewer         */\n    /* ****************** */\n\n    function isGovernor(address account) external view returns (bool);\n\n    function isManager(address account) external view returns (bool);\n\n    /* ****************** */\n    /*  State modifying   */\n    /* ****************** */\n\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IVBase.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// interfaces\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport {IVirtualToken} from \"../interfaces/IVirtualToken.sol\";\n\ninterface IVBase is IVirtualToken {\n    /* ****************** */\n    /*     Events         */\n    /* ****************** */\n\n    /// @notice Emitted when oracle heart beat is updated\n    /// @param newHeartBeat New heart beat value\n    event HeartBeatUpdated(uint256 newHeartBeat);\n\n    /// @notice Emitted when sequencer uptime feed is updated\n    /// @param newSequencerUptimeFeed New sequencer uptime feed\n    event SequencerUptimeFeedUpdated(AggregatorV3Interface newSequencerUptimeFeed);\n\n    /// @notice Emitted when grace period is updated\n    /// @param newGracePeriod New grace period\n    event GracePeriodUpdated(uint256 newGracePeriod);\n\n    /* ****************** */\n    /*     Errors         */\n    /* ****************** */\n\n    /// @notice Emitted when the proposed aggregators decimals are less than PRECISION\n    error VBase_InsufficientPrecision();\n\n    /// @notice Emitted when the latest round is incomplete\n    error VBase_InvalidRoundTimestamp();\n\n    /// @notice Emitted when the latest round's price is invalid\n    error VBase_InvalidRoundPrice();\n\n    /// @notice Emitted when the latest round's data is older than the oracle's max refresh time\n    error VBase_DataNotFresh();\n\n    /// @notice Emitted when proposed sequencer uptime feed address is equal to the zero address\n    error VBase_SequencerUptimeFeedZeroAddress();\n\n    /// @notice Emitted when proposed grace period is outside of the bounds\n    error VBase_IncorrectGracePeriod();\n\n    /// @notice Emitted when Zksync sequencer is down\n    error VBase_SequencerDown();\n\n    /// @notice Emitted when Zksync sequencer hasn't been back up for long enough\n    error VBase_GracePeriodNotOver();\n\n    /* ****************** */\n    /*     Viewer         */\n    /* ****************** */\n\n    function getIndexPrice() external view returns (int256);\n\n    function heartBeat() external view returns (uint256);\n\n    function sequencerUptimeFeed() external view returns (AggregatorV3Interface);\n\n    function gracePeriod() external view returns (uint256);\n\n    /* ****************** */\n    /*  State modifying   */\n    /* ****************** */\n\n    function setHeartBeat(uint256 newHeartBeat) external;\n\n    function setSequencerUptimeFeed(AggregatorV3Interface newSequencerUptimeFeed) external;\n\n    function setGracePeriod(uint256 newGracePeriod) external;\n}\n"
    },
    "contracts/interfaces/IVQuote.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// interfaces\nimport {IVirtualToken} from \"../interfaces/IVirtualToken.sol\";\n\ninterface IVQuote is IVirtualToken {}\n"
    },
    "contracts/interfaces/ICurveCryptoViews.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\nimport {ICryptoSwap} from \"./ICryptoSwap.sol\";\nimport {IMath} from \"./IMath.sol\";\n\ninterface ICurveCryptoViews {\n    function math() external view returns (IMath);\n\n    function get_dy_ex_fees(\n        ICryptoSwap cryptoSwap,\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function get_dy_fees(\n        ICryptoSwap cryptoSwap,\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function get_dy_fees_perc(\n        ICryptoSwap cryptoSwap,\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function get_dx_ex_fees(\n        ICryptoSwap cryptoSwap,\n        uint256 i,\n        uint256 j,\n        uint256 dy\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// interfaces\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n/// @notice Oracle interface created to ease oracle contract switch\ninterface IOracle {\n    struct AssetOracle {\n        uint24 heartBeat;\n        AggregatorV3Interface aggregator; // aggregator of the ERC20 token for ERC4626 tokens\n        bool isVaultAsset;\n        int256 fixedPrice;\n    }\n\n    /* ****************** */\n    /*     Events         */\n    /* ****************** */\n\n    /// @notice Emitted when oracle heart beat is added or updated\n    /// @param asset Asset that got linked to an oracle\n    /// @param aggregator Chainlink aggregator used as the asset oracle\n    /// @param isVault True if the asset is a ERC-4626 vault asset\n    event OracleUpdated(address asset, AggregatorV3Interface aggregator, bool isVault);\n\n    /// @notice Emitted when an asset got a fixed price when requesting an oracle\n    /// @param asset Asset which got a fixed price\n    /// @param fixedPrice Fixed price that the asset got\n    event AssetGotFixedPrice(address asset, int256 fixedPrice);\n\n    /// @notice Emitted when oracle heart beat is updated\n    /// @param asset Asset whose heartBeat is updated\n    /// @param newHeartBeat New heart beat value\n    event HeartBeatUpdated(address asset, uint24 newHeartBeat);\n\n    /// @notice Emitted when sequencer uptime feed is updated\n    /// @param newSequencerUptimeFeed New sequencer uptime feed\n    event SequencerUptimeFeedUpdated(AggregatorV3Interface newSequencerUptimeFeed);\n\n    /// @notice Emitted when grace period is updated\n    /// @param newGracePeriod New grace period\n    event GracePeriodUpdated(uint256 newGracePeriod);\n\n    /* ****************** */\n    /*     Errors         */\n    /* ****************** */\n\n    /// @notice Emitted when the latest round is incomplete\n    error Oracle_InvalidRoundTimestamp();\n\n    /// @notice Emitted when the latest round's price is invalid\n    error Oracle_InvalidRoundPrice();\n\n    /// @notice Emitted when the latest round's data is older than the oracle's max refresh time\n    error Oracle_DataNotFresh();\n\n    /// @notice Emitted when the proposed asset address is equal to the zero address\n    error Oracle_AssetZeroAddress();\n\n    /// @notice Emitted when the proposed aggregator address is equal to the zero address\n    error Oracle_AggregatorZeroAddress();\n\n    /// @notice Emitted when the proposed sequencer uptime feed address is equal to the zero address\n    error Oracle_SequencerUptimeFeedZeroAddress();\n\n    /// @notice Emitted when owner tries to set fixed price to an unsupported asset\n    error Oracle_UnsupportedAsset();\n\n    /// @notice Emitted when Zksync sequencer is down\n    error Oracle_SequencerDown();\n\n    /// @notice Emitted when Zksync sequencer hasn't been back up for long enough\n    error Oracle_GracePeriodNotOver();\n\n    /// @notice Emitted when proposed grace period doesn't fit in the defined bounds\n    error Oracle_IncorrectGracePeriod();\n\n    /* ****************** */\n    /*     Viewer         */\n    /* ****************** */\n\n    function gracePeriod() external view returns (uint256);\n\n    function sequencerUptimeFeed() external view returns (AggregatorV3Interface);\n\n    function getPrice(address asset, int256 balance) external view returns (int256);\n\n    /* ****************** */\n    /*  State modifying   */\n    /* ****************** */\n\n    function setOracle(\n        address asset,\n        AggregatorV3Interface aggregator,\n        uint24 heartBeat,\n        bool isVault\n    ) external;\n\n    function setFixedPrice(address asset, int256 fixedPrice) external;\n\n    function setHeartBeat(address asset, uint24 newHeartBeat) external;\n\n    function setSequencerUptimeFeed(AggregatorV3Interface newSequencerUptimeFeed) external;\n\n    function setGracePeriod(uint256 newGracePeriod) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "prb-math/contracts/PRBMathUD60x18.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\nimport \"./PRBMath.sol\";\n\n/// @title PRBMathUD60x18\n/// @author Paul Razvan Berg\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\n/// maximum values permitted by the Solidity type uint256.\nlibrary PRBMathUD60x18 {\n    /// @dev Half the SCALE number.\n    uint256 internal constant HALF_SCALE = 5e17;\n\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\n    uint256 internal constant LOG2_E = 1_442695040888963407;\n\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_UD60x18 =\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\n\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_WHOLE_UD60x18 =\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // The operations can never overflow.\n        unchecked {\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\n        }\n    }\n\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function ceil(uint256 x) internal pure returns (uint256 result) {\n        if (x > MAX_WHOLE_UD60x18) {\n            revert PRBMathUD60x18__CeilOverflow(x);\n        }\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"SCALE - remainder\" but faster.\n            let delta := sub(SCALE, remainder)\n\n            // Equivalent to \"x + delta * (remainder > 0 ? 1 : 0)\" but faster.\n            result := add(x, mul(delta, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\n    ///\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    ///\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDiv(x, SCALE, y);\n    }\n\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\n    function e() internal pure returns (uint256 result) {\n        result = 2_718281828459045235;\n    }\n\n    /// @notice Calculates the natural exponent of x.\n    ///\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    /// - x must be less than 133.084258667509499441.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp(uint256 x) internal pure returns (uint256 result) {\n        // Without this check, the value passed to \"exp2\" would be greater than 192.\n        if (x >= 133_084258667509499441) {\n            revert PRBMathUD60x18__ExpInputTooBig(x);\n        }\n\n        // Do the fixed-point multiplication inline to save gas.\n        unchecked {\n            uint256 doubleScaleProduct = x * LOG2_E;\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\n        }\n    }\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    ///\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\n    ///\n    /// Requirements:\n    /// - x must be 192 or less.\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\n        if (x >= 192e18) {\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\n        }\n\n        unchecked {\n            // Convert x to the 192.64-bit fixed-point format.\n            uint256 x192x64 = (x << 64) / SCALE;\n\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\n            result = PRBMath.exp2(x192x64);\n        }\n    }\n\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function floor(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"x - remainder * (remainder > 0 ? 1 : 0)\" but faster.\n            result := sub(x, mul(remainder, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Yields the excess beyond the floor of x.\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\n    function frac(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            result := mod(x, SCALE)\n        }\n    }\n\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\n    ///\n    /// @dev Requirements:\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\n    ///\n    /// @param x The basic integer to convert.\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__FromUintOverflow(x);\n            }\n            result = x * SCALE;\n        }\n    }\n\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\n    ///\n    /// @dev Requirements:\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\n    ///\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        unchecked {\n            // Checking for overflow this way is faster than letting Solidity do it.\n            uint256 xy = x * y;\n            if (xy / x != y) {\n                revert PRBMathUD60x18__GmOverflow(x, y);\n            }\n\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\n            // during multiplication. See the comments within the \"sqrt\" function.\n            result = PRBMath.sqrt(xy);\n        }\n    }\n\n    /// @notice Calculates 1 / x, rounding toward zero.\n    ///\n    /// @dev Requirements:\n    /// - x cannot be zero.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\n    function inv(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // 1e36 is SCALE * SCALE.\n            result = 1e36 / x;\n        }\n    }\n\n    /// @notice Calculates the natural logarithm of x.\n    ///\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\n    function ln(uint256 x) internal pure returns (uint256 result) {\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\n        // can return is 196205294292027477728.\n        unchecked {\n            result = (log2(x) * SCALE) / LOG2_E;\n        }\n    }\n\n    /// @notice Calculates the common logarithm of x.\n    ///\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log10(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n\n        // Note that the \"mul\" in this block is the assembly multiplication operation, not the \"mul\" function defined\n        // in this contract.\n        // prettier-ignore\n        assembly {\n            switch x\n            case 1 { result := mul(SCALE, sub(0, 18)) }\n            case 10 { result := mul(SCALE, sub(1, 18)) }\n            case 100 { result := mul(SCALE, sub(2, 18)) }\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\n            case 1000000000000000000 { result := 0 }\n            case 10000000000000000000 { result := SCALE }\n            case 100000000000000000000 { result := mul(SCALE, 2) }\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\n            default {\n                result := MAX_UD60x18\n            }\n        }\n\n        if (result == MAX_UD60x18) {\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\n            unchecked {\n                result = (log2(x) * SCALE) / 3_321928094887362347;\n            }\n        }\n    }\n\n    /// @notice Calculates the binary logarithm of x.\n    ///\n    /// @dev Based on the iterative approximation algorithm.\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\n    ///\n    /// Requirements:\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\n    ///\n    /// Caveats:\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log2(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n        unchecked {\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\n\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\n            // because n is maximum 255 and SCALE is 1e18.\n            result = n * SCALE;\n\n            // This is y = x * 2^(-n).\n            uint256 y = x >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y == SCALE) {\n                return result;\n            }\n\n            // Calculate the fractional part via the iterative approximation.\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\n                y = (y * y) / SCALE;\n\n                // Is y^2 > 2 and so in the range [2,4)?\n                if (y >= 2 * SCALE) {\n                    // Add the 2^(-m) factor to the logarithm.\n                    result += delta;\n\n                    // Corresponds to z/2 on Wikipedia.\n                    y >>= 1;\n                }\n            }\n        }\n    }\n\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\n    /// fixed-point number.\n    /// @dev See the documentation for the \"PRBMath.mulDivFixedPoint\" function.\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDivFixedPoint(x, y);\n    }\n\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\n    function pi() internal pure returns (uint256 result) {\n        result = 3_141592653589793238;\n    }\n\n    /// @notice Raises x to the power of y.\n    ///\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\n    ///\n    /// Requirements:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    ///\n    /// Caveats:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            result = y == 0 ? SCALE : uint256(0);\n        } else {\n            result = exp2(mul(log2(x), y));\n        }\n    }\n\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\n    /// famous algorithm \"exponentiation by squaring\".\n    ///\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    ///\n    /// Requirements:\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// Caveats:\n    /// - All from \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The exponent as an uint256.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // Calculate the first iteration of the loop in advance.\n        result = y & 1 > 0 ? x : SCALE;\n\n        // Equivalent to \"for(y /= 2; y > 0; y /= 2)\" but faster.\n        for (y >>= 1; y > 0; y >>= 1) {\n            x = PRBMath.mulDivFixedPoint(x, x);\n\n            // Equivalent to \"y % 2 == 1\" but faster.\n            if (y & 1 > 0) {\n                result = PRBMath.mulDivFixedPoint(result, x);\n            }\n        }\n    }\n\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\n    function scale() internal pure returns (uint256 result) {\n        result = SCALE;\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Requirements:\n    /// - x must be less than MAX_UD60x18 / SCALE.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__SqrtOverflow(x);\n            }\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\n            result = PRBMath.sqrt(x * SCALE);\n        }\n    }\n\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\n    /// @return result The same number in basic integer form.\n    function toUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            result = x / SCALE;\n        }\n    }\n}\n"
    },
    "prb-math/contracts/PRBMathSD59x18.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\nimport \"./PRBMath.sol\";\n\n/// @title PRBMathSD59x18\n/// @author Paul Razvan Berg\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\nlibrary PRBMathSD59x18 {\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\n    int256 internal constant LOG2_E = 1_442695040888963407;\n\n    /// @dev Half the SCALE number.\n    int256 internal constant HALF_SCALE = 5e17;\n\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MAX_SD59x18 =\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\n\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MAX_WHOLE_SD59x18 =\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\n\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MIN_SD59x18 =\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\n\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MIN_WHOLE_SD59x18 =\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\n\n    /// @dev How many trailing decimals can be represented.\n    int256 internal constant SCALE = 1e18;\n\n    /// INTERNAL FUNCTIONS ///\n\n    /// @notice Calculate the absolute value of x.\n    ///\n    /// @dev Requirements:\n    /// - x must be greater than MIN_SD59x18.\n    ///\n    /// @param x The number to calculate the absolute value for.\n    /// @param result The absolute value of x.\n    function abs(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            if (x == MIN_SD59x18) {\n                revert PRBMathSD59x18__AbsInputTooSmall();\n            }\n            result = x < 0 ? -x : x;\n        }\n    }\n\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\n        // The operations can never overflow.\n        unchecked {\n            int256 sum = (x >> 1) + (y >> 1);\n            if (sum < 0) {\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\n                // right rounds down to infinity.\n                assembly {\n                    result := add(sum, and(or(x, y), 1))\n                }\n            } else {\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\n                // remainder gets truncated twice.\n                result = sum + (x & y & 1);\n            }\n        }\n    }\n\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\n    function ceil(int256 x) internal pure returns (int256 result) {\n        if (x > MAX_WHOLE_SD59x18) {\n            revert PRBMathSD59x18__CeilOverflow(x);\n        }\n        unchecked {\n            int256 remainder = x % SCALE;\n            if (remainder == 0) {\n                result = x;\n            } else {\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\n                result = x - remainder;\n                if (x > 0) {\n                    result += SCALE;\n                }\n            }\n        }\n    }\n\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\n    ///\n    /// @dev Variant of \"mulDiv\" that works with signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - All from \"PRBMath.mulDiv\".\n    /// - None of the inputs can be MIN_SD59x18.\n    /// - The denominator cannot be zero.\n    /// - The result must fit within int256.\n    ///\n    /// Caveats:\n    /// - All from \"PRBMath.mulDiv\".\n    ///\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\n            revert PRBMathSD59x18__DivInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x and y.\n        uint256 ax;\n        uint256 ay;\n        unchecked {\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n        }\n\n        // Compute the absolute value of (x*SCALE)÷y. The result must fit within int256.\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\n        if (rAbs > uint256(MAX_SD59x18)) {\n            revert PRBMathSD59x18__DivOverflow(rAbs);\n        }\n\n        // Get the signs of x and y.\n        uint256 sx;\n        uint256 sy;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n        }\n\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\n        // should be positive. Otherwise, it should be negative.\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\n    function e() internal pure returns (int256 result) {\n        result = 2_718281828459045235;\n    }\n\n    /// @notice Calculates the natural exponent of x.\n    ///\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    /// - x must be less than 133.084258667509499441.\n    ///\n    /// Caveats:\n    /// - All from \"exp2\".\n    /// - For any x less than -41.446531673892822322, the result is zero.\n    ///\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function exp(int256 x) internal pure returns (int256 result) {\n        // Without this check, the value passed to \"exp2\" would be less than -59.794705707972522261.\n        if (x < -41_446531673892822322) {\n            return 0;\n        }\n\n        // Without this check, the value passed to \"exp2\" would be greater than 192.\n        if (x >= 133_084258667509499441) {\n            revert PRBMathSD59x18__ExpInputTooBig(x);\n        }\n\n        // Do the fixed-point multiplication inline to save gas.\n        unchecked {\n            int256 doubleScaleProduct = x * LOG2_E;\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\n        }\n    }\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    ///\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\n    ///\n    /// Requirements:\n    /// - x must be 192 or less.\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - For any x less than -59.794705707972522261, the result is zero.\n    ///\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function exp2(int256 x) internal pure returns (int256 result) {\n        // This works because 2^(-x) = 1/2^x.\n        if (x < 0) {\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\n            if (x < -59_794705707972522261) {\n                return 0;\n            }\n\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\n            unchecked {\n                result = 1e36 / exp2(-x);\n            }\n        } else {\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\n            if (x >= 192e18) {\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\n            }\n\n            unchecked {\n                // Convert x to the 192.64-bit fixed-point format.\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\n\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\n                result = int256(PRBMath.exp2(x192x64));\n            }\n        }\n    }\n\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\n    function floor(int256 x) internal pure returns (int256 result) {\n        if (x < MIN_WHOLE_SD59x18) {\n            revert PRBMathSD59x18__FloorUnderflow(x);\n        }\n        unchecked {\n            int256 remainder = x % SCALE;\n            if (remainder == 0) {\n                result = x;\n            } else {\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\n                result = x - remainder;\n                if (x < 0) {\n                    result -= SCALE;\n                }\n            }\n        }\n    }\n\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\n    /// of the radix point for negative numbers.\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\n    function frac(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            result = x % SCALE;\n        }\n    }\n\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\n    ///\n    /// @dev Requirements:\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\n    ///\n    /// @param x The basic integer to convert.\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\n    function fromInt(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            if (x < MIN_SD59x18 / SCALE) {\n                revert PRBMathSD59x18__FromIntUnderflow(x);\n            }\n            if (x > MAX_SD59x18 / SCALE) {\n                revert PRBMathSD59x18__FromIntOverflow(x);\n            }\n            result = x * SCALE;\n        }\n    }\n\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\n    ///\n    /// @dev Requirements:\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\n    /// - x * y cannot be negative.\n    ///\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        unchecked {\n            // Checking for overflow this way is faster than letting Solidity do it.\n            int256 xy = x * y;\n            if (xy / x != y) {\n                revert PRBMathSD59x18__GmOverflow(x, y);\n            }\n\n            // The product cannot be negative.\n            if (xy < 0) {\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\n            }\n\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\n            // during multiplication. See the comments within the \"sqrt\" function.\n            result = int256(PRBMath.sqrt(uint256(xy)));\n        }\n    }\n\n    /// @notice Calculates 1 / x, rounding toward zero.\n    ///\n    /// @dev Requirements:\n    /// - x cannot be zero.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\n    function inv(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            // 1e36 is SCALE * SCALE.\n            result = 1e36 / x;\n        }\n    }\n\n    /// @notice Calculates the natural logarithm of x.\n    ///\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\n    function ln(int256 x) internal pure returns (int256 result) {\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\n        // can return is 195205294292027477728.\n        unchecked {\n            result = (log2(x) * SCALE) / LOG2_E;\n        }\n    }\n\n    /// @notice Calculates the common logarithm of x.\n    ///\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\n    function log10(int256 x) internal pure returns (int256 result) {\n        if (x <= 0) {\n            revert PRBMathSD59x18__LogInputTooSmall(x);\n        }\n\n        // Note that the \"mul\" in this block is the assembly mul operation, not the \"mul\" function defined in this contract.\n        // prettier-ignore\n        assembly {\n            switch x\n            case 1 { result := mul(SCALE, sub(0, 18)) }\n            case 10 { result := mul(SCALE, sub(1, 18)) }\n            case 100 { result := mul(SCALE, sub(2, 18)) }\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\n            case 1000000000000000000 { result := 0 }\n            case 10000000000000000000 { result := SCALE }\n            case 100000000000000000000 { result := mul(SCALE, 2) }\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\n            default {\n                result := MAX_SD59x18\n            }\n        }\n\n        if (result == MAX_SD59x18) {\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\n            unchecked {\n                result = (log2(x) * SCALE) / 3_321928094887362347;\n            }\n        }\n    }\n\n    /// @notice Calculates the binary logarithm of x.\n    ///\n    /// @dev Based on the iterative approximation algorithm.\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\n    ///\n    /// Requirements:\n    /// - x must be greater than zero.\n    ///\n    /// Caveats:\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\n    function log2(int256 x) internal pure returns (int256 result) {\n        if (x <= 0) {\n            revert PRBMathSD59x18__LogInputTooSmall(x);\n        }\n        unchecked {\n            // This works because log2(x) = -log2(1/x).\n            int256 sign;\n            if (x >= SCALE) {\n                sign = 1;\n            } else {\n                sign = -1;\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\n                assembly {\n                    x := div(1000000000000000000000000000000000000, x)\n                }\n            }\n\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\n\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\n            result = int256(n) * SCALE;\n\n            // This is y = x * 2^(-n).\n            int256 y = x >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y == SCALE) {\n                return result * sign;\n            }\n\n            // Calculate the fractional part via the iterative approximation.\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\n                y = (y * y) / SCALE;\n\n                // Is y^2 > 2 and so in the range [2,4)?\n                if (y >= 2 * SCALE) {\n                    // Add the 2^(-m) factor to the logarithm.\n                    result += delta;\n\n                    // Corresponds to z/2 on Wikipedia.\n                    y >>= 1;\n                }\n            }\n            result *= sign;\n        }\n    }\n\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\n    /// fixed-point number.\n    ///\n    /// @dev Variant of \"mulDiv\" that works with signed numbers and employs constant folding, i.e. the denominator is\n    /// always 1e18.\n    ///\n    /// Requirements:\n    /// - All from \"PRBMath.mulDivFixedPoint\".\n    /// - None of the inputs can be MIN_SD59x18\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    ///\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\n            revert PRBMathSD59x18__MulInputTooSmall();\n        }\n\n        unchecked {\n            uint256 ax;\n            uint256 ay;\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\n            if (rAbs > uint256(MAX_SD59x18)) {\n                revert PRBMathSD59x18__MulOverflow(rAbs);\n            }\n\n            uint256 sx;\n            uint256 sy;\n            assembly {\n                sx := sgt(x, sub(0, 1))\n                sy := sgt(y, sub(0, 1))\n            }\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\n        }\n    }\n\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\n    function pi() internal pure returns (int256 result) {\n        result = 3_141592653589793238;\n    }\n\n    /// @notice Raises x to the power of y.\n    ///\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\n    ///\n    /// Requirements:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - z cannot be zero.\n    ///\n    /// Caveats:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == 0) {\n            result = y == 0 ? SCALE : int256(0);\n        } else {\n            result = exp2(mul(log2(x), y));\n        }\n    }\n\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\n    /// famous algorithm \"exponentiation by squaring\".\n    ///\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    ///\n    /// Requirements:\n    /// - All from \"abs\" and \"PRBMath.mulDivFixedPoint\".\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - All from \"PRBMath.mulDivFixedPoint\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\n    /// @param y The exponent as an uint256.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\n        uint256 xAbs = uint256(abs(x));\n\n        // Calculate the first iteration of the loop in advance.\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\n\n        // Equivalent to \"for(y /= 2; y > 0; y /= 2)\" but faster.\n        uint256 yAux = y;\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\n\n            // Equivalent to \"y % 2 == 1\" but faster.\n            if (yAux & 1 > 0) {\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\n            }\n        }\n\n        // The result must fit within the 59.18-decimal fixed-point representation.\n        if (rAbs > uint256(MAX_SD59x18)) {\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\n        }\n\n        // Is the base negative and the exponent an odd number?\n        bool isNegative = x < 0 && y & 1 == 1;\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\n    function scale() internal pure returns (int256 result) {\n        result = SCALE;\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Requirements:\n    /// - x cannot be negative.\n    /// - x must be less than MAX_SD59x18 / SCALE.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\n    /// @return result The result as a signed 59.18-decimal fixed-point .\n    function sqrt(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            if (x < 0) {\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\n            }\n            if (x > MAX_SD59x18 / SCALE) {\n                revert PRBMathSD59x18__SqrtOverflow(x);\n            }\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\n        }\n    }\n\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\n    /// @return result The same number in basic integer form.\n    function toInt(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            result = x / SCALE;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248) {\n        require(value >= type(int248).min && value <= type(int248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return int248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240) {\n        require(value >= type(int240).min && value <= type(int240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return int240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232) {\n        require(value >= type(int232).min && value <= type(int232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return int232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224) {\n        require(value >= type(int224).min && value <= type(int224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return int224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216) {\n        require(value >= type(int216).min && value <= type(int216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return int216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208) {\n        require(value >= type(int208).min && value <= type(int208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return int208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200) {\n        require(value >= type(int200).min && value <= type(int200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return int200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192) {\n        require(value >= type(int192).min && value <= type(int192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return int192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184) {\n        require(value >= type(int184).min && value <= type(int184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return int184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176) {\n        require(value >= type(int176).min && value <= type(int176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return int176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168) {\n        require(value >= type(int168).min && value <= type(int168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return int168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160) {\n        require(value >= type(int160).min && value <= type(int160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return int160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152) {\n        require(value >= type(int152).min && value <= type(int152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return int152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144) {\n        require(value >= type(int144).min && value <= type(int144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return int144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136) {\n        require(value >= type(int136).min && value <= type(int136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return int136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120) {\n        require(value >= type(int120).min && value <= type(int120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return int120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112) {\n        require(value >= type(int112).min && value <= type(int112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return int112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104) {\n        require(value >= type(int104).min && value <= type(int104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return int104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96) {\n        require(value >= type(int96).min && value <= type(int96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return int96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88) {\n        require(value >= type(int88).min && value <= type(int88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return int88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80) {\n        require(value >= type(int80).min && value <= type(int80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return int80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72) {\n        require(value >= type(int72).min && value <= type(int72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return int72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56) {\n        require(value >= type(int56).min && value <= type(int56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return int56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48) {\n        require(value >= type(int48).min && value <= type(int48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return int48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40) {\n        require(value >= type(int40).min && value <= type(int40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return int40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24) {\n        require(value >= type(int24).min && value <= type(int24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return int24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "prb-math/contracts/PRBMath.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\n\n/// @notice Emitted when one of the inputs is type(int256).min.\nerror PRBMath__MulDivSignedInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows int256.\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is MIN_SD59x18.\nerror PRBMathSD59x18__AbsInputTooSmall();\n\n/// @notice Emitted when ceiling a number overflows SD59x18.\nerror PRBMathSD59x18__CeilOverflow(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__DivInputTooSmall();\n\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\n\n/// @notice Emitted when flooring a number underflows SD59x18.\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\n\n/// @notice Emitted when the product of the inputs is negative.\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\n\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\n\n/// @notice Emitted when the input is less than or equal to zero.\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__MulInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is negative.\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\n\n/// @notice Emitted when the calculating the square root overflows SD59x18.\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\n\n/// @notice Emitted when addition overflows UD60x18.\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when ceiling a number overflows UD60x18.\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\n\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when the input is less than 1.\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\n\n/// @notice Emitted when the calculating the square root overflows UD60x18.\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\n\n/// @notice Emitted when subtraction underflows UD60x18.\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\n\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\nlibrary PRBMath {\n    /// STRUCTS ///\n\n    struct SD59x18 {\n        int256 value;\n    }\n\n    struct UD60x18 {\n        uint256 value;\n    }\n\n    /// STORAGE ///\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @dev Largest power of two divisor of SCALE.\n    uint256 internal constant SCALE_LPOTD = 262144;\n\n    /// @dev SCALE inverted mod 2^256.\n    uint256 internal constant SCALE_INVERSE =\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\n\n    /// FUNCTIONS ///\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    /// @dev Has to use 192.64-bit fixed-point numbers.\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // Start from 0.5 in the 192.64-bit fixed-point format.\n            result = 0x800000000000000000000000000000000000000000000000;\n\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\n            if (x & 0x8000000000000000 > 0) {\n                result = (result * 0x16A09E667F3BCC909) >> 64;\n            }\n            if (x & 0x4000000000000000 > 0) {\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\n            }\n            if (x & 0x2000000000000000 > 0) {\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\n            }\n            if (x & 0x1000000000000000 > 0) {\n                result = (result * 0x10B5586CF9890F62A) >> 64;\n            }\n            if (x & 0x800000000000000 > 0) {\n                result = (result * 0x1059B0D31585743AE) >> 64;\n            }\n            if (x & 0x400000000000000 > 0) {\n                result = (result * 0x102C9A3E778060EE7) >> 64;\n            }\n            if (x & 0x200000000000000 > 0) {\n                result = (result * 0x10163DA9FB33356D8) >> 64;\n            }\n            if (x & 0x100000000000000 > 0) {\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\n            }\n            if (x & 0x80000000000000 > 0) {\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\n            }\n            if (x & 0x40000000000000 > 0) {\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\n            }\n            if (x & 0x20000000000000 > 0) {\n                result = (result * 0x100162F3904051FA1) >> 64;\n            }\n            if (x & 0x10000000000000 > 0) {\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\n            }\n            if (x & 0x8000000000000 > 0) {\n                result = (result * 0x100058BA01FB9F96D) >> 64;\n            }\n            if (x & 0x4000000000000 > 0) {\n                result = (result * 0x10002C5CC37DA9492) >> 64;\n            }\n            if (x & 0x2000000000000 > 0) {\n                result = (result * 0x1000162E525EE0547) >> 64;\n            }\n            if (x & 0x1000000000000 > 0) {\n                result = (result * 0x10000B17255775C04) >> 64;\n            }\n            if (x & 0x800000000000 > 0) {\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\n            }\n            if (x & 0x400000000000 > 0) {\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\n            }\n            if (x & 0x200000000000 > 0) {\n                result = (result * 0x10000162E43F4F831) >> 64;\n            }\n            if (x & 0x100000000000 > 0) {\n                result = (result * 0x100000B1721BCFC9A) >> 64;\n            }\n            if (x & 0x80000000000 > 0) {\n                result = (result * 0x10000058B90CF1E6E) >> 64;\n            }\n            if (x & 0x40000000000 > 0) {\n                result = (result * 0x1000002C5C863B73F) >> 64;\n            }\n            if (x & 0x20000000000 > 0) {\n                result = (result * 0x100000162E430E5A2) >> 64;\n            }\n            if (x & 0x10000000000 > 0) {\n                result = (result * 0x1000000B172183551) >> 64;\n            }\n            if (x & 0x8000000000 > 0) {\n                result = (result * 0x100000058B90C0B49) >> 64;\n            }\n            if (x & 0x4000000000 > 0) {\n                result = (result * 0x10000002C5C8601CC) >> 64;\n            }\n            if (x & 0x2000000000 > 0) {\n                result = (result * 0x1000000162E42FFF0) >> 64;\n            }\n            if (x & 0x1000000000 > 0) {\n                result = (result * 0x10000000B17217FBB) >> 64;\n            }\n            if (x & 0x800000000 > 0) {\n                result = (result * 0x1000000058B90BFCE) >> 64;\n            }\n            if (x & 0x400000000 > 0) {\n                result = (result * 0x100000002C5C85FE3) >> 64;\n            }\n            if (x & 0x200000000 > 0) {\n                result = (result * 0x10000000162E42FF1) >> 64;\n            }\n            if (x & 0x100000000 > 0) {\n                result = (result * 0x100000000B17217F8) >> 64;\n            }\n            if (x & 0x80000000 > 0) {\n                result = (result * 0x10000000058B90BFC) >> 64;\n            }\n            if (x & 0x40000000 > 0) {\n                result = (result * 0x1000000002C5C85FE) >> 64;\n            }\n            if (x & 0x20000000 > 0) {\n                result = (result * 0x100000000162E42FF) >> 64;\n            }\n            if (x & 0x10000000 > 0) {\n                result = (result * 0x1000000000B17217F) >> 64;\n            }\n            if (x & 0x8000000 > 0) {\n                result = (result * 0x100000000058B90C0) >> 64;\n            }\n            if (x & 0x4000000 > 0) {\n                result = (result * 0x10000000002C5C860) >> 64;\n            }\n            if (x & 0x2000000 > 0) {\n                result = (result * 0x1000000000162E430) >> 64;\n            }\n            if (x & 0x1000000 > 0) {\n                result = (result * 0x10000000000B17218) >> 64;\n            }\n            if (x & 0x800000 > 0) {\n                result = (result * 0x1000000000058B90C) >> 64;\n            }\n            if (x & 0x400000 > 0) {\n                result = (result * 0x100000000002C5C86) >> 64;\n            }\n            if (x & 0x200000 > 0) {\n                result = (result * 0x10000000000162E43) >> 64;\n            }\n            if (x & 0x100000 > 0) {\n                result = (result * 0x100000000000B1721) >> 64;\n            }\n            if (x & 0x80000 > 0) {\n                result = (result * 0x10000000000058B91) >> 64;\n            }\n            if (x & 0x40000 > 0) {\n                result = (result * 0x1000000000002C5C8) >> 64;\n            }\n            if (x & 0x20000 > 0) {\n                result = (result * 0x100000000000162E4) >> 64;\n            }\n            if (x & 0x10000 > 0) {\n                result = (result * 0x1000000000000B172) >> 64;\n            }\n            if (x & 0x8000 > 0) {\n                result = (result * 0x100000000000058B9) >> 64;\n            }\n            if (x & 0x4000 > 0) {\n                result = (result * 0x10000000000002C5D) >> 64;\n            }\n            if (x & 0x2000 > 0) {\n                result = (result * 0x1000000000000162E) >> 64;\n            }\n            if (x & 0x1000 > 0) {\n                result = (result * 0x10000000000000B17) >> 64;\n            }\n            if (x & 0x800 > 0) {\n                result = (result * 0x1000000000000058C) >> 64;\n            }\n            if (x & 0x400 > 0) {\n                result = (result * 0x100000000000002C6) >> 64;\n            }\n            if (x & 0x200 > 0) {\n                result = (result * 0x10000000000000163) >> 64;\n            }\n            if (x & 0x100 > 0) {\n                result = (result * 0x100000000000000B1) >> 64;\n            }\n            if (x & 0x80 > 0) {\n                result = (result * 0x10000000000000059) >> 64;\n            }\n            if (x & 0x40 > 0) {\n                result = (result * 0x1000000000000002C) >> 64;\n            }\n            if (x & 0x20 > 0) {\n                result = (result * 0x10000000000000016) >> 64;\n            }\n            if (x & 0x10 > 0) {\n                result = (result * 0x1000000000000000B) >> 64;\n            }\n            if (x & 0x8 > 0) {\n                result = (result * 0x10000000000000006) >> 64;\n            }\n            if (x & 0x4 > 0) {\n                result = (result * 0x10000000000000003) >> 64;\n            }\n            if (x & 0x2 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n            if (x & 0x1 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n\n            // We're doing two things at the same time:\n            //\n            //   1. Multiply the result by 2^n + 1, where \"2^n\" is the integer part and the one is added to account for\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\n            //      rather than 192.\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\n            //\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \"ip\" is the integer part \"2^n\".\n            result *= SCALE;\n            result >>= (191 - (x >> 64));\n        }\n    }\n\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\n    /// @dev See the note on msb in the \"Find First Set\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\n    /// @param x The uint256 number for which to find the index of the most significant bit.\n    /// @return msb The index of the most significant bit as an uint256.\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        if (x >= 2**128) {\n            x >>= 128;\n            msb += 128;\n        }\n        if (x >= 2**64) {\n            x >>= 64;\n            msb += 64;\n        }\n        if (x >= 2**32) {\n            x >>= 32;\n            msb += 32;\n        }\n        if (x >= 2**16) {\n            x >>= 16;\n            msb += 16;\n        }\n        if (x >= 2**8) {\n            x >>= 8;\n            msb += 8;\n        }\n        if (x >= 2**4) {\n            x >>= 4;\n            msb += 4;\n        }\n        if (x >= 2**2) {\n            x >>= 2;\n            msb += 2;\n        }\n        if (x >= 2**1) {\n            // No need to shift x any more.\n            msb += 1;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The multiplicand as an uint256.\n    /// @param y The multiplier as an uint256.\n    /// @param denominator The divisor as an uint256.\n    /// @return result The result as an uint256.\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            unchecked {\n                result = prod0 / denominator;\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        if (prod1 >= denominator) {\n            revert PRBMath__MulDivOverflow(prod1, denominator);\n        }\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        unchecked {\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 lpotdod = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by lpotdod.\n                denominator := div(denominator, lpotdod)\n\n                // Divide [prod1 prod0] by lpotdod.\n                prod0 := div(prod0, lpotdod)\n\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * lpotdod;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷1e18) with full precision.\n    ///\n    /// @dev Variant of \"mulDiv\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\n    /// being rounded to 1e-18.  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717.\n    ///\n    /// Requirements:\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\n    ///     1. x * y = type(uint256).max * SCALE\n    ///     2. (x * y) % SCALE >= SCALE / 2\n    ///\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        uint256 prod0;\n        uint256 prod1;\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        if (prod1 >= SCALE) {\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\n        }\n\n        uint256 remainder;\n        uint256 roundUpUnit;\n        assembly {\n            remainder := mulmod(x, y, SCALE)\n            roundUpUnit := gt(remainder, 499999999999999999)\n        }\n\n        if (prod1 == 0) {\n            unchecked {\n                result = (prod0 / SCALE) + roundUpUnit;\n                return result;\n            }\n        }\n\n        assembly {\n            result := add(\n                mul(\n                    or(\n                        div(sub(prod0, remainder), SCALE_LPOTD),\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\n                    ),\n                    SCALE_INVERSE\n                ),\n                roundUpUnit\n            )\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev An extension of \"mulDiv\" for signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - None of the inputs can be type(int256).min.\n    /// - The result must fit within int256.\n    ///\n    /// @param x The multiplicand as an int256.\n    /// @param y The multiplier as an int256.\n    /// @param denominator The divisor as an int256.\n    /// @return result The result as an int256.\n    function mulDivSigned(\n        int256 x,\n        int256 y,\n        int256 denominator\n    ) internal pure returns (int256 result) {\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\n            revert PRBMath__MulDivSignedInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x, y and the denominator.\n        uint256 ax;\n        uint256 ay;\n        uint256 ad;\n        unchecked {\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\n        }\n\n        // Compute the absolute value of (x*y)÷denominator. The result must fit within int256.\n        uint256 rAbs = mulDiv(ax, ay, ad);\n        if (rAbs > uint256(type(int256).max)) {\n            revert PRBMath__MulDivSignedOverflow(rAbs);\n        }\n\n        // Get the signs of x, y and the denominator.\n        uint256 sx;\n        uint256 sy;\n        uint256 sd;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n            sd := sgt(denominator, sub(0, 1))\n        }\n\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\n        // If yes, the result should be negative.\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The uint256 number for which to calculate the square root.\n    /// @return result The result as an uint256.\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\n        uint256 xAux = uint256(x);\n        result = 1;\n        if (xAux >= 0x100000000000000000000000000000000) {\n            xAux >>= 128;\n            result <<= 64;\n        }\n        if (xAux >= 0x10000000000000000) {\n            xAux >>= 64;\n            result <<= 32;\n        }\n        if (xAux >= 0x100000000) {\n            xAux >>= 32;\n            result <<= 16;\n        }\n        if (xAux >= 0x10000) {\n            xAux >>= 16;\n            result <<= 8;\n        }\n        if (xAux >= 0x100) {\n            xAux >>= 8;\n            result <<= 4;\n        }\n        if (xAux >= 0x10) {\n            xAux >>= 4;\n            result <<= 2;\n        }\n        if (xAux >= 0x8) {\n            result <<= 1;\n        }\n\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\n        unchecked {\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1; // Seven iterations should be enough\n            uint256 roundedDownResult = x / result;\n            return result >= roundedDownResult ? roundedDownResult : result;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IVirtualToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// interfaces\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IVirtualToken is IERC20Metadata {\n    /* ****************** */\n    /*  State modifying   */\n    /* ****************** */\n\n    function mint(uint256 amount) external;\n\n    function burn(uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/IMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\ninterface IMath {\n    function sqrt_int(uint256 x) external view returns (uint256);\n\n    function newton_D(\n        uint256 ANN,\n        uint256 gamma,\n        uint256[2] memory x_unsorted\n    ) external view returns (uint256);\n\n    function newton_y(\n        uint256 ANN,\n        uint256 gamma,\n        uint256[2] memory x,\n        uint256 D,\n        uint256 i\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/tokens/UA.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {BaseERC20} from \"./BaseERC20.sol\";\nimport {IncreAccessControl} from \"../utils/IncreAccessControl.sol\";\n\n// interfaces\nimport {IUA} from \"../interfaces/IUA.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n// libraries\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {LibMath} from \"../lib/LibMath.sol\";\nimport {LibReserve} from \"../lib/LibReserve.sol\";\n\n/// @notice Unit of Account (UA) is a USDC-backed token used as the unit of account accross Increment\ncontract UA is IUA, BaseERC20, IncreAccessControl {\n    using SafeERC20 for IERC20Metadata;\n    using LibMath for int256;\n    using LibMath for uint256;\n\n    ReserveToken[] public reserveTokens;\n\n    constructor(IERC20Metadata initialReserveToken, uint256 initialTokenMaxMintCap)\n        BaseERC20(\"Increment Unit of Account\", \"UA\")\n    {\n        addReserveToken(initialReserveToken, initialTokenMaxMintCap);\n    }\n\n    /* ************************* */\n    /*   Reserve operations      */\n    /* ************************* */\n\n    /// @notice Mint UA with USDC, 1:1 backed\n    /// @param tokenIdx Index of token white listed reserve token to add to the protocol\n    /// @param amount Amount of reserve token. Might not be 18 decimals\n    function mintWithReserve(uint256 tokenIdx, uint256 amount) external override {\n        // Check that the reserve token is supported\n        if (tokenIdx > reserveTokens.length - 1) revert UA_InvalidReserveTokenIndex();\n        ReserveToken memory reserveToken = reserveTokens[tokenIdx];\n\n        // Check that the cap of the reserve token isn't reached\n        uint256 wadAmount = LibReserve.tokenToWad(reserveToken.asset.decimals(), amount);\n        if (reserveToken.currentReserves + wadAmount > reserveToken.mintCap) revert UA_ExcessiveTokenMintCapReached();\n\n        reserveToken.asset.safeTransferFrom(msg.sender, address(this), amount);\n        reserveTokens[tokenIdx].currentReserves += wadAmount;\n\n        _mint(msg.sender, wadAmount);\n    }\n\n    /// @notice Burn UA in exchange of USDC\n    /// @param tokenIdx Index of token white listed reserve token to add to the protocol\n    /// @param amount UA amount. 18 decimals\n    function withdraw(uint256 tokenIdx, uint256 amount) external override {\n        // Check that the reserve token is supported\n        if (tokenIdx > reserveTokens.length - 1) revert UA_InvalidReserveTokenIndex();\n        IERC20Metadata reserveTokenAsset = reserveTokens[tokenIdx].asset;\n\n        _burn(msg.sender, amount);\n        reserveTokens[tokenIdx].currentReserves -= amount;\n\n        uint256 tokenAmount = LibReserve.wadToToken(reserveTokenAsset.decimals(), amount);\n        reserveTokenAsset.safeTransfer(msg.sender, tokenAmount);\n    }\n\n    /* ****************** */\n    /*     Governance     */\n    /* ****************** */\n\n    function addReserveToken(IERC20Metadata newReserveToken, uint256 tokenMintCap)\n        public\n        override\n        onlyRole(GOVERNANCE)\n    {\n        if (address(newReserveToken) == address(0)) revert UA_ReserveTokenZeroAddress();\n\n        for (uint256 i = 0; i < reserveTokens.length; i++) {\n            if (reserveTokens[i].asset == newReserveToken) revert UA_ReserveTokenAlreadyAssigned();\n        }\n\n        reserveTokens.push(ReserveToken({asset: newReserveToken, currentReserves: 0, mintCap: tokenMintCap}));\n\n        emit ReserveTokenAdded(newReserveToken, reserveTokens.length);\n    }\n\n    function changeReserveTokenMaxMintCap(uint256 tokenIdx, uint256 newMintCap) external override onlyRole(GOVERNANCE) {\n        // Check that the reserve token is one of the white listed tokens\n        if (tokenIdx > reserveTokens.length - 1) revert UA_InvalidReserveTokenIndex();\n\n        reserveTokens[tokenIdx].mintCap = newMintCap;\n        emit ReserveTokenMaxMintCapUpdated(reserveTokens[tokenIdx].asset, newMintCap);\n    }\n\n    /* *********** */\n    /*   Viewer    */\n    /* *********** */\n\n    /// @notice Return the number of reserve tokens\n    /// @return Number of reserve tokens\n    function getNumReserveTokens() external view override returns (uint256) {\n        return reserveTokens.length;\n    }\n}\n"
    },
    "contracts/tokens/BaseERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.15;\n\n// interfaces\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @notice Modern and gas efficient ERC20 implementation.\n/// @author Modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract BaseERC20 is IERC20, IERC20Metadata {\n    /*///////////////////////////////////////////////////////////////\n                             METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public override name;\n\n    string public override symbol;\n\n    uint8 public constant override decimals = 18;\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public override totalSupply;\n\n    mapping(address => uint256) public override balanceOf;\n\n    mapping(address => mapping(address => uint256)) public override allowance;\n\n    /*///////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) external virtual override returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "contracts/interfaces/IUA.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// interfaces\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IUA is IERC20Metadata {\n    struct ReserveToken {\n        IERC20Metadata asset;\n        uint256 currentReserves; // 18 decimals\n        uint256 mintCap; // 18 decimals\n    }\n\n    /* ****************** */\n    /*     Errors         */\n    /* ****************** */\n\n    /// @notice Emitted when the proposed reserve token address is equal to the zero address\n    error UA_ReserveTokenZeroAddress();\n\n    /// @notice Emitted when the proposed reserve token index doesn't match any index in the reserve token list\n    error UA_InvalidReserveTokenIndex();\n\n    /// @notice Emitted when the proposed reserve token is already registered\n    error UA_ReserveTokenAlreadyAssigned();\n\n    /// @notice Emitted when the UA amount to mint with the token exceed the max cap of this token\n    error UA_ExcessiveTokenMintCapReached();\n\n    /* ****************** */\n    /*     Events         */\n    /* ****************** */\n\n    /// @notice Emitted when new reserve token is added\n    /// @param newToken New reserve token\n    /// @param numReserveTokens Number of reserve tokens\n    event ReserveTokenAdded(IERC20Metadata indexed newToken, uint256 numReserveTokens);\n\n    /// @notice Emitted when the max mint cap of a reserve token is updated\n    /// @param token Token to update\n    /// @param neMintCap New max mint cap\n    event ReserveTokenMaxMintCapUpdated(IERC20Metadata indexed token, uint256 neMintCap);\n\n    /* ******************* */\n    /*  Reserve operations */\n    /* ******************* */\n\n    function mintWithReserve(uint256 tokenIdx, uint256 amount) external;\n\n    function withdraw(uint256 tokenIdx, uint256 amount) external;\n\n    /* ****************** */\n    /*     Governance     */\n    /* ****************** */\n\n    function addReserveToken(IERC20Metadata newReserveToken, uint256 tokenMintCap) external;\n\n    function changeReserveTokenMaxMintCap(uint256 tokenIdx, uint256 newMintCap) external;\n\n    /* *********** */\n    /*   Viewer    */\n    /* *********** */\n\n    function getNumReserveTokens() external view returns (uint256);\n}\n"
    },
    "contracts/Vault.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IncreAccessControl} from \"./utils/IncreAccessControl.sol\";\n\n// interfaces\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IInsurance} from \"./interfaces/IInsurance.sol\";\nimport {IOracle} from \"./interfaces/IOracle.sol\";\nimport {IVault} from \"./interfaces/IVault.sol\";\nimport {IClearingHouse} from \"./interfaces/IClearingHouse.sol\";\n\n// libraries\nimport {LibReserve} from \"./lib/LibReserve.sol\";\nimport {LibMath} from \"./lib/LibMath.sol\";\n\n/// @notice Keeps track of all token reserves for all market\ncontract Vault is IVault, IncreAccessControl {\n    using SafeERC20 for IERC20Metadata;\n    using LibMath for uint256;\n    using LibMath for int256;\n\n    // constants\n    // slither-disable-next-line naming-convention\n    IERC20Metadata public immutable override UA;\n    uint256 public constant UA_IDX = 0;\n\n    // dependencies\n    IClearingHouse public override clearingHouse;\n    IInsurance public override insurance;\n    IOracle public override oracle;\n\n    // global state\n    Collateral[] internal whiteListedCollaterals;\n    /// @notice Map white listed collateral tokens to their whiteListedCollaterals indexes\n    mapping(IERC20Metadata => uint256) public override tokenToCollateralIdx;\n\n    // user state\n\n    /* Balances of users and liquidity providers\n\n    */\n    //       user  =>    collateralIdx => balance (might not be 18 decimals)\n    mapping(address => mapping(uint256 => int256)) private balances;\n\n    constructor(IERC20Metadata _ua) {\n        if (address(_ua) == address(0)) revert Vault_ZeroAddressConstructor(0);\n\n        UA = _ua;\n        addWhiteListedCollateral(_ua, 1e18, type(uint256).max);\n    }\n\n    modifier onlyClearingHouse() {\n        if (msg.sender != address(clearingHouse)) revert Vault_SenderNotClearingHouse();\n        _;\n    }\n\n    modifier onlyClearingHouseOrInsurance() {\n        if (msg.sender != address(clearingHouse) && msg.sender != address(insurance))\n            revert Vault_SenderNotClearingHouseNorInsurance();\n        _;\n    }\n\n    /* ****************** */\n    /*     User flow      */\n    /* ****************** */\n\n    /// @notice Add an amount of a whitelisted token to the balance of a user\n    /// @param user Account to deposit collateral to\n    /// @param amount Amount to be used as the collateral of the position. Might not be 18 decimals (decimals of the token)\n    /// @param depositToken One whitelisted token\n    function deposit(\n        address user,\n        uint256 amount,\n        IERC20Metadata depositToken\n    ) external override onlyClearingHouse {\n        return _deposit(user, amount, depositToken);\n    }\n\n    /// @notice Withdraw all tokens stored by a user in the vault\n    /// @param user Account to withdraw from\n    /// @param withdrawToken Token whose balance is to be withdrawn from the vault\n    function withdrawAll(address user, IERC20Metadata withdrawToken) external override onlyClearingHouse {\n        uint256 tokenIdx = tokenToCollateralIdx[withdrawToken];\n        if (!((tokenIdx != 0) || (address(withdrawToken) == address(UA)))) revert Vault_UnsupportedCollateral();\n\n        int256 fullAmount = balances[user][tokenIdx];\n\n        return _withdraw(user, fullAmount.toUint256(), withdrawToken);\n    }\n\n    /// @notice Withdraw tokens stored by a user in the vault\n    /// @dev Unlike `deposit`, `withdraw` treats withdrawals of UA differently than other collaterals\n    /// @param user Account to withdraw from\n    /// @param amount Amount to withdraw from the vault. Might not be 18 decimals (decimals of the token)\n    /// @param withdrawToken Token whose balance is to be withdrawn from the vault\n    function withdraw(\n        address user,\n        uint256 amount,\n        IERC20Metadata withdrawToken\n    ) external override onlyClearingHouse {\n        uint256 tokenIdx = tokenToCollateralIdx[withdrawToken];\n        if (!((tokenIdx != 0) || (address(withdrawToken) == address(UA)))) revert Vault_UnsupportedCollateral();\n\n        uint256 tokenAmount = LibReserve.tokenToWad(whiteListedCollaterals[tokenIdx].decimals, amount);\n        _withdraw(user, tokenAmount, withdrawToken);\n    }\n\n    /// @notice Allow liquidator to buy back non-UA collateral(s) of liquidated user at a discounted price whereby settling the latter debt\n    /// @dev The liquidator buys just as much non-UA collaterals to cover the liquidatee's debt, not more\n    /// @dev If the USD value of all the non-UA collaterals of the liquidatee < his UA debt, Increment insurance steps in to cover the remainder of the UA debt\n    /// @param liquidator Address of the liquidator\n    /// @param liquidatee Address of the liquidatee\n    function settleLiquidationOnCollaterals(address liquidator, address liquidatee)\n        external\n        override\n        onlyClearingHouse\n    {\n        int256 balance = balances[liquidatee][UA_IDX];\n\n        uint256 debtSize = (-balance).toUint256();\n\n        Collateral[] storage collaterals = whiteListedCollaterals;\n        int256 collateralBalance;\n\n        // we only liquidate users who have a UA debt\n        uint256 numCollaterals = collaterals.length;\n        for (uint256 i = 1; i < numCollaterals; ) {\n            collateralBalance = balances[liquidatee][i];\n\n            if (collateralBalance > 0) {\n                // take the discounted value\n                uint256 collateralLiquidationValue = (\n                    _getUndiscountedCollateralUSDValue(collaterals[i].asset, collateralBalance).toUint256()\n                ).wadMul(clearingHouse.liquidationDiscount());\n\n                if (collateralLiquidationValue < debtSize) {\n                    // sell 100% of the collateral\n                    debtSize -= _sellCollateral(\n                        liquidator,\n                        liquidatee,\n                        collaterals[i],\n                        collateralBalance.toUint256(),\n                        collateralLiquidationValue // uaDebtSettled\n                    );\n                } else {\n                    // sell only what is needed of the collateral to cover debtSize\n                    uint256 collateralSellRatio = debtSize.wadDiv(collateralLiquidationValue);\n                    uint256 collateralAmountToSell = (collateralBalance.wadMul(collateralSellRatio.toInt256()))\n                        .toUint256();\n\n                    _sellCollateral(liquidator, liquidatee, collaterals[i], collateralAmountToSell, debtSize);\n                    debtSize = 0;\n\n                    break;\n                }\n            }\n\n            unchecked {\n                i++;\n            }\n        }\n\n        // if combined USD value of the liquidatee collaterals < his debtSize,\n        // Insurance must step in to maintain solvency of the Vault\n        if (debtSize > 0) {\n            insurance.settleDebt(debtSize);\n            _changeBalance(liquidatee, UA_IDX, debtSize.toInt256());\n\n            emit TraderBadDebtGenerated(liquidatee, debtSize);\n        }\n    }\n\n    /// @notice Settle PnL for user in UA\n    /// @param user Account to apply the PnL to\n    /// @param amount PnL amount in UA to apply. 18 decimals\n    function settlePnL(address user, int256 amount) external override onlyClearingHouse {\n        _changeBalance(user, UA_IDX, amount);\n    }\n\n    /// @notice Transfer UA tokens from the vault\n    /// @dev Important: the balance of the user from whom the UA tokens are being withdrawn must be updated separately\n    /// @param user Account to withdraw UA tokens to\n    /// @param amount Amount of UA tokens to be withdrawn. 18 decimals\n    function transferUa(address user, uint256 amount) external override onlyClearingHouseOrInsurance {\n        whiteListedCollaterals[UA_IDX].currentAmount -= amount;\n        UA.safeTransfer(user, amount);\n    }\n\n    /* ****************** */\n    /*     Governance     */\n    /* ****************** */\n\n    /// @notice Update the ClearingHouse address\n    /// @param newClearingHouse Address of the new ClearingHouse\n    function setClearingHouse(IClearingHouse newClearingHouse) external override onlyRole(GOVERNANCE) {\n        if (address(newClearingHouse) == address(0)) revert Vault_ClearingHouseZeroAddress();\n        clearingHouse = newClearingHouse;\n        emit ClearingHouseChanged(newClearingHouse);\n    }\n\n    /// @notice Update the Insurance address\n    /// @param newInsurance Address of the new Insurance\n    function setInsurance(IInsurance newInsurance) external override onlyRole(GOVERNANCE) {\n        if (address(newInsurance) == address(0)) revert Vault_InsuranceZeroAddress();\n        insurance = newInsurance;\n        emit InsuranceChanged(newInsurance);\n    }\n\n    /// @notice Update the Oracle address\n    /// @param newOracle Address of the new Oracle\n    function setOracle(IOracle newOracle) external override onlyRole(GOVERNANCE) {\n        if (address(newOracle) == address(0)) revert Vault_OracleZeroAddress();\n        oracle = newOracle;\n        emit OracleChanged(newOracle);\n    }\n\n    /// @notice Add a new token to the list of whitelisted ERC20 which can be used as collaterals\n    /// @param asset Address of the token to be whitelisted as a valid collateral in the Vault\n    /// @param weight Discount weight to be applied on the asset vault\n    /// @param maxAmount Maximum total amount that the Vault will accept of this collateral\n    function addWhiteListedCollateral(\n        IERC20Metadata asset,\n        uint256 weight,\n        uint256 maxAmount\n    ) public override onlyRole(GOVERNANCE) {\n        if (weight < 1e17) revert Vault_InsufficientCollateralWeight();\n        if (weight > 1e18) revert Vault_ExcessiveCollateralWeight();\n\n        for (uint256 i = 0; i < whiteListedCollaterals.length; i++) {\n            if (whiteListedCollaterals[i].asset == asset) revert Vault_CollateralAlreadyWhiteListed();\n        }\n\n        whiteListedCollaterals.push(\n            Collateral({\n                asset: asset,\n                weight: weight,\n                decimals: asset.decimals(),\n                currentAmount: 0,\n                maxAmount: maxAmount\n            })\n        );\n        tokenToCollateralIdx[asset] = whiteListedCollaterals.length - 1;\n\n        emit CollateralAdded(asset, weight, maxAmount);\n    }\n\n    /// @notice Change weight of a white listed collateral\n    ///         Useful as a risk mitigation measure in case one collateral drops in value\n    /// @param asset Address of asset to change collateral weight\n    /// @param newWeight New weight. 18 decimals\n    function changeCollateralWeight(IERC20Metadata asset, uint256 newWeight) external override onlyRole(GOVERNANCE) {\n        uint256 tokenIdx = tokenToCollateralIdx[asset];\n        if (!((tokenIdx != 0) || (address(asset) == address(UA)))) revert Vault_UnsupportedCollateral();\n\n        if (newWeight < 1e16) revert Vault_InsufficientCollateralWeight();\n        if (newWeight > 1e18) revert Vault_ExcessiveCollateralWeight();\n\n        whiteListedCollaterals[tokenIdx].weight = newWeight;\n\n        emit CollateralWeightChanged(asset, newWeight);\n    }\n\n    /// @notice Change max amount of a white listed collateral\n    ///         Useful as a risk mitigation measure in case one collateral drops in value\n    /// @param asset Address of asset to change max amount\n    /// @param newMaxAmount New max amount for the collateral\n    function changeCollateralMaxAmount(IERC20Metadata asset, uint256 newMaxAmount)\n        external\n        override\n        onlyRole(GOVERNANCE)\n    {\n        uint256 tokenIdx = tokenToCollateralIdx[asset];\n        if (!((tokenIdx != 0) || (address(asset) == address(UA)))) revert Vault_UnsupportedCollateral();\n\n        whiteListedCollaterals[tokenIdx].maxAmount = newMaxAmount;\n\n        emit CollateralMaxAmountChanged(asset, newMaxAmount);\n    }\n\n    /* ****************** */\n    /*   User getter      */\n    /* ****************** */\n\n    /// @notice Get the balance of a user, accounted for in USD. 18 decimals\n    /// @param user User address\n    /// @param isDiscounted Whether or not the reserve value should be discounted by the weight of the collateral\n    function getReserveValue(address user, bool isDiscounted) external view override returns (int256) {\n        return _getUserReserveValue(user, isDiscounted);\n    }\n\n    /// @notice Get the balance of a user of a given token\n    /// @param user User address\n    /// @param tokenIdx Index of the token\n    function getBalance(address user, uint256 tokenIdx) external view override returns (int256) {\n        return balances[user][tokenIdx];\n    }\n\n    /* ****************** */\n    /*   Global getter    */\n    /* ****************** */\n\n    /// @notice Get total value of all tokens deposited in the vault, in USD. 18 decimals\n    function getTotalValueLocked() external view override returns (int256) {\n        Collateral[] storage collaterals = whiteListedCollaterals;\n        int256 tvl = 0;\n\n        uint256 numCollaterals = collaterals.length;\n        for (uint256 i = 0; i < numCollaterals; ) {\n            int256 collateralBalance = collaterals[i].currentAmount.toInt256();\n\n            if (collateralBalance > 0) {\n                tvl += _getUndiscountedCollateralUSDValue(collaterals[i].asset, collateralBalance);\n            }\n\n            unchecked {\n                i++;\n            }\n        }\n\n        return tvl;\n    }\n\n    /// @notice Get details of a whitelisted collateral token\n    /// @param idx Index of the whitelisted collateral to get details from\n    function getWhiteListedCollateral(uint256 idx) external view override returns (Collateral memory) {\n        return whiteListedCollaterals[idx];\n    }\n\n    /// @notice Get number of whitelisted tokens\n    function getNumberOfCollaterals() external view override returns (uint256) {\n        return whiteListedCollaterals.length;\n    }\n\n    /* ****************** */\n    /*   Internal Fcts    */\n    /* ****************** */\n\n    function _deposit(\n        address user,\n        uint256 amount,\n        IERC20Metadata depositToken\n    ) internal {\n        uint256 tokenIdx = tokenToCollateralIdx[depositToken];\n        if (!((tokenIdx != 0) || (address(depositToken) == address(UA)))) revert Vault_UnsupportedCollateral();\n\n        Collateral storage coll = whiteListedCollaterals[tokenIdx];\n        uint256 wadAmount = LibReserve.tokenToWad(coll.decimals, amount);\n\n        if (coll.currentAmount + wadAmount > coll.maxAmount) revert Vault_MaxCollateralAmountExceeded();\n        whiteListedCollaterals[tokenIdx].currentAmount += wadAmount;\n\n        _changeBalance(user, tokenIdx, wadAmount.toInt256());\n\n        IERC20Metadata(depositToken).safeTransferFrom(user, address(this), amount);\n\n        emit Deposit(user, address(depositToken), amount);\n    }\n\n    function _withdraw(\n        address user,\n        uint256 amount, // 1e18\n        IERC20Metadata withdrawToken\n    ) internal {\n        uint256 tokenIdx = tokenToCollateralIdx[withdrawToken];\n        if (!((tokenIdx != 0) || (address(withdrawToken) == address(UA)))) revert Vault_UnsupportedCollateral();\n\n        // user can't withdraw his collateral with a UA debt\n        int256 uaBalance = balances[user][UA_IDX];\n        if (uaBalance < 0) revert Vault_UADebt();\n\n        // user can't withdraw more than his collateral balance\n        int256 collateralBalance = balances[user][tokenIdx];\n        if (amount.toInt256() > collateralBalance) revert Vault_WithdrawExcessiveAmount();\n\n        if (amount > whiteListedCollaterals[tokenIdx].currentAmount) revert Vault_InsufficientBalance();\n        whiteListedCollaterals[tokenIdx].currentAmount -= amount;\n        _changeBalance(user, tokenIdx, -amount.toInt256());\n\n        uint256 tokenAmount = LibReserve.wadToToken(whiteListedCollaterals[tokenIdx].decimals, amount);\n\n        // transfer funds to user, whatever the collateral used\n        IERC20Metadata(withdrawToken).safeTransfer(user, tokenAmount);\n        emit Withdraw(user, address(withdrawToken), tokenAmount);\n    }\n\n    /// @notice Sell liquidatee collateral at a discount to a liquidator willing to buy it in UA\n    /// @param liquidator Liquidator\n    /// @param liquidatee Liquidatee\n    /// @param collateral Collateral to be sold\n    /// @param collateralAmountToSell Collateral amount to be sold\n    /// @param uaDebtSettled UA amount at which to buy the collateral\n    function _sellCollateral(\n        address liquidator,\n        address liquidatee,\n        Collateral storage collateral,\n        uint256 collateralAmountToSell,\n        uint256 uaDebtSettled\n    ) internal returns (uint256) {\n        // liquidatee receives a discounted value of his collateral in UA\n        _changeBalance(liquidatee, UA_IDX, uaDebtSettled.toInt256());\n        _changeBalance(liquidatee, tokenToCollateralIdx[collateral.asset], -collateralAmountToSell.toInt256());\n\n        // liquidator receives the real value of the collateral\n        IERC20Metadata(UA).safeTransferFrom(liquidator, address(this), uaDebtSettled);\n        _changeBalance(liquidator, tokenToCollateralIdx[collateral.asset], collateralAmountToSell.toInt256());\n\n        return uaDebtSettled;\n    }\n\n    function _changeBalance(\n        address user,\n        uint256 tokenIdx,\n        int256 amount\n    ) internal {\n        balances[user][tokenIdx] += amount;\n    }\n\n    /// @notice Get the full collateral value of a trader, accounted for in USD. 18 decimals\n    /// @dev Discount collateral when evaluating the value of a collateral. Don't discount when selling the collateral.\n    /// @param user User address\n    /// @param isDiscounted Whether or not the collateral value should be discounted by its weight\n    function _getUserReserveValue(address user, bool isDiscounted) internal view returns (int256) {\n        Collateral[] storage collaterals = whiteListedCollaterals;\n        int256 collateralBalance;\n\n        int256 reserveValue = 0;\n        uint256 numCollaterals = collaterals.length;\n        for (uint256 i = 0; i < numCollaterals; ) {\n            collateralBalance = balances[user][i];\n\n            // user might have a negative UA balance\n            if (collateralBalance != 0) {\n                if (isDiscounted) {\n                    reserveValue += _getDiscountedCollateralUSDValue(\n                        collaterals[i].asset,\n                        collaterals[i].weight,\n                        collateralBalance\n                    );\n                } else {\n                    reserveValue += _getUndiscountedCollateralUSDValue(collaterals[i].asset, collateralBalance);\n                }\n            }\n\n            unchecked {\n                i++;\n            }\n        }\n\n        return reserveValue;\n    }\n\n    /// @notice Return collateral value in USD discounted by its weight, normalized to 18 decimals\n    /// @param collateralAsset Collateral asset to evaluate\n    /// @param collateralWeight Weight of the collateral to evaluate\n    /// @param collateralBalance Balance in the collateral. 18 decimals\n    function _getDiscountedCollateralUSDValue(\n        IERC20Metadata collateralAsset,\n        uint256 collateralWeight,\n        int256 collateralBalance\n    ) internal view returns (int256) {\n        // collateralUSDValue = collateralBalance * weight * oracleUSDPrice\n        int256 weightedCollateralBalance = collateralBalance.wadMul(collateralWeight.toInt256());\n\n        // `collateralBalance` is only being used by `getPrice` if `collateralAsset` is a ERC-4626 token\n        int256 usdPricePerUnit = oracle.getPrice(address(collateralAsset), collateralBalance);\n\n        return weightedCollateralBalance.wadMul(usdPricePerUnit);\n    }\n\n    /// @notice Get the undiscounted USD price of a collateral\n    /// @dev As a reminder, USD value = UA value\n    /// @dev Same as _getDiscountedCollateralUSDValue, except without weight (without discount)\n    /// @param collateralAsset Collateral asset to evaluate\n    /// @param collateralBalance Balance in the collateral. 18 decimals\n    function _getUndiscountedCollateralUSDValue(IERC20Metadata collateralAsset, int256 collateralBalance)\n        internal\n        view\n        returns (int256)\n    {\n        // collateralBalance is only being used by `getPrice` if `collateralAsset` is a ERC-4626 token\n        int256 usdPricePerUnit = oracle.getPrice(address(collateralAsset), collateralBalance);\n\n        return collateralBalance.wadMul(usdPricePerUnit);\n    }\n}\n"
    },
    "contracts/test/TestStakingContract.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {IncreAccessControl} from \"../utils/IncreAccessControl.sol\";\n\n// interfaces\nimport {IClearingHouse} from \"../interfaces/IClearingHouse.sol\";\nimport {IStakingContract} from \"../interfaces/IStakingContract.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n// libraries\nimport {LibPerpetual} from \"../lib/LibPerpetual.sol\";\nimport {LibMath} from \"../lib/LibMath.sol\";\n\ncontract TestStakingContract is IStakingContract, IncreAccessControl {\n    using LibMath for int256;\n\n    /// @notice Emitted when the sender is not the owner\n    error StakingContract_SenderNotClearingHouse();\n\n    /// @notice Emitted when a new ClearingHouse is connected to the vault\n    /// @param newClearingHouse New ClearingHouse contract address\n    event ClearingHouseChanged(IClearingHouse newClearingHouse);\n\n    modifier onlyClearingHouse() {\n        if (msg.sender != address(clearingHouse)) revert StakingContract_SenderNotClearingHouse();\n        _;\n    }\n\n    // staking logic\n    IERC20Metadata public immutable rewardsToken;\n    IClearingHouse public clearingHouse;\n\n    constructor(IClearingHouse _clearingHouse, IERC20Metadata _rewardToken) {\n        clearingHouse = _clearingHouse;\n        rewardsToken = _rewardToken;\n    }\n\n    function updateStakingPosition(uint256 idx, address lp) public override onlyClearingHouse updateReward(lp) {\n        LibPerpetual.LiquidityProviderPosition memory lpPosition = clearingHouse.perpetuals(idx).getLpPosition(lp);\n\n        uint256 oldBalance = balanceOf[lp];\n        uint256 newBalance = int256(lpPosition.openNotional).abs().toUint256();\n\n        if (oldBalance < newBalance) {\n            totalSupply += newBalance - oldBalance;\n            balanceOf[lp] = newBalance;\n        } else if (oldBalance > newBalance) {\n            totalSupply -= oldBalance - newBalance;\n            balanceOf[lp] = newBalance;\n        }\n    }\n\n    function setClearingHouse(IClearingHouse newClearingHouse) external onlyRole(GOVERNANCE) {\n        if (address(newClearingHouse) == address(0)) revert StakingContract_SenderNotClearingHouse();\n        clearingHouse = newClearingHouse;\n        emit ClearingHouseChanged(newClearingHouse);\n    }\n\n    // modified from https://solidity-by-example.org/defi/staking-rewards/\n\n    ////////////////////////////////////////////////////////////////////////////////\n    ////////////////////////////////////////////////////////////////////////////////\n    // Duration of rewards to be paid out (in seconds)\n    uint256 public duration;\n    // Timestamp of when the rewards finish\n    uint256 public finishAt;\n    // Minimum of last updated time and reward finish time\n    uint256 public updatedAt;\n    // Reward to be paid out per second\n    uint256 public rewardRate;\n    // Sum of (reward rate * dt * 1e18 / total supply)\n    uint256 public rewardPerTokenStored;\n    // User address => rewardPerTokenStored\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    // User address => rewards to be claimed\n    mapping(address => uint256) public rewards;\n\n    // Total staked\n    uint256 public totalSupply;\n    // User address => staked amount\n    mapping(address => uint256) public balanceOf;\n\n    modifier updateReward(address _account) {\n        rewardPerTokenStored = rewardPerToken();\n        updatedAt = lastTimeRewardApplicable();\n\n        if (_account != address(0)) {\n            rewards[_account] = earned(_account);\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\n        }\n\n        _;\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return _min(finishAt, block.timestamp);\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        if (totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n\n        return rewardPerTokenStored + (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e18) / totalSupply;\n    }\n\n    function earned(address _account) public view returns (uint256) {\n        return\n            ((balanceOf[_account] * (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e18) + rewards[_account];\n    }\n\n    function getReward() external updateReward(msg.sender) {\n        uint256 reward = rewards[msg.sender];\n        if (reward > 0) {\n            rewards[msg.sender] = 0;\n            rewardsToken.transfer(msg.sender, reward);\n        }\n    }\n\n    function setRewardsDuration(uint256 _duration) external onlyRole(GOVERNANCE) {\n        require(finishAt < block.timestamp, \"reward duration not finished\");\n        duration = _duration;\n    }\n\n    function notifyRewardAmount(uint256 _amount) external onlyRole(GOVERNANCE) updateReward(address(0)) {\n        if (block.timestamp >= finishAt) {\n            rewardRate = _amount / duration;\n        } else {\n            uint256 remainingRewards = (finishAt - block.timestamp) * rewardRate;\n            rewardRate = (_amount + remainingRewards) / duration;\n        }\n\n        require(rewardRate > 0, \"reward rate = 0\");\n        require(rewardRate * duration <= rewardsToken.balanceOf(address(this)), \"reward amount > balance\");\n\n        finishAt = block.timestamp + duration;\n        updatedAt = block.timestamp;\n    }\n\n    function _min(uint256 x, uint256 y) private pure returns (uint256) {\n        return x <= y ? x : y;\n    }\n}\n"
    },
    "contracts/test/TestPerpetual.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {Perpetual} from \"../Perpetual.sol\";\n\n// interfaces\nimport {ICryptoSwap} from \"../interfaces/ICryptoSwap.sol\";\nimport {IVBase} from \"../interfaces/IVBase.sol\";\nimport {IVQuote} from \"../interfaces/IVQuote.sol\";\nimport {IClearingHouse} from \"../interfaces/IClearingHouse.sol\";\nimport {ICurveCryptoViews} from \"../interfaces/ICurveCryptoViews.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n// libraries\nimport {LibPerpetual} from \"../lib/LibPerpetual.sol\";\nimport {LibMath} from \"../lib/LibMath.sol\";\n\n/// @notice Emitted when the given token index is gt 1\nerror TestPerpetual_InvalidTokenIndex(uint256 idx);\n\n/// @notice Emitted when the initial buy amount is less than the target position size\nerror TestPerpetual_BuyAmountTooSmall();\n\n/*\n * TestPerpetual includes some setter functions to edit part of\n * the internal state of Perpetual which aren't exposed otherwise.\n */\ncontract TestPerpetual is Perpetual {\n    using LibMath for int256;\n    using LibMath for uint256;\n\n    // emit event which can be cached in tests\n    event SwapForExact(uint256 boughtVBaseTokens, uint256 additionalTokens);\n\n    constructor(\n        IVBase _vBase,\n        IVQuote _vQuote,\n        ICryptoSwap _market,\n        IClearingHouse _clearingHouse,\n        ICurveCryptoViews _views,\n        PerpetualParams memory _params\n    ) Perpetual(_vBase, _vQuote, _market, _clearingHouse, _views, _params) {}\n\n    // simplified setter for funding rate manipulation\n    function __TestPerpetual_setGlobalPositionFundingRate(uint64 timeOfLastTrade, int128 cumFundingRate) external {\n        globalPosition.timeOfLastTrade = timeOfLastTrade;\n        globalPosition.cumFundingRate = cumFundingRate;\n    }\n\n    // simplified setter for trading fees manipulation\n    function __TestPerpetual_setGlobalPositionTradingFees(uint128 totalTradingFeesGrowth) external {\n        globalPosition.totalTradingFeesGrowth = totalTradingFeesGrowth;\n    }\n\n    function __TestPerpetual_setTraderPosition(\n        address trader,\n        int128 openNotional,\n        int128 positionSize,\n        int128 cumFundingRate\n    ) external {\n        traderPosition[trader] = LibPerpetual.TraderPosition({\n            openNotional: openNotional,\n            positionSize: positionSize,\n            cumFundingRate: cumFundingRate\n        });\n    }\n\n    function __TestPerpetual_manipulate_market(\n        uint256 tokenToSell,\n        uint256 tokenToBuy,\n        uint256 amountToSell\n    ) external returns (uint256) {\n        if (tokenToSell >= 2) revert TestPerpetual_InvalidTokenIndex(tokenToSell);\n        if (tokenToBuy >= 2) revert TestPerpetual_InvalidTokenIndex(tokenToBuy);\n\n        if (tokenToSell == VQUOTE_INDEX) {\n            vQuote.mint(amountToSell);\n        } else {\n            vBase.mint(amountToSell);\n        }\n\n        return market.exchange(tokenToSell, tokenToBuy, amountToSell, 0);\n    }\n\n    function __TestPerpetual_swap_for_exact(uint256 proposedAmount, uint256 targetPositionSize) external {\n        // mint tokens\n        vQuote.mint(proposedAmount);\n\n        (uint256 boughtVBaseTokens, ) = _quoteForBase(proposedAmount, 0);\n\n        if (boughtVBaseTokens < targetPositionSize) revert TestPerpetual_BuyAmountTooSmall();\n\n        uint256 baseRemaining = boughtVBaseTokens - targetPositionSize;\n\n        emit SwapForExact(boughtVBaseTokens, baseRemaining);\n    }\n\n    function __TestPerpetual_updateGlobalState() external {\n        _updateGlobalState();\n    }\n\n    function __TestPerpetual_updateFunding() external {\n        _updateFundingRate();\n    }\n\n    function __TestPerpetual_updateTwap() external {\n        _updateTwap();\n    }\n\n    function __TestPerpetual_setTWAP(int128 _marketTwap, int128 _oracleTwap) external {\n        marketTwap = _marketTwap;\n        oracleTwap = _oracleTwap;\n    }\n\n    function __TestPerpetual__updateCurrentBlockTradeAmount(uint256 quoteAmount) external {\n        _updateCurrentBlockTradeAmount(quoteAmount);\n    }\n\n    function __TestPerpetual__resetCurrentBlockTradeAmount() external {\n        _resetCurrentBlockTradeAmount();\n    }\n\n    function __TestPerpetual__checkBlockTradeAmount() external view returns (bool) {\n        return _checkBlockTradeAmount();\n    }\n\n    // perform a removal of liquidity and swap in one function call\n    function __TestPerpetual_remove_liquidity_swap(\n        ICryptoSwap market_,\n        ICurveCryptoViews views_,\n        IVBase vBase_,\n        uint256 liquidityAmountToRemove,\n        uint256 globalTotalBaseFeesGrowth,\n        uint256 lpTotalBaseFeesGrowth,\n        uint256 proposedAmount\n    ) public returns (uint256 baseLiquidity, uint256 baseProceeds) {\n        baseLiquidity = _removeLiquidity(\n            market_,\n            vBase_,\n            liquidityAmountToRemove,\n            globalTotalBaseFeesGrowth,\n            lpTotalBaseFeesGrowth\n        );\n        baseProceeds = __TestPerpetual__quoteForBase(proposedAmount, market_, views_);\n\n        return (baseLiquidity, baseProceeds);\n    }\n\n    // optimized version of _removeLiquidity\n    function _removeLiquidity(\n        ICryptoSwap market_,\n        IVBase vBase_,\n        uint256 liquidityAmountToRemove,\n        uint256 globalTotalBaseFeesGrowth,\n        uint256 lpTotalBaseFeesGrowth\n    ) internal returns (uint256 baseAmount) {\n        // remove liquidity\n        uint256 vBaseBalanceBefore = vBase_.balanceOf(address(this));\n\n        market_.remove_liquidity(liquidityAmountToRemove, [uint256(0), uint256(0)]);\n\n        uint256 baseAmountInclFees = vBase_.balanceOf(address(this)) - vBaseBalanceBefore;\n\n        // remove fee component from quoteAmount\n        baseAmount = baseAmountInclFees.wadDiv(1e18 + globalTotalBaseFeesGrowth - lpTotalBaseFeesGrowth);\n    }\n\n    // optimized version of _quoteForBase\n    function __TestPerpetual__quoteForBase(\n        uint256 quoteAmount,\n        ICryptoSwap _market,\n        ICurveCryptoViews _views\n    ) internal view returns (uint256) {\n        return _views.get_dy_ex_fees(_market, VQUOTE_INDEX, VBASE_INDEX, quoteAmount);\n    }\n\n    function getOracleCumulativeAmount() external view returns (int256) {\n        return oracleCumulativeAmount;\n    }\n\n    function getOracleCumulativeAmountAtBeginningOfPeriod() external view returns (int256) {\n        return oracleCumulativeAmountAtBeginningOfPeriod;\n    }\n\n    function getMarketCumulativeAmount() external view returns (int256) {\n        return marketCumulativeAmount;\n    }\n\n    function getMarketCumulativeAmountAtBeginningOfPeriod() external view returns (int256) {\n        return marketCumulativeAmountAtBeginningOfPeriod;\n    }\n}\n"
    },
    "contracts/Perpetual.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport {IncreAccessControl} from \"./utils/IncreAccessControl.sol\";\n\n// interfaces\nimport {IPerpetual} from \"./interfaces/IPerpetual.sol\";\nimport {IVBase} from \"./interfaces/IVBase.sol\";\nimport {IVQuote} from \"./interfaces/IVQuote.sol\";\nimport {ICryptoSwap} from \"./interfaces/ICryptoSwap.sol\";\nimport {IClearingHouse} from \"./interfaces/IClearingHouse.sol\";\nimport {ICurveCryptoViews} from \"./interfaces/ICurveCryptoViews.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n// libraries\nimport {LibMath} from \"./lib/LibMath.sol\";\nimport {LibPerpetual} from \"./lib/LibPerpetual.sol\";\n\n/// @notice Handle all the logic involving the pool. Interact with the CryptoSwap pool\ncontract Perpetual is IPerpetual, Pausable, IncreAccessControl {\n    using LibMath for int256;\n    using LibMath for uint256;\n\n    // constants\n    uint256 internal constant VQUOTE_INDEX = 0; // index of quote asset in curve pool\n    uint256 internal constant VBASE_INDEX = 1; // index of base asset in curve pool\n    int256 internal constant CURVE_TRADING_FEE_PRECISION = 1e10; // curve trading fee precision\n\n    // parameters\n\n    /// @notice risk weight of the perpetual pair\n    uint256 public override riskWeight;\n\n    /// @notice maximum liquidity which can be provided to the pool\n    uint256 public override maxLiquidityProvided;\n\n    /// @notice period over which twap is calculated\n    uint256 public override twapFrequency;\n\n    /// @notice funding rate sensitivity to price deviations\n    int256 public override sensitivity;\n\n    /// @notice paid on dollar value of an opened position (used in ClearingHouse)\n    int256 public override insuranceFee;\n\n    /// @notice lp debt coefficient\n    int256 public override lpDebtCoef;\n\n    /// @notice max trade amount in one block\n    uint256 public override maxBlockTradeAmount;\n\n    /// @notice max position size in one block (1/10 of maxBlockTradeAmount)\n    uint256 public override maxPosition;\n\n    /// @notice time when the liquidity provision has to be locked\n    uint256 public override lockPeriod;\n\n    // dependencies\n\n    /// @notice vBase token (traded on CryptoSwap pool)\n    IVBase public override vBase;\n\n    /// @notice vQuote token (traded on CryptoSwap pool)\n    IVQuote public override vQuote;\n\n    /// @notice Clearing House contract\n    IClearingHouse public override clearingHouse;\n\n    /// @notice Curve CryptoSwap pool\n    ICryptoSwap public override market;\n\n    /// @notice Curve Crypto Views\n    ICurveCryptoViews public override curveCryptoViews;\n\n    // global state\n    LibPerpetual.GlobalPosition internal globalPosition;\n\n    // public state\n\n    /// @dev: share storage slot\n\n    /// @notice Oracle Time-weighted average price of base\n    int128 public override oracleTwap;\n\n    /// @notice Market Time-weighted average price of base\n    int128 public override marketTwap;\n\n    // internal state\n    int256 internal oracleCumulativeAmount;\n    int256 internal oracleCumulativeAmountAtBeginningOfPeriod;\n    int256 internal marketCumulativeAmount;\n    // slither-disable-next-line similar-names\n    int256 internal marketCumulativeAmountAtBeginningOfPeriod;\n\n    // user state\n    mapping(address => LibPerpetual.TraderPosition) internal traderPosition;\n    mapping(address => LibPerpetual.LiquidityProviderPosition) internal lpPosition;\n\n    constructor(\n        IVBase _vBase,\n        IVQuote _vQuote,\n        ICryptoSwap _market,\n        IClearingHouse _clearingHouse,\n        ICurveCryptoViews _views,\n        PerpetualParams memory _params\n    ) {\n        if (address(_vBase) == address(0)) revert Perpetual_ZeroAddressConstructor(0);\n        if (address(_vQuote) == address(0)) revert Perpetual_ZeroAddressConstructor(1);\n        if (address(_market) == address(0)) revert Perpetual_ZeroAddressConstructor(2);\n        if (address(_clearingHouse) == address(0)) revert Perpetual_ZeroAddressConstructor(3);\n        if (address(_views) == address(0)) revert Perpetual_ZeroAddressConstructor(4);\n\n        vBase = _vBase;\n        vQuote = _vQuote;\n        market = _market;\n        clearingHouse = _clearingHouse;\n        curveCryptoViews = _views;\n\n        // approve all future transfers between Perpetual and market (curve pool)\n        if (!vBase.approve(address(_market), type(uint256).max))\n            revert Perpetual_VirtualTokenApprovalConstructor(VBASE_INDEX);\n        if (!vQuote.approve(address(_market), type(uint256).max))\n            revert Perpetual_VirtualTokenApprovalConstructor(VQUOTE_INDEX);\n\n        // initialize global state\n        _initGlobalState(_vBase.getIndexPrice(), _market.last_prices().toInt256());\n\n        setParameters(\n            PerpetualParams({\n                riskWeight: _params.riskWeight,\n                maxLiquidityProvided: _params.maxLiquidityProvided,\n                twapFrequency: _params.twapFrequency,\n                sensitivity: _params.sensitivity,\n                maxBlockTradeAmount: _params.maxBlockTradeAmount,\n                insuranceFee: _params.insuranceFee,\n                lpDebtCoef: _params.lpDebtCoef,\n                lockPeriod: _params.lockPeriod\n            })\n        );\n\n        if (market.admin_fee() != 0) revert Perpetual_InvalidAdminFee();\n    }\n\n    modifier onlyClearingHouse() {\n        if (msg.sender != address(clearingHouse)) revert Perpetual_SenderNotClearingHouse();\n        _;\n    }\n\n    /* ****************** */\n    /*   Trader flow      */\n    /* ****************** */\n\n    /// @notice Open or increase or reduce a position, either LONG or SHORT\n    /// @dev Function can be used to extend or reduce a position. Reversing a position is prohibited.\n    /// @param account Trader\n    /// @param amount Amount in vQuote (if LONG) or vBase (if SHORT) to sell. 18 decimals\n    /// @param minAmount Minimum amount that the user is willing to accept. 18 decimals\n    /// @param direction Whether the trader wants to go in the LONG or SHORT direction overall\n    /// @param isLiquidation Transaction is a liquidation (true) or a regular transaction (false)\n    function changePosition(\n        address account,\n        uint256 amount,\n        uint256 minAmount,\n        LibPerpetual.Side direction,\n        bool isLiquidation\n    )\n        external\n        override\n        whenNotPaused\n        onlyClearingHouse\n        returns (\n            int256 quoteProceeds,\n            int256 baseProceeds,\n            int256 profit,\n            bool isPositionIncreased\n        )\n    {\n        LibPerpetual.TraderPosition storage trader = traderPosition[account];\n\n        int256 traderPositionSize = trader.positionSize;\n        bool isNewPosition = !_isTraderPositionOpen(trader);\n\n        if (isNewPosition || (traderPositionSize > 0 ? LibPerpetual.Side.Long : LibPerpetual.Side.Short) == direction) {\n            (quoteProceeds, baseProceeds, profit) = _extendPosition(account, amount, direction, minAmount);\n            isPositionIncreased = true;\n        } else {\n            (quoteProceeds, baseProceeds, profit) = _reducePosition(account, amount, minAmount);\n        }\n\n        if (!isLiquidation) {\n            // check max deviation\n            _updateCurrentBlockTradeAmount(quoteProceeds.abs().toUint256());\n            if (!_checkBlockTradeAmount()) revert Perpetual_ExcessiveBlockTradeAmount();\n        }\n\n        if (\n            int256(trader.openNotional).abs().toUint256() > maxPosition ||\n            int256(trader.positionSize).abs().wadMul(indexPrice()).toUint256() > maxPosition\n        ) revert Perpetual_MaxPositionSize();\n    }\n\n    /// @notice Settle funding payments for a trader\n    /// @param account Trader\n    /// @return fundingPayments Pending funding payments\n    function settleTrader(address account)\n        external\n        override\n        onlyClearingHouse\n        whenNotPaused\n        returns (int256 fundingPayments)\n    {\n        LibPerpetual.TraderPosition storage trader = traderPosition[account];\n        LibPerpetual.GlobalPosition storage globalP = globalPosition;\n\n        _updateGlobalState();\n\n        // apply funding rate on existing positionSize\n        if (_isTraderPositionOpen(trader)) {\n            // settle trader funding rate\n            fundingPayments = _getFundingPayments(\n                trader.positionSize > 0,\n                trader.cumFundingRate,\n                globalP.cumFundingRate,\n                int256(trader.positionSize).abs()\n            );\n        }\n\n        trader.cumFundingRate = globalP.cumFundingRate;\n\n        return fundingPayments;\n    }\n\n    /* ******************************/\n    /*     Liquidity provider flow  */\n    /* ******************************/\n\n    /// @notice Provide liquidity to the pool\n    /// @param account Liquidity provider\n    /// @param amounts Amount of virtual tokens ([vQuote, vBase]) provided. 18 decimals\n    /// @param minLpAmount Minimum amount of Lp tokens minted. 18 decimals\n    /// @return tradingFees Generated profit generated from trading fees\n    function provideLiquidity(\n        address account,\n        uint256[2] calldata amounts,\n        uint256 minLpAmount\n    ) external override whenNotPaused onlyClearingHouse returns (int256 tradingFees) {\n        // reflect the added liquidity on the LP position\n        LibPerpetual.LiquidityProviderPosition storage lp = lpPosition[account];\n        LibPerpetual.GlobalPosition storage globalP = globalPosition;\n\n        // require a percentage deviation of quote to base amounts (in USD terms) to be lower than 10%\n        // | (a - b) | / a  <= 10% <=>  | a - b | <= a * 10%, where a = amounts[0], b = amount[1] * p\n        if (\n            (amounts[VQUOTE_INDEX].toInt256() - amounts[VBASE_INDEX].toInt256().wadMul(indexPrice()))\n                .abs()\n                .toUint256() > (amounts[VQUOTE_INDEX].wadMul(1e17))\n        ) revert Perpetual_LpAmountDeviation();\n\n        uint256[2] memory providedLiquidity = amounts;\n\n        // update when has provided liquidity before\n        if (_isLpPositionOpen(lp)) {\n            tradingFees = _settleLpTradingFees(lp, globalP).toInt256();\n\n            // For LPs that have previously provided liquidity, we update the `totalBaseFeesGrowth` && `totalQuoteFeesGrowth`. fields in `update user status`.\n            // That has the result that we set the trading fees in the curve pool so far to zero (as now globalP.totalQuoteFeesGrowth = lp.totalQuoteFeesGrowth)\n            // So we underestimate the fees earned in the CryptoSwap contract now.\n            // to counterbalance the effect we calculate the trading fees charged in the curve pool and subtract them from the additional liquidity provided.\n            (uint256 baseFeesEarned, uint256 quoteFeesEarned) = _getVirtualTokensEarnedAsCurveTradingFees(lp, globalP);\n            providedLiquidity[VQUOTE_INDEX] -= quoteFeesEarned;\n            providedLiquidity[VBASE_INDEX] -= baseFeesEarned;\n        }\n\n        // supply liquidity to curve pool\n        vQuote.mint(providedLiquidity[VQUOTE_INDEX]);\n        vBase.mint(providedLiquidity[VBASE_INDEX]);\n        uint256 liquidity = market.add_liquidity(providedLiquidity, minLpAmount);\n\n        // update user state\n        lpPosition[account] = LibPerpetual.LiquidityProviderPosition({\n            openNotional: (lp.openNotional - amounts[VQUOTE_INDEX].toInt256()).toInt128(),\n            positionSize: (lp.positionSize - amounts[VBASE_INDEX].toInt256()).toInt128(),\n            totalTradingFeesGrowth: globalP.totalTradingFeesGrowth,\n            totalBaseFeesGrowth: globalP.totalBaseFeesGrowth,\n            totalQuoteFeesGrowth: globalP.totalQuoteFeesGrowth,\n            cumFundingRate: globalP.cumFundingRate,\n            liquidityBalance: (lp.liquidityBalance + liquidity).toUint128(),\n            depositTime: block.timestamp.toUint64()\n        });\n\n        // update global state\n        uint256 newLiquidityProvided = globalP.totalQuoteProvided + amounts[VQUOTE_INDEX];\n        if (newLiquidityProvided > maxLiquidityProvided) revert Perpetual_MaxLiquidityProvided();\n        globalP.totalQuoteProvided = newLiquidityProvided;\n    }\n\n    /// @notice Remove liquidity from the pool\n    /// @param account Account of the LP to remove liquidity from\n    /// @param liquidityAmountToRemove Amount of liquidity to be removed from the pool. 18 decimals\n    /// @param minVTokenAmounts Minimum amount of virtual tokens [vQuote, vBase] to withdraw from the curve pool. 18 decimals\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\n    /// @param minAmount Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\n    /// @param isLiquidation Transaction is a liquidation (true) or a regular transaction (false)\n    /// @return profit Profit realized\n    function removeLiquidity(\n        address account,\n        uint256 liquidityAmountToRemove,\n        uint256[2] calldata minVTokenAmounts,\n        uint256 proposedAmount,\n        uint256 minAmount,\n        bool isLiquidation\n    )\n        external\n        override\n        whenNotPaused\n        onlyClearingHouse\n        returns (\n            int256 profit,\n            uint256 reductionRatio,\n            int256 quoteProceeds\n        )\n    {\n        LibPerpetual.LiquidityProviderPosition storage lp = lpPosition[account];\n        LibPerpetual.GlobalPosition storage globalP = globalPosition;\n\n        // slither-disable-next-line incorrect-equality\n        if (liquidityAmountToRemove > lp.liquidityBalance) revert Perpetual_LPWithdrawExceedsBalance();\n\n        if (!isLiquidation && (block.timestamp < lp.depositTime + lockPeriod))\n            revert Perpetual_LockPeriodNotReached(lp.depositTime + lockPeriod);\n\n        profit += _settleLpTradingFees(lp, globalP).toInt256();\n\n        // 1) remove liquidity from the curve pool\n        (uint256 quoteAmount, uint256 baseAmount) = _removeLiquidity(\n            lp,\n            globalP,\n            liquidityAmountToRemove,\n            minVTokenAmounts\n        );\n\n        // 2) settle trading position arising from change in pool ratio after removing liquidity\n        reductionRatio = liquidityAmountToRemove.wadDiv(lp.liquidityBalance);\n\n        int256 pnl;\n        (pnl, quoteProceeds) = _settleLpPosition(\n            LibPerpetual.TraderPosition({\n                openNotional: (quoteAmount.toInt256() + int256(lp.openNotional).wadMul(reductionRatio.toInt256()))\n                    .toInt128(),\n                positionSize: (baseAmount.toInt256() + int256(lp.positionSize).wadMul(reductionRatio.toInt256()))\n                    .toInt128(),\n                cumFundingRate: 0\n            }),\n            proposedAmount,\n            minAmount,\n            isLiquidation\n        );\n        profit += pnl;\n\n        // adjust balances to new position\n        {\n            lp.openNotional = (lp.openNotional + quoteAmount.toInt256()).toInt128();\n            lp.positionSize = (lp.positionSize + baseAmount.toInt256()).toInt128();\n            lp.liquidityBalance = (lp.liquidityBalance - liquidityAmountToRemove).toUint128();\n            lp.cumFundingRate = globalP.cumFundingRate;\n\n            // if position has been closed entirely, delete it from the state\n            // slither-disable-next-line incorrect-equality\n            if (!_isLpPositionOpen(lp)) {\n                delete lpPosition[account];\n            }\n\n            globalP.totalQuoteProvided -= quoteAmount;\n        }\n    }\n\n    /// @notice Settle funding payments for a liquidity provider\n    /// @param account Liquidity Provider\n    /// @return fundingPayments Pending funding payments\n    function settleLp(address account)\n        external\n        override\n        whenNotPaused\n        onlyClearingHouse\n        returns (int256 fundingPayments)\n    {\n        LibPerpetual.LiquidityProviderPosition storage lp = lpPosition[account];\n        LibPerpetual.GlobalPosition storage globalP = globalPosition;\n\n        _updateGlobalState();\n\n        if (!_isLpPositionOpen(lp)) {\n            return 0;\n        }\n\n        // settle lp funding rate\n        int256 virtualPositionSize = _getVBasePositionAfterVirtualWithdrawal(lp, globalP);\n\n        fundingPayments = _getFundingPayments(\n            virtualPositionSize > 0,\n            lp.cumFundingRate,\n            globalP.cumFundingRate,\n            virtualPositionSize.abs()\n        );\n\n        lp.cumFundingRate = globalP.cumFundingRate;\n\n        return fundingPayments;\n    }\n\n    /* ************* */\n    /*    Helpers    */\n    /* ************* */\n\n    /// @notice Simulate removing liquidity from the curve pool to increase the slippage\n    ///         and then performs a single swap on the curve pool. Returns amount returned with revert message\n    /// @dev Used to compute the proposedAmount parameter needed for removing liquidity\n    /// @dev To be statically called from `ClearingHouseViewer.removeLiquiditySwap`\n    /// @param account Liquidity Provider\n    /// @param liquidityAmountToRemove Amount of liquidity to be removed from the pool. 18 decimals\n    /// @param minVTokenAmounts Minimum amount of virtual tokens [vQuote, vBase] to withdraw from the curve pool. 18 decimals\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\n    function removeLiquiditySwap(\n        address account,\n        uint256 liquidityAmountToRemove,\n        uint256[2] calldata minVTokenAmounts,\n        uint256 proposedAmount\n    ) external override {\n        LibPerpetual.LiquidityProviderPosition storage lp = lpPosition[account];\n\n        // increase slippage by removing liquidity & swap tokens\n        _removeLiquidity(lp, globalPosition, liquidityAmountToRemove, minVTokenAmounts);\n        uint256 baseProceeds = curveCryptoViews.get_dy_ex_fees(market, VQUOTE_INDEX, VBASE_INDEX, proposedAmount);\n\n        // Revert with baseProceeds\n        // adjusted from https://github.com/Uniswap/v3-periphery/blob/5bcdd9f67f9394f3159dad80d0dd01d37ca08c66/contracts/lens/Quoter.sol#L60-L64\n        // slither-disable-next-line assembly\n        assembly {\n            let b := mload(0x40)\n            mstore(b, baseProceeds)\n            revert(b, 32)\n        }\n    }\n\n    /* ****************** */\n    /*     Governance     */\n    /* ****************** */\n\n    /// @notice Pause the contract\n    /// @dev Can only be called by Manager\n    function pause() external override onlyRole(MANAGER) {\n        _pause();\n    }\n\n    /// @notice Unpause the contract\n    /// @dev Can only be called by Manager\n    function unpause() external override onlyRole(MANAGER) {\n        _unpause();\n    }\n\n    /// @notice Update parameters listed in `IPerpetual.PerpetualParams`\n    /// @dev Can only be called by Governance\n    /// @param params New Economic parameters\n    function setParameters(PerpetualParams memory params) public override onlyRole(GOVERNANCE) {\n        if (params.sensitivity < 2e17 || params.sensitivity > 10e18)\n            revert Perpetual_SensitivityInvalid(params.sensitivity);\n        if (params.insuranceFee < 1e14 || params.insuranceFee > 1e16)\n            revert Perpetual_InsuranceFeeInvalid(params.insuranceFee);\n        if (params.lpDebtCoef < 1e18 || params.lpDebtCoef > 20e18)\n            revert Perpetual_LpDebtCoefInvalid(params.lpDebtCoef);\n        if (params.maxBlockTradeAmount < 100e18) revert Perpetual_MaxBlockAmountInvalid(params.maxBlockTradeAmount);\n        if (params.twapFrequency < 1 minutes || params.twapFrequency > 60 minutes)\n            revert Perpetual_TwapFrequencyInvalid(params.twapFrequency);\n        if (params.lockPeriod < 10 minutes || params.lockPeriod > 30 days)\n            revert Perpetual_LockPeriodInvalid(params.lockPeriod);\n        if (params.riskWeight < 1e18 || params.riskWeight > 50e18)\n            revert Perpetual_RiskWeightInvalid(params.riskWeight);\n\n        riskWeight = params.riskWeight;\n        maxLiquidityProvided = params.maxLiquidityProvided;\n        sensitivity = params.sensitivity;\n        insuranceFee = params.insuranceFee;\n        lpDebtCoef = params.lpDebtCoef;\n        twapFrequency = params.twapFrequency;\n        maxBlockTradeAmount = params.maxBlockTradeAmount;\n        lockPeriod = params.lockPeriod;\n        maxPosition = maxBlockTradeAmount / 10;\n\n        emit PerpetualParametersChanged(\n            params.riskWeight,\n            params.maxLiquidityProvided,\n            params.twapFrequency,\n            params.sensitivity,\n            params.maxBlockTradeAmount,\n            params.insuranceFee,\n            params.lpDebtCoef,\n            params.lockPeriod\n        );\n    }\n\n    /* ****************** */\n    /*   Global getter    */\n    /* ****************** */\n\n    /// @notice Get global market position\n    function getGlobalPosition() external view override returns (LibPerpetual.GlobalPosition memory) {\n        return globalPosition;\n    }\n\n    /// @notice Return the current off-chain exchange rate for vBase/vQuote\n    function indexPrice() public view override returns (int256) {\n        return vBase.getIndexPrice();\n    }\n\n    /// @notice Return the last traded price (used for TWAP)\n    function marketPrice() public view override returns (uint256) {\n        return market.last_prices();\n    }\n\n    /// @notice Get the market total liquidity provided to the Crypto Swap pool\n    function getTotalLiquidityProvided() public view override returns (uint256) {\n        return IERC20Metadata(market.token()).totalSupply();\n    }\n\n    /* ****************** */\n    /*   User getter      */\n    /* ****************** */\n\n    // Trader\n\n    /// @notice Get the approximate funding payments for a trader\n    /// @param account Trader\n    function getTraderFundingPayments(address account) external view override returns (int256 upcomingFundingPayment) {\n        LibPerpetual.TraderPosition storage trader = traderPosition[account];\n\n        if (!_isTraderPositionOpen(trader)) {\n            return 0;\n        }\n\n        LibPerpetual.GlobalPosition storage globalP = globalPosition;\n\n        int256 traderPositionSize = trader.positionSize;\n        bool isLong = traderPositionSize > 0;\n\n        return _getFundingPayments(isLong, trader.cumFundingRate, globalP.cumFundingRate, traderPositionSize.abs());\n    }\n\n    /// @notice Get the unrealized profit and loss of a trader\n    /// @param account Trader\n    function getTraderUnrealizedPnL(address account) public view override returns (int256 pnl) {\n        LibPerpetual.TraderPosition storage trader = traderPosition[account];\n        return _getUnrealizedPnL(trader);\n    }\n\n    /// @notice Get the position of a trader\n    /// @param account Address to get the trading position from\n    function getTraderPosition(address account) external view override returns (LibPerpetual.TraderPosition memory) {\n        return traderPosition[account];\n    }\n\n    /// @notice Get the Profit and Loss of a user\n    /// @param account Address to get the pnL from\n    function getPendingPnL(address account) external view override returns (int256 pnL) {\n        LibPerpetual.TraderPosition storage trader = traderPosition[account];\n        LibPerpetual.LiquidityProviderPosition storage lp = lpPosition[account];\n\n        if (_isTraderPositionOpen(trader)) {\n            pnL += getTraderUnrealizedPnL(account);\n        }\n\n        if (_isLpPositionOpen(lp)) {\n            LibPerpetual.GlobalPosition storage globalP = globalPosition;\n            LibPerpetual.TraderPosition memory activeLpPosition = _getLpPositionAfterWithdrawal(lp, globalP);\n            pnL += _getUnrealizedPnL(activeLpPosition) + _getLpTradingFees(lp, globalP).toInt256();\n        }\n\n        return pnL;\n    }\n\n    /// @notice Get the user debt of an user\n    /// @param account Address to get the pnL from\n    function getUserDebt(address account) external view override returns (int256 debt) {\n        LibPerpetual.TraderPosition storage trader = traderPosition[account];\n        LibPerpetual.LiquidityProviderPosition storage lp = lpPosition[account];\n\n        if (_isTraderPositionOpen(trader)) {\n            debt += _getTraderDebt(trader).abs();\n        }\n        if (_isLpPositionOpen(lp)) {\n            debt += _getLpDebt(lp).abs().wadMul(lpDebtCoef);\n        }\n\n        return debt;\n    }\n\n    /// @notice Whether a trader position is opened or not\n    /// @param account Address of the trader\n    function isTraderPositionOpen(address account) external view override returns (bool) {\n        LibPerpetual.TraderPosition storage trader = traderPosition[account];\n        return _isTraderPositionOpen(trader);\n    }\n\n    // LP\n\n    /// @notice Get the approximate funding payments for a LP\n    /// @param account Address of the liquidity provider\n    function getLpFundingPayments(address account) external view override returns (int256 upcomingFundingPayment) {\n        LibPerpetual.LiquidityProviderPosition storage lp = lpPosition[account];\n\n        if (!_isLpPositionOpen(lp)) {\n            return 0;\n        }\n\n        LibPerpetual.GlobalPosition storage globalP = globalPosition;\n        LibPerpetual.TraderPosition memory activeLpPosition = _getLpPositionAfterWithdrawal(lp, globalP);\n\n        bool isLong = activeLpPosition.positionSize > 0;\n\n        return\n            _getFundingPayments(\n                isLong,\n                activeLpPosition.cumFundingRate,\n                globalP.cumFundingRate,\n                int256(activeLpPosition.positionSize).abs()\n            );\n    }\n\n    /// @notice Get the trading fees earned by a LP\n    /// @param account Address of the liquidity provider\n    function getLpTradingFees(address account) external view override returns (uint256 tradingFeesEarned) {\n        LibPerpetual.LiquidityProviderPosition storage lp = lpPosition[account];\n        LibPerpetual.GlobalPosition storage globalP = globalPosition;\n\n        return _getLpTradingFees(lp, globalP);\n    }\n\n    /// @notice Get the unrealized profit and loss of a LP\n    /// @param account Address of the liquidity provider\n    function getLpUnrealizedPnL(address account) external view override returns (int256 pnl) {\n        LibPerpetual.LiquidityProviderPosition storage lp = lpPosition[account];\n        LibPerpetual.GlobalPosition storage globalP = globalPosition;\n\n        LibPerpetual.TraderPosition memory activeLpPosition = _getLpPositionAfterWithdrawal(lp, globalP);\n        int256 activePositionPnL = _getUnrealizedPnL(activeLpPosition);\n\n        return activePositionPnL;\n    }\n\n    /// @notice Get the (active) position of a liquidity provider after withdrawing liquidity\n    /// @param account Address to get the LP position from\n    function getLpPositionAfterWithdrawal(address account)\n        external\n        view\n        override\n        returns (LibPerpetual.TraderPosition memory)\n    {\n        LibPerpetual.LiquidityProviderPosition storage lp = lpPosition[account];\n        LibPerpetual.GlobalPosition storage globalP = globalPosition;\n\n        if (!_isLpPositionOpen(lp)) {\n            return LibPerpetual.TraderPosition({openNotional: 0, positionSize: 0, cumFundingRate: 0});\n        }\n\n        return _getLpPositionAfterWithdrawal(lp, globalP);\n    }\n\n    /// @notice Get the position of a liquidity provider\n    /// @param account Address to get the LP position from\n    function getLpPosition(address account)\n        external\n        view\n        override\n        returns (LibPerpetual.LiquidityProviderPosition memory)\n    {\n        return lpPosition[account];\n    }\n\n    /// @notice Get the lp tokens owned by a Liquidity Provider\n    /// @param account Liquidity Provider\n    function getLpLiquidity(address account) external view override returns (uint256) {\n        LibPerpetual.LiquidityProviderPosition storage lp = lpPosition[account];\n        return lp.liquidityBalance;\n    }\n\n    /// @notice Get the dollar value of the liquidity provided by a liquidity Provider\n    /// @param account Address of the LP\n    function getLpOpenNotional(address account) external view override returns (int256) {\n        LibPerpetual.LiquidityProviderPosition storage lp = lpPosition[account];\n\n        return int256(lp.openNotional).abs();\n    }\n\n    /// @notice Whether or not a LP position is opened\n    /// @param account Address of the LP\n    function isLpPositionOpen(address account) external view override returns (bool) {\n        LibPerpetual.LiquidityProviderPosition storage lp = lpPosition[account];\n        return _isLpPositionOpen(lp);\n    }\n\n    /* ****************** */\n    /*   Internal (Gov)   */\n    /* ****************** */\n\n    function _initGlobalState(int256 lastChainlinkPrice, int256 lastMarketPrice) internal {\n        // initialize twap\n        oracleTwap = lastChainlinkPrice.toInt128();\n        marketTwap = lastMarketPrice.toInt128();\n\n        // initialize funding\n        globalPosition = LibPerpetual.GlobalPosition({\n            timeOfLastTrade: block.timestamp.toUint64(),\n            timeOfLastTwapUpdate: block.timestamp.toUint64(),\n            cumFundingRate: 0,\n            currentBlockTradeAmount: 0,\n            totalTradingFeesGrowth: 0,\n            totalQuoteProvided: 0,\n            totalBaseFeesGrowth: 0,\n            totalQuoteFeesGrowth: 0\n        });\n    }\n\n    /* ****************** */\n    /*  Internal (Trading) */\n    /* ****************** */\n\n    function _extendPosition(\n        address account,\n        uint256 amount,\n        LibPerpetual.Side direction,\n        uint256 minAmount\n    )\n        internal\n        returns (\n            int256 quoteProceeds,\n            int256 baseProceeds,\n            int256 tradingFees\n        )\n    {\n        /*\n            if direction = LONG\n\n                trader accrues openNotional debt\n                trader receives positionSize assets\n\n                quoteProceeds = vQuote traded to market    ( < 0)\n                positionSize = vBase received from market ( > 0)\n\n            else direction = SHORT\n\n                trader receives openNotional assets\n                trader accrues positionSize debt\n\n                openNotional = vQuote received from market ( > 0)\n                positionSize = vBase traded to market      ( < 0)\n\n            @dev: When we extend a position - no pnl is settled.\n                  We only charge trading fees on the notional amount of its trade.\n\n        */\n\n        LibPerpetual.TraderPosition storage trader = traderPosition[account];\n        bool isLong = direction == LibPerpetual.Side.Long;\n\n        (quoteProceeds, baseProceeds, tradingFees) = _extendPositionOnMarket(amount, isLong, minAmount);\n\n        // update position\n        trader.openNotional = (trader.openNotional + quoteProceeds).toInt128();\n        trader.positionSize = (trader.positionSize + baseProceeds).toInt128();\n\n        return (quoteProceeds, baseProceeds, tradingFees);\n    }\n\n    function _extendPositionOnMarket(\n        uint256 proposedAmount,\n        bool isLong,\n        uint256 minAmount\n    )\n        internal\n        returns (\n            int256 quoteProceeds,\n            int256 baseProceeds,\n            int256 tradingFees\n        )\n    {\n        /*  if long:\n                quoteProceeds = vQuote traded   to market   (or \"- vQuote\")\n                baseProceeds = vBase  received from market (or \"+ vBase\")\n            if short:\n                quoteProceeds = vQuote received from market (or \"+ vQuote\")\n                baseProceeds = vBase  traded   to market   (or \"- vBase\")\n        */\n        uint256 feePer;\n        uint256 bought;\n        if (isLong) {\n            quoteProceeds = -proposedAmount.toInt256();\n            (bought, feePer) = _quoteForBase(proposedAmount, minAmount);\n            baseProceeds = bought.toInt256();\n        } else {\n            (bought, feePer) = _baseForQuote(proposedAmount, minAmount);\n            baseProceeds = -proposedAmount.toInt256();\n            quoteProceeds = bought.toInt256();\n        }\n\n        tradingFees = -_chargeQuoteFees(quoteProceeds, feePer.toInt256());\n\n        return (quoteProceeds, baseProceeds, tradingFees);\n    }\n\n    function _reducePosition(\n        address account,\n        uint256 proposedAmount,\n        uint256 minAmount\n    )\n        internal\n        returns (\n            int256 quoteProceeds,\n            int256 baseProceeds,\n            int256 pnl\n        )\n    {\n        /*\n        after opening the position:\n\n            trader has long position:\n                openNotional = vQuote traded   to market   ( < 0)\n                positionSize = vBase  received from market ( > 0)\n            trader has short position\n                openNotional = vQuote received from market ( > 0)\n                positionSize = vBase  traded   to market   ( < 0)\n\n        to close the position:\n\n            trader has long position:\n                @proposedAmount := amount of vBase used to reduce the position (must be below user.positionSize)\n                => User trades the vBase tokens with the curve pool for vQuote tokens\n\n            trader has short position:\n                @proposedAmount := amount of vQuote required to repay the vBase debt (must be below 1.5 x market value of user.positionSize)\n                => User incurred vBase debt when opening a position and must now trade enough\n                  vQuote with the curve pool to repay his vBase debt in full.\n                => Remaining balances can be traded with the market for vQuote.\n\n                @audit Note that this mechanism can be exploited by inserting a large value here, since traders\n                will encounter slippage on the curve trading pool. We set a limit of 1.5 x market value in _checkProposedAmount()\n\n        */\n\n        LibPerpetual.TraderPosition storage trader = traderPosition[account];\n        if (!_isTraderPositionOpen(trader)) revert Perpetual_NoOpenPosition();\n\n        int256 addedOpenNotional;\n        (baseProceeds, quoteProceeds, addedOpenNotional, pnl) = _reducePositionOnMarket(\n            trader,\n            !(trader.positionSize >= 0), /* trade direction is reversed to current position */\n            proposedAmount,\n            minAmount\n        );\n\n        // adjust trader position\n        trader.openNotional = (trader.openNotional + addedOpenNotional).toInt128();\n        trader.positionSize = (trader.positionSize + baseProceeds).toInt128();\n\n        // if position has been closed entirely, delete it from the state\n        if (!_isTraderPositionOpen(trader)) {\n            delete traderPosition[account];\n        }\n\n        return (quoteProceeds, baseProceeds, pnl);\n    }\n\n    /// @dev Used both by traders closing their own positions and liquidators liquidating other people's positions\n    /// @notice Profit is the sum of funding payments and the position PnL\n    /// @param proposedAmount Amount of tokens to be sold, in vBase if LONG, in vQuote if SHORT. 18 decimals\n    /// @param isLong Whether the trade is Long or Short\n    /// @param minAmount Minimum amount that the user is willing to accept, in vQuote if LONG, in vBase if SHORT. 18 decimals\n    function _reducePositionOnMarket(\n        LibPerpetual.TraderPosition memory user,\n        bool isLong,\n        uint256 proposedAmount,\n        uint256 minAmount\n    )\n        internal\n        returns (\n            int256 baseProceeds,\n            int256 quoteProceeds,\n            int256 addedOpenNotional,\n            int256 pnl\n        )\n    {\n        int256 positionSize = int256(user.positionSize);\n\n        uint256 bought;\n        uint256 feePer;\n        if (isLong) {\n            quoteProceeds = -(proposedAmount.toInt256());\n            (bought, feePer) = _quoteForBase(proposedAmount, minAmount);\n            baseProceeds = bought.toInt256();\n        } else {\n            (bought, feePer) = _baseForQuote(proposedAmount, minAmount);\n            quoteProceeds = bought.toInt256();\n            baseProceeds = -(proposedAmount.toInt256());\n        }\n\n        int256 netPositionSize = baseProceeds + positionSize;\n        if (netPositionSize > 0 && netPositionSize <= 1e17) {\n            _donate(netPositionSize.toUint256());\n            baseProceeds -= netPositionSize;\n        }\n\n        bool isReducingPosition = positionSize > 0\n            ? (baseProceeds + positionSize) >= 0\n            : (baseProceeds + positionSize) <= 0;\n\n        if (!isReducingPosition) revert Perpetual_AttemptReversePosition();\n\n        // calculate reduction ratio\n        uint256 realizedReductionRatio = (baseProceeds.abs().wadDiv(positionSize.abs())).toUint256();\n\n        addedOpenNotional = int256(-user.openNotional).wadMul(realizedReductionRatio.toInt256());\n        pnl = quoteProceeds - addedOpenNotional - _chargeQuoteFees(quoteProceeds, feePer.toInt256());\n    }\n\n    function _quoteForBase(uint256 quoteAmount, uint256 minAmount)\n        internal\n        returns (uint256 vBaseExFees, uint256 feePer)\n    {\n        // get swap excluding fees\n        vBaseExFees = curveCryptoViews.get_dy_ex_fees(market, VQUOTE_INDEX, VBASE_INDEX, quoteAmount);\n\n        // perform swap\n\n        // slither-disable-next-line unused-return\n        vQuote.mint(quoteAmount);\n        uint256 vBaseReceived = market.exchange(VQUOTE_INDEX, VBASE_INDEX, quoteAmount, minAmount);\n        vBase.burn(vBaseReceived);\n\n        // adjust for fees\n        uint256 feesGrowth = vBaseExFees - vBaseReceived;\n        globalPosition.totalBaseFeesGrowth = (globalPosition.totalBaseFeesGrowth +\n            feesGrowth.wadDiv(vBase.totalSupply())).toUint128();\n        feePer = feesGrowth.wadDiv(vBaseExFees);\n    }\n\n    function _baseForQuote(uint256 baseAmount, uint256 minAmount)\n        internal\n        returns (uint256 vQuoteExFees, uint256 feePer)\n    {\n        // get swap excluding fees\n        vQuoteExFees = curveCryptoViews.get_dy_ex_fees(market, VBASE_INDEX, VQUOTE_INDEX, baseAmount);\n\n        // perform swap\n\n        // slither-disable-next-line unused-return\n        vBase.mint(baseAmount);\n        uint256 vQuoteReceived = market.exchange(VBASE_INDEX, VQUOTE_INDEX, baseAmount, minAmount);\n        vQuote.burn(vQuoteReceived);\n\n        // adjust for fees\n        uint256 feesGrowth = vQuoteExFees - vQuoteReceived;\n        globalPosition.totalQuoteFeesGrowth = (globalPosition.totalQuoteFeesGrowth +\n            feesGrowth.wadDiv(vQuote.totalSupply())).toUint128(); // @dev: totalSupply is safer than balanceOf\n        feePer = feesGrowth.wadDiv(vQuoteExFees);\n    }\n\n    /// @notice charge trading fee on notional amount\n    function _chargeQuoteFees(int256 quoteProceeds, int256 feePer) internal returns (int256) {\n        int256 feesPayed = quoteProceeds.abs().wadMul(feePer);\n        globalPosition.totalTradingFeesGrowth += (feesPayed.toUint256().wadDiv(globalPosition.totalQuoteProvided))\n            .toUint128(); // rate of return of this trade\n\n        return feesPayed;\n    }\n\n    /* ****************** */\n    /*  Internal (Liquidity) */\n    /* ****************** */\n\n    function _removeLiquidity(\n        LibPerpetual.LiquidityProviderPosition memory lp,\n        LibPerpetual.GlobalPosition memory globalP,\n        uint256 liquidityAmountToRemove,\n        uint256[2] calldata minVTokenAmounts\n    ) internal returns (uint256 quoteAmount, uint256 baseAmount) {\n        // remove liquidity\n        uint256 vQuoteBalanceBefore = vQuote.balanceOf(address(this));\n        uint256 vBaseBalanceBefore = vBase.balanceOf(address(this));\n\n        market.remove_liquidity(liquidityAmountToRemove, minVTokenAmounts);\n\n        if (vQuote.balanceOf(address(market)) <= 1 || vBase.balanceOf(address(market)) <= 1)\n            revert Perpetual_MarketBalanceTooLow();\n\n        uint256 vQuoteBalanceAfter = vQuote.balanceOf(address(this));\n        uint256 vBaseBalanceAfter = vBase.balanceOf(address(this));\n\n        uint256 quoteAmountInclFees = vQuoteBalanceAfter - vQuoteBalanceBefore;\n        uint256 baseAmountInclFees = vBaseBalanceAfter - vBaseBalanceBefore;\n\n        vQuote.burn(quoteAmountInclFees);\n        vBase.burn(baseAmountInclFees);\n\n        // remove fee component from quoteAmount\n        quoteAmount = quoteAmountInclFees.wadDiv(1e18 + globalP.totalQuoteFeesGrowth - lp.totalQuoteFeesGrowth);\n        baseAmount = baseAmountInclFees.wadDiv(1e18 + globalP.totalBaseFeesGrowth - lp.totalBaseFeesGrowth);\n    }\n\n    function _settleLpPosition(\n        LibPerpetual.TraderPosition memory positionToClose,\n        uint256 proposedAmount,\n        uint256 minAmount,\n        bool isLiquidation\n    ) internal returns (int256 pnl, int256 quoteProceeds) {\n        int256 baseProceeds;\n\n        (baseProceeds, quoteProceeds, , pnl) = _reducePositionOnMarket(\n            positionToClose,\n            !(positionToClose.positionSize > 0),\n            proposedAmount,\n            minAmount\n        );\n\n        if (!isLiquidation) {\n            // check max deviation\n            _updateCurrentBlockTradeAmount(quoteProceeds.abs().toUint256());\n            if (!_checkBlockTradeAmount()) revert Perpetual_ExcessiveBlockTradeAmount();\n        }\n\n        int256 netBasePosition = positionToClose.positionSize + baseProceeds;\n\n        if (netBasePosition < 0) revert Perpetual_LPOpenPosition();\n        if (netBasePosition > 0 && netBasePosition <= 1e17) _donate(netBasePosition.toUint256());\n    }\n\n    function _settleLpTradingFees(\n        LibPerpetual.LiquidityProviderPosition storage lp,\n        LibPerpetual.GlobalPosition storage globalP\n    ) internal returns (uint256 tradingFeesEarned) {\n        // settle lp trading fees\n        tradingFeesEarned = _getLpTradingFees(lp, globalP);\n\n        lp.totalTradingFeesGrowth = globalP.totalTradingFeesGrowth;\n\n        return tradingFeesEarned;\n    }\n\n    /* ************************ */\n    /*  Internal (global state) */\n    /* ************************ */\n    function _updateFundingRate() internal {\n        LibPerpetual.GlobalPosition storage globalP = globalPosition;\n        uint256 currentTime = block.timestamp;\n\n        int256 currentTraderPremium = (int256(marketTwap - oracleTwap)).wadDiv(oracleTwap);\n        int256 timePassedSinceLastTrade = (currentTime - globalP.timeOfLastTrade).toInt256();\n\n        int256 fundingRate = (sensitivity.wadMul(currentTraderPremium) * timePassedSinceLastTrade) / 1 days;\n\n        globalP.cumFundingRate = (globalP.cumFundingRate + fundingRate).toInt128();\n        globalP.timeOfLastTrade = currentTime.toUint64();\n\n        emit FundingRateUpdated(globalP.cumFundingRate, fundingRate);\n    }\n\n    function _updateCurrentBlockTradeAmount(uint256 vQuoteAmount) internal {\n        globalPosition.currentBlockTradeAmount = (globalPosition.currentBlockTradeAmount + vQuoteAmount).toUint128();\n    }\n\n    function _resetCurrentBlockTradeAmount() internal {\n        globalPosition.currentBlockTradeAmount = 0;\n    }\n\n    function _updateTwap() internal {\n        uint256 currentTime = block.timestamp;\n        int256 timeElapsed = (currentTime - globalPosition.timeOfLastTrade).toInt256();\n\n        /*\n            priceCumulative1 = priceCumulative0 + price1 * timeElapsed\n        */\n\n        // will overflow in ~3000 years\n        // update cumulative chainlink price feed\n        int256 latestChainlinkPrice = indexPrice();\n        oracleCumulativeAmount += latestChainlinkPrice * timeElapsed;\n\n        // update cumulative market price feed\n        int256 latestMarketPrice = marketPrice().toInt256();\n        marketCumulativeAmount += latestMarketPrice * timeElapsed;\n\n        uint256 timeElapsedSinceBeginningOfPeriod = block.timestamp - globalPosition.timeOfLastTwapUpdate;\n\n        // slither-disable-next-line timestamp\n        if (timeElapsedSinceBeginningOfPeriod >= twapFrequency) {\n            /*\n                TWAP = (priceCumulative1 - priceCumulative0) / timeElapsed\n            */\n\n            // calculate chainlink twap\n            oracleTwap = ((oracleCumulativeAmount - oracleCumulativeAmountAtBeginningOfPeriod) /\n                timeElapsedSinceBeginningOfPeriod.toInt256()).toInt128();\n\n            // calculate market twap\n            marketTwap = ((marketCumulativeAmount - marketCumulativeAmountAtBeginningOfPeriod) /\n                timeElapsedSinceBeginningOfPeriod.toInt256()).toInt128();\n\n            // reset cumulative amount and timestamp\n            oracleCumulativeAmountAtBeginningOfPeriod = oracleCumulativeAmount;\n            marketCumulativeAmountAtBeginningOfPeriod = marketCumulativeAmount;\n            globalPosition.timeOfLastTwapUpdate = block.timestamp.toUint64();\n\n            emit TwapUpdated(oracleTwap, marketTwap);\n        }\n    }\n\n    /************************** */\n    /* Internal  (Misc)         */\n    /************************** */\n\n    /// @notice Update Twap, Funding Rate and reset current block trade amount\n    function _updateGlobalState() internal whenNotPaused {\n        LibPerpetual.GlobalPosition storage globalP = globalPosition;\n        uint256 currentTime = block.timestamp;\n        uint256 timeOfLastTrade = uint256(globalP.timeOfLastTrade);\n\n        // Don't update the state more than once per block\n        // slither-disable-next-line timestamp\n        if (currentTime > timeOfLastTrade) {\n            _updateTwap();\n            _updateFundingRate();\n            _resetCurrentBlockTradeAmount();\n        }\n    }\n\n    /// @notice Donate base tokens (\"dust\") to governance\n    /// @dev These donations happen without increasing the Vault balance of the ClearingHouse,\n    ///      as it has no Vault balance.\n    function _donate(uint256 baseAmount) internal {\n        int256 newClearingHousePositionSize = traderPosition[address(clearingHouse)].positionSize +\n            baseAmount.toInt256();\n\n        traderPosition[address(clearingHouse)].positionSize = newClearingHousePositionSize.toInt128();\n\n        emit DustGenerated(baseAmount);\n    }\n\n    /************************** */\n    /* Internal Viewer (Trading) */\n    /************************** */\n\n    /// @notice true if trade amount lower than max trade amount per block, false otherwise\n    function _checkBlockTradeAmount() internal view returns (bool) {\n        return globalPosition.currentBlockTradeAmount < maxBlockTradeAmount;\n    }\n\n    /// @notice Calculate missed funding payments\n    // slither-disable-next-line timestamp\n    function _getFundingPayments(\n        bool isLong,\n        int256 userCumFundingRate,\n        int256 globalCumFundingRate,\n        int256 vBaseAmountToSettle\n    ) internal pure returns (int256 upcomingFundingPayment) {\n        /* Funding rates (as defined in our protocol) are paid from longs to shorts\n\n            case 1: user is long  => has missed making funding payments (positive or negative)\n            case 2: user is short => has missed receiving funding payments (positive or negative)\n\n            comment: Making an negative funding payment is equivalent to receiving a positive one.\n        */\n        if (userCumFundingRate != globalCumFundingRate) {\n            int256 upcomingFundingRate = isLong\n                ? userCumFundingRate - globalCumFundingRate\n                : globalCumFundingRate - userCumFundingRate;\n\n            // fundingPayments = fundingRate * vBaseAmountToSettle\n            upcomingFundingPayment = upcomingFundingRate.wadMul(vBaseAmountToSettle);\n        }\n    }\n\n    function _getUnrealizedPnL(LibPerpetual.TraderPosition memory trader) internal view returns (int256) {\n        int256 oraclePrice = indexPrice();\n        int256 vQuoteVirtualProceeds = int256(trader.positionSize).wadMul(oraclePrice);\n        int256 tradingFees = (vQuoteVirtualProceeds.abs() * market.out_fee().toInt256()) / CURVE_TRADING_FEE_PRECISION; // @dev: take upper bound on the trading fees\n\n        // in the case of a LONG, trader.openNotional is negative but vQuoteVirtualProceeds is positive\n        // in the case of a SHORT, trader.openNotional is positive while vQuoteVirtualProceeds is negative\n        return int256(trader.openNotional) + vQuoteVirtualProceeds - tradingFees;\n    }\n\n    /***************************** */\n    /* Internal Viewer (Liquidity) */\n    /***************************** */\n\n    function _getVBasePositionAfterVirtualWithdrawal(\n        LibPerpetual.LiquidityProviderPosition storage lp,\n        LibPerpetual.GlobalPosition storage globalP\n    ) internal view returns (int256 positionSizeAfterWithdrawal) {\n        // LP position\n        uint256 totalLiquidityProvided = getTotalLiquidityProvided();\n\n        // adjust for trading fees earned\n        (uint256 baseTokensExFees, ) = _getVirtualTokensWithdrawnFromCurvePool(\n            totalLiquidityProvided,\n            lp.liquidityBalance,\n            market.balances(VBASE_INDEX),\n            lp.totalBaseFeesGrowth,\n            globalP.totalBaseFeesGrowth\n        );\n        positionSizeAfterWithdrawal = baseTokensExFees.toInt256() + lp.positionSize;\n    }\n\n    function _getVirtualTokensEarnedAsCurveTradingFees(\n        LibPerpetual.LiquidityProviderPosition storage lp,\n        LibPerpetual.GlobalPosition storage globalP\n    ) internal view returns (uint256 baseFeesEarned, uint256 quoteFeesEarned) {\n        // LP position\n        uint256 totalLiquidityProvided = getTotalLiquidityProvided();\n\n        (uint256 quoteTokensExFees, uint256 quoteTokensInclFees) = _getVirtualTokensWithdrawnFromCurvePool(\n            totalLiquidityProvided,\n            lp.liquidityBalance,\n            market.balances(VQUOTE_INDEX),\n            lp.totalQuoteFeesGrowth,\n            globalP.totalQuoteFeesGrowth\n        );\n        quoteFeesEarned = quoteTokensInclFees - quoteTokensExFees;\n\n        (uint256 baseTokensExFees, uint256 baseTokensInclFees) = _getVirtualTokensWithdrawnFromCurvePool(\n            totalLiquidityProvided,\n            lp.liquidityBalance,\n            market.balances(VBASE_INDEX),\n            lp.totalBaseFeesGrowth,\n            globalP.totalBaseFeesGrowth\n        );\n        baseFeesEarned = baseTokensInclFees - baseTokensExFees;\n    }\n\n    function _getVirtualTokensWithdrawnFromCurvePool(\n        uint256 totalLiquidityProvided,\n        uint256 lpTokensLiquidityProvider,\n        uint256 curvePoolBalance,\n        uint256 userVirtualTokenGrowthRate,\n        uint256 globalVirtualTokenTotalGrowth\n    ) internal pure returns (uint256 tokensExFees, uint256 tokensInclFees) {\n        tokensInclFees = (curvePoolBalance * lpTokensLiquidityProvider) / totalLiquidityProvided - 1;\n        tokensExFees = tokensInclFees.wadDiv(1e18 + globalVirtualTokenTotalGrowth - userVirtualTokenGrowthRate);\n    }\n\n    /// @notice Get the trading fees earned by the liquidity provider\n    function _getLpTradingFees(\n        LibPerpetual.LiquidityProviderPosition storage lp,\n        LibPerpetual.GlobalPosition storage globalP\n    ) internal view returns (uint256) {\n        return\n            int256(lp.openNotional).abs().toUint256().wadMul(\n                globalP.totalTradingFeesGrowth - lp.totalTradingFeesGrowth\n            );\n    }\n\n    /// @notice Get the (active) position of a liquidity provider after withdrawing liquidity\n    function _getLpPositionAfterWithdrawal(\n        LibPerpetual.LiquidityProviderPosition storage lp,\n        LibPerpetual.GlobalPosition storage globalP\n    ) internal view returns (LibPerpetual.TraderPosition memory) {\n        // LP position\n        uint256 totalLiquidityProvided = getTotalLiquidityProvided();\n\n        (uint256 quoteTokensExFees, ) = _getVirtualTokensWithdrawnFromCurvePool(\n            totalLiquidityProvided,\n            lp.liquidityBalance,\n            market.balances(VQUOTE_INDEX),\n            lp.totalQuoteFeesGrowth,\n            globalP.totalQuoteFeesGrowth\n        );\n\n        (uint256 baseTokensExFees, ) = _getVirtualTokensWithdrawnFromCurvePool(\n            totalLiquidityProvided,\n            lp.liquidityBalance,\n            market.balances(VBASE_INDEX),\n            lp.totalBaseFeesGrowth,\n            globalP.totalBaseFeesGrowth\n        );\n\n        return\n            LibPerpetual.TraderPosition({\n                openNotional: (lp.openNotional + quoteTokensExFees.toInt256()).toInt128(),\n                positionSize: (lp.positionSize + baseTokensExFees.toInt256()).toInt128(),\n                cumFundingRate: lp.cumFundingRate\n            });\n    }\n\n    function _isTraderPositionOpen(LibPerpetual.TraderPosition storage trader) internal view returns (bool) {\n        if (trader.openNotional != 0 || trader.positionSize != 0) {\n            return true;\n        }\n        return false;\n    }\n\n    function _isLpPositionOpen(LibPerpetual.LiquidityProviderPosition storage lp) internal view returns (bool) {\n        if (lp.liquidityBalance != 0) {\n            return true;\n        }\n        return false;\n    }\n\n    function _getTraderDebt(LibPerpetual.TraderPosition storage trader) internal view returns (int256) {\n        int256 quoteDebt = int256(trader.openNotional).min(0);\n        int256 baseDebt = int256(trader.positionSize).wadMul(indexPrice()).min(0);\n\n        return quoteDebt + baseDebt;\n    }\n\n    function _getLpDebt(LibPerpetual.LiquidityProviderPosition storage lp) internal view returns (int256) {\n        int256 quoteDebt = int256(lp.openNotional).min(0);\n        int256 baseDebt = int256(lp.positionSize).wadMul(indexPrice()).min(0);\n\n        return quoteDebt + baseDebt;\n    }\n}\n"
    },
    "contracts/test/TestVault.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Vault} from \"../Vault.sol\";\n\n// interfaces\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n// libraries\nimport {LibReserve} from \"../lib/LibReserve.sol\";\n\n/*\n * TestVault includes some setter functions to edit part of\n * the internal state of Vault which aren't exposed otherwise.\n */\ncontract TestVault is Vault {\n    using SafeERC20 for IERC20Metadata;\n\n    constructor(IERC20Metadata _ua) Vault(_ua) {}\n\n    function __TestVault_getUserReserveValue(address user, bool isDiscounted) external view returns (int256) {\n        return _getUserReserveValue(user, isDiscounted);\n    }\n\n    /// @notice Set trader balance without any actual token transfer\n    function __TestVault_change_trader_balance(\n        address user,\n        uint256 tokenIdx,\n        int256 amount\n    ) external {\n        return _changeBalance(user, tokenIdx, amount);\n    }\n\n    /// @notice Set lp balance without any actual token transfer\n    function __TestVault_change_lp_balance(\n        address user,\n        uint256 tokenIdx,\n        int256 amount\n    ) external {\n        return _changeBalance(user, tokenIdx, amount);\n    }\n\n    /// @notice Empty out the vault without adjusting the internal user accounting\n    function __TestVault_transfer_out(\n        address user,\n        IERC20Metadata withdrawToken,\n        uint256 amount // 1e18\n    ) external {\n        // get asset\n        uint256 tokenIdx = tokenToCollateralIdx[withdrawToken];\n\n        // adjust global balances\n        whiteListedCollaterals[tokenIdx].currentAmount -= amount;\n\n        // withdraw\n        uint256 tokenAmount = LibReserve.wadToToken(whiteListedCollaterals[tokenIdx].decimals, amount);\n        IERC20Metadata(withdrawToken).safeTransfer(user, tokenAmount);\n    }\n\n    function __TestVault_getUndiscountedCollateralUSDValue(IERC20Metadata collateralAsset, int256 collateralBalance)\n        external\n        view\n        returns (int256)\n    {\n        return _getUndiscountedCollateralUSDValue(collateralAsset, collateralBalance);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/extensions/ERC4626.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../utils/SafeERC20.sol\";\nimport \"../../../interfaces/IERC4626.sol\";\nimport \"../../../utils/math/Math.sol\";\n\n/**\n * @dev Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\n *\n * This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for\n * underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n * the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n * contract and not the \"assets\" token which is an independent contract.\n *\n * CAUTION: Deposits and withdrawals may incur unexpected slippage. Users should verify that the amount received of\n * shares or assets is as expected. EOAs should operate through a wrapper that performs these checks such as\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n *\n * _Available since v4.7._\n */\nabstract contract ERC4626 is ERC20, IERC4626 {\n    using Math for uint256;\n\n    IERC20Metadata private immutable _asset;\n\n    /**\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\n     */\n    constructor(IERC20Metadata asset_) {\n        _asset = asset_;\n    }\n\n    /** @dev See {IERC4262-asset}. */\n    function asset() public view virtual override returns (address) {\n        return address(_asset);\n    }\n\n    /** @dev See {IERC4262-totalAssets}. */\n    function totalAssets() public view virtual override returns (uint256) {\n        return _asset.balanceOf(address(this));\n    }\n\n    /** @dev See {IERC4262-convertToShares}. */\n    function convertToShares(uint256 assets) public view virtual override returns (uint256 shares) {\n        return _convertToShares(assets, Math.Rounding.Down);\n    }\n\n    /** @dev See {IERC4262-convertToAssets}. */\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256 assets) {\n        return _convertToAssets(shares, Math.Rounding.Down);\n    }\n\n    /** @dev See {IERC4262-maxDeposit}. */\n    function maxDeposit(address) public view virtual override returns (uint256) {\n        return _isVaultCollateralized() ? type(uint256).max : 0;\n    }\n\n    /** @dev See {IERC4262-maxMint}. */\n    function maxMint(address) public view virtual override returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4262-maxWithdraw}. */\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Down);\n    }\n\n    /** @dev See {IERC4262-maxRedeem}. */\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /** @dev See {IERC4262-previewDeposit}. */\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Down);\n    }\n\n    /** @dev See {IERC4262-previewMint}. */\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Up);\n    }\n\n    /** @dev See {IERC4262-previewWithdraw}. */\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Up);\n    }\n\n    /** @dev See {IERC4262-previewRedeem}. */\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Down);\n    }\n\n    /** @dev See {IERC4262-deposit}. */\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\n        require(assets <= maxDeposit(receiver), \"ERC4626: deposit more than max\");\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4262-mint}. */\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\n        require(shares <= maxMint(receiver), \"ERC4626: mint more than max\");\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /** @dev See {IERC4262-withdraw}. */\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) public virtual override returns (uint256) {\n        require(assets <= maxWithdraw(owner), \"ERC4626: withdraw more than max\");\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4262-redeem}. */\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) public virtual override returns (uint256) {\n        require(shares <= maxRedeem(owner), \"ERC4626: redeem more than max\");\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     *\n     * Will revert if assets > 0, totalSupply > 0 and totalAssets = 0. That corresponds to a case where any asset\n     * would represent an infinite amout of shares.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256 shares) {\n        uint256 supply = totalSupply();\n        return\n            (assets == 0 || supply == 0)\n                ? assets.mulDiv(10**decimals(), 10**_asset.decimals(), rounding)\n                : assets.mulDiv(supply, totalAssets(), rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256 assets) {\n        uint256 supply = totalSupply();\n        return\n            (supply == 0)\n                ? shares.mulDiv(10**_asset.decimals(), 10**decimals(), rounding)\n                : shares.mulDiv(totalAssets(), supply, rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(\n        address caller,\n        address receiver,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        // If _asset is ERC777, `transferFrom` can trigger a reenterancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transfered and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\n        _mint(receiver, shares);\n\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transfered, which is a valid state.\n        _burn(owner, shares);\n        SafeERC20.safeTransfer(_asset, receiver, assets);\n\n        emit Withdraw(caller, receiver, owner, assets, shares);\n    }\n\n    function _isVaultCollateralized() private view returns (bool) {\n        return totalAssets() > 0 || totalSupply() == 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\nimport \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n *\n * _Available since v4.7._\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed caller,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) external returns (uint256 assets);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
    },
    "contracts/test/TestERC4626.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n// contracts\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {ERC4626} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\";\n\n// interfaces\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ncontract TestERC4626 is ERC4626 {\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        IERC20Metadata asset_\n    ) ERC20(name_, symbol_) ERC4626(asset_) {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/mocks/USDCmock.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {IncreAccessControl} from \"../utils/IncreAccessControl.sol\";\n\ncontract USDCmock is ERC20, Ownable {\n    uint8 public _decimals;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals_\n    ) ERC20(name, symbol) {\n        _decimals = decimals_;\n    }\n\n    function mint(address _to, uint256 _amount) public onlyOwner {\n        _mint(_to, _amount);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "contracts/tokens/VBase.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {VirtualToken} from \"./VirtualToken.sol\";\nimport {IncreAccessControl} from \"../utils/IncreAccessControl.sol\";\n\n// interfaces\nimport {IVBase} from \"../interfaces/IVBase.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n/// @notice ERC20 token traded on the CryptoSwap pool\ncontract VBase is IVBase, IncreAccessControl, VirtualToken {\n    uint8 internal constant PRECISION = 18;\n    uint256 public override heartBeat;\n\n    AggregatorV3Interface public immutable aggregator;\n    AggregatorV3Interface public override sequencerUptimeFeed;\n    uint256 public override gracePeriod;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        AggregatorV3Interface _aggregator,\n        uint256 _heartBeat,\n        AggregatorV3Interface _sequencerUptimeFeed,\n        uint256 _gracePeriod\n    ) VirtualToken(_name, _symbol) {\n        if (_aggregator.decimals() > PRECISION) revert VBase_InsufficientPrecision();\n        aggregator = _aggregator;\n        setHeartBeat(_heartBeat);\n        setSequencerUptimeFeed(_sequencerUptimeFeed);\n        setGracePeriod(_gracePeriod);\n    }\n\n    /* *************** */\n    /*   Governance    */\n    /* *************** */\n\n    function setHeartBeat(uint256 newHeartBeat) public override onlyRole(GOVERNANCE) {\n        heartBeat = newHeartBeat;\n\n        emit HeartBeatUpdated(newHeartBeat);\n    }\n\n    function setSequencerUptimeFeed(AggregatorV3Interface newSequencerUptimeFeed) public override onlyRole(GOVERNANCE) {\n        if (address(newSequencerUptimeFeed) == address(0)) revert VBase_SequencerUptimeFeedZeroAddress();\n\n        sequencerUptimeFeed = newSequencerUptimeFeed;\n        emit SequencerUptimeFeedUpdated(newSequencerUptimeFeed);\n    }\n\n    function setGracePeriod(uint256 newGracePeriod) public override onlyRole(GOVERNANCE) {\n        if (newGracePeriod < 60) revert VBase_IncorrectGracePeriod();\n        if (newGracePeriod > 3600) revert VBase_IncorrectGracePeriod();\n\n        gracePeriod = newGracePeriod;\n        emit GracePeriodUpdated(newGracePeriod);\n    }\n\n    /* ****************** */\n    /*   Global getter    */\n    /* ****************** */\n\n    function getIndexPrice() external view override returns (int256) {\n        // Check if L2 sequencer up when transaction was received\n        {\n            (, int256 sequencerStatus, uint256 sequencerStatusLastUpdatedAt, , ) = sequencerUptimeFeed\n                .latestRoundData();\n\n            // 0 means sequencer is up & 1 sequencer is down\n            bool isSequencerUp = sequencerStatus == 0;\n            if (!isSequencerUp) revert VBase_SequencerDown();\n\n            // make sure the grace period has passed after the sequencer is back up\n            uint256 timeSinceUp = block.timestamp - sequencerStatusLastUpdatedAt;\n\n            if (timeSinceUp <= gracePeriod) revert VBase_GracePeriodNotOver();\n        }\n\n        return _chainlinkPrice(aggregator);\n    }\n\n    function _chainlinkPrice(AggregatorV3Interface chainlinkInterface) internal view returns (int256) {\n        uint8 chainlinkDecimals = chainlinkInterface.decimals();\n        (, int256 roundPrice, , uint256 roundTimestamp, ) = chainlinkInterface.latestRoundData();\n\n        // If the round is not complete yet, roundTimestamp is 0\n        if (roundTimestamp <= 0) revert VBase_InvalidRoundTimestamp();\n        if (roundPrice <= 0) revert VBase_InvalidRoundPrice();\n        if (roundTimestamp + heartBeat < block.timestamp) revert VBase_DataNotFresh();\n\n        int256 scaledPrice = (roundPrice * int256(10**(PRECISION - chainlinkDecimals)));\n        return scaledPrice;\n    }\n}\n"
    },
    "contracts/tokens/VirtualToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {BaseERC20} from \"./BaseERC20.sol\";\nimport {PerpOwnable} from \"../utils/PerpOwnable.sol\";\n\n// interfaces\nimport {IVirtualToken} from \"../interfaces/IVirtualToken.sol\";\n\ncontract VirtualToken is IVirtualToken, BaseERC20, PerpOwnable {\n    constructor(string memory _name, string memory _symbol) BaseERC20(_name, _symbol) {}\n\n    function mint(uint256 amount) external override onlyPerp {\n        _mint(perp, amount);\n    }\n\n    function burn(uint256 amount) external override onlyPerp {\n        _burn(perp, amount);\n    }\n}\n"
    },
    "contracts/utils/PerpOwnable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n/// @notice Emitted when the sender is not perp\nerror PerpOwnable_NotOwner();\n\n/// @notice Emitted when the proposed address is equal to the zero address\nerror PerpOwnable_TransferZeroAddress();\n\n/// @notice Emitted when the ownership of the contract has already been claimed\nerror PerpOwnable_OwnershipAlreadyClaimed();\n\n/// @notice Perp access control contract, simplified of OpenZeppelin's Ownable.sol\n/// @dev Ownership can only be transferred once\ncontract PerpOwnable {\n    address public perp;\n\n    event PerpOwnerTransferred(address indexed sender, address indexed recipient);\n\n    /// @notice Access control modifier that requires modified function to be called by the perp contract\n    modifier onlyPerp() {\n        if (msg.sender != perp) revert PerpOwnable_NotOwner();\n        _;\n    }\n\n    /// @notice Transfer `perp` account\n    /// @notice Can only be used at deployment as Perpetual can't transfer ownership afterwards\n    /// @param recipient Account granted `perp` access control.\n    function transferPerpOwner(address recipient) external {\n        if (recipient == address(0)) revert PerpOwnable_TransferZeroAddress();\n        if (perp != address(0)) revert PerpOwnable_OwnershipAlreadyClaimed();\n\n        perp = recipient;\n        emit PerpOwnerTransferred(msg.sender, recipient);\n    }\n}\n"
    },
    "contracts/Oracle.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {IncreAccessControl} from \"./utils/IncreAccessControl.sol\";\n\n// libraries\nimport {LibReserve} from \"./lib/LibReserve.sol\";\nimport {LibMath} from \"./lib/LibMath.sol\";\n\n// interfaces\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IOracle} from \"./interfaces/IOracle.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport {IERC4626} from \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\n\n/// @notice Oracle contract relying on Chainlink for price\ncontract Oracle is IOracle, IncreAccessControl {\n    using LibMath for uint256;\n    using LibMath for int256;\n\n    // constants\n    uint8 internal constant PROTOCOL_PRECISION = 18;\n\n    // parameterization\n    uint256 public override gracePeriod;\n    AggregatorV3Interface public override sequencerUptimeFeed;\n\n    // dependencies\n    mapping(address => AssetOracle) public assetToOracles;\n\n    constructor(AggregatorV3Interface _sequencerUptimeFeed, uint256 _gracePeriod) {\n        setGracePeriod(_gracePeriod);\n        setSequencerUptimeFeed(_sequencerUptimeFeed);\n    }\n\n    /* ****************** */\n    /*     Governance     */\n    /* ****************** */\n\n    /// @notice Add or update an oracle address\n    /// @param asset Address of the asset to add an oracle for\n    /// @param aggregator Address of the Chainlink oracle\n    /// @param heartBeat Minimum update frequency (in seconds)\n    /// @param isVault Whether the asset provided is a ERC-4626 vault\n    function setOracle(\n        address asset,\n        AggregatorV3Interface aggregator,\n        uint24 heartBeat,\n        bool isVault\n    ) external override onlyRole(GOVERNANCE) {\n        if (address(asset) == address(0)) revert Oracle_AssetZeroAddress();\n        if (address(aggregator) == address(0)) revert Oracle_AggregatorZeroAddress();\n        AssetOracle storage assetOracle = assetToOracles[asset];\n\n        if (isVault) {\n            assetOracle.isVaultAsset = true;\n\n            asset = IERC4626(asset).asset();\n        }\n\n        assetOracle.heartBeat = heartBeat;\n        assetOracle.aggregator = aggregator;\n        emit OracleUpdated(asset, aggregator, isVault);\n    }\n\n    /// @notice Set a fixed prices for assets which do not require a price feed (i.e. UA)\n    /// @param asset Address of asset to set a fixed price for\n    /// @param fixedPrice Price to choose as the fixed price. 18 decimals\n    function setFixedPrice(address asset, int256 fixedPrice) external override onlyRole(GOVERNANCE) {\n        if (address(assetToOracles[asset].aggregator) == address(0)) revert Oracle_UnsupportedAsset();\n\n        assetToOracles[asset].fixedPrice = fixedPrice;\n        emit AssetGotFixedPrice(asset, fixedPrice);\n    }\n\n    /// @notice Update the heartBeat parameter of an oracle. To be used only if Chainlink updates this parameter\n    /// @param asset Address of asset to update the heartBeat from\n    /// @param newHeartBeat Value of the new heartBeat. In seconds\n    function setHeartBeat(address asset, uint24 newHeartBeat) external override onlyRole(GOVERNANCE) {\n        if (address(assetToOracles[asset].aggregator) == address(0)) revert Oracle_UnsupportedAsset();\n\n        assetToOracles[asset].heartBeat = newHeartBeat;\n        emit HeartBeatUpdated(asset, newHeartBeat);\n    }\n\n    /// @notice Set sequencer uptime feed, i.e. an oracle like contract telling whether the L2 sequencer is up or not\n    /// @param newSequencerUptimeFeed Address of the sequencerUptimeFeed contract\n    function setSequencerUptimeFeed(AggregatorV3Interface newSequencerUptimeFeed) public override onlyRole(GOVERNANCE) {\n        if (address(newSequencerUptimeFeed) == address(0)) revert Oracle_SequencerUptimeFeedZeroAddress();\n\n        sequencerUptimeFeed = newSequencerUptimeFeed;\n        emit SequencerUptimeFeedUpdated(newSequencerUptimeFeed);\n    }\n\n    /// @notice Set grace period, i.e. a period that must be elapsed after the sequencer is back to fetch new price\n    /// @param newGracePeriod Value of the new grace period. In seconds\n    function setGracePeriod(uint256 newGracePeriod) public override onlyRole(GOVERNANCE) {\n        if (newGracePeriod < 60) revert Oracle_IncorrectGracePeriod();\n        if (newGracePeriod > 3600) revert Oracle_IncorrectGracePeriod();\n\n        gracePeriod = newGracePeriod;\n        emit GracePeriodUpdated(newGracePeriod);\n    }\n\n    /* ****************** */\n    /*   Global getter    */\n    /* ****************** */\n\n    /// @notice Get latest Chainlink price, except if a fixed price is defined for this asset\n    /// @dev Use this getter for assets which are ERC-4626 vaults\n    /// @dev Pass the balance to account for slippage in the ERC4626 contract\n    /// @param asset Address of asset to fetch price for\n    /// @param balance Balance is only being used by `getPrice` if `asset` is a ERC-4626 token\n    function getPrice(address asset, int256 balance) external view override returns (int256 price) {\n        if (address(assetToOracles[asset].aggregator) == address(0)) revert Oracle_UnsupportedAsset();\n\n        // Check if L2 sequencer up when transaction was received\n        {\n            (, int256 sequencerStatus, uint256 sequencerStatusLastUpdatedAt, , ) = sequencerUptimeFeed\n                .latestRoundData();\n\n            // 0 means sequencer is up & 1 sequencer is down\n            bool isSequencerUp = sequencerStatus == 0;\n            if (!isSequencerUp) revert Oracle_SequencerDown();\n\n            // make sure the grace period has passed after the sequencer is back up\n            uint256 timeSinceUp = block.timestamp - sequencerStatusLastUpdatedAt;\n\n            if (timeSinceUp <= gracePeriod) revert Oracle_GracePeriodNotOver();\n        }\n\n        AssetOracle storage assetOracle = assetToOracles[asset];\n        uint256 assetBalanceWeiPerUnit = 1e18;\n        address underlyingAsset = asset;\n\n        if (assetOracle.isVaultAsset) {\n            underlyingAsset = IERC4626(asset).asset();\n\n            // get vault balance in token precisions\n            uint256 colBalance = LibReserve.wadToToken(IERC20Metadata(asset).decimals(), balance.abs().toUint256());\n\n            // get underlying balance in wei precision\n            uint256 assetBalance = IERC4626(asset).convertToAssets(colBalance);\n            uint256 assetBalanceWei = LibReserve.tokenToWad(IERC20Metadata(underlyingAsset).decimals(), assetBalance);\n            assetBalanceWeiPerUnit = assetBalanceWei.wadDiv(balance.abs().toUint256());\n        }\n\n        int256 pricePerUnit = assetOracle.fixedPrice != 0\n            ? assetOracle.fixedPrice\n            : _getChainlinkPrice(assetOracle.aggregator, assetOracle.heartBeat);\n\n        price = pricePerUnit.wadMul(assetBalanceWeiPerUnit.toInt256());\n    }\n\n    /* ******************** */\n    /*   Internal getter    */\n    /* ******************** */\n\n    /// @notice Get latest chainlink price\n    function _getChainlinkPrice(AggregatorV3Interface aggregator, uint24 heartBeat) internal view returns (int256) {\n        (, int256 roundPrice, , uint256 roundTimestamp, ) = aggregator.latestRoundData();\n\n        // If the round is not complete yet, timestamp is 0\n        if (roundTimestamp <= 0) revert Oracle_InvalidRoundTimestamp();\n        if (roundPrice <= 0) revert Oracle_InvalidRoundPrice();\n\n        if (roundTimestamp + uint256(heartBeat) < block.timestamp) revert Oracle_DataNotFresh();\n\n        return _scalePrice(roundPrice, aggregator.decimals());\n    }\n\n    /// @notice Scale price up or down depending on the precision of the asset\n    function _scalePrice(int256 price, uint8 assetPrecision) internal pure returns (int256) {\n        if (assetPrecision < PROTOCOL_PRECISION) {\n            return price * int256(10**uint256(PROTOCOL_PRECISION - assetPrecision));\n        } else if (assetPrecision == PROTOCOL_PRECISION) {\n            return price;\n        }\n\n        return price / int256(10**uint256(assetPrecision - PROTOCOL_PRECISION));\n    }\n}\n"
    },
    "contracts/test/TestInsurance.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {Insurance} from \"../Insurance.sol\";\n\n// interfaces\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IVault} from \"../interfaces/IVault.sol\";\n\ncontract TestInsurance is Insurance {\n    constructor(IERC20Metadata _token, IVault _vault) Insurance(_token, _vault) {}\n\n    function __TestInsurance_fundInsurance(uint256 amount) external {\n        return _fundInsurance(amount);\n    }\n\n    function __TestInsurance_setSystemBadDebt(uint256 newSystemBadDebt) external {\n        systemBadDebt = newSystemBadDebt;\n    }\n}\n"
    },
    "contracts/Insurance.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {IncreAccessControl} from \"./utils/IncreAccessControl.sol\";\n\n// interfaces\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IVault} from \"./interfaces/IVault.sol\";\nimport {IInsurance} from \"./interfaces/IInsurance.sol\";\nimport {IClearingHouse} from \"./interfaces/IClearingHouse.sol\";\n\n// libraries\nimport {LibMath} from \"./lib/LibMath.sol\";\n\n/// @notice Pays out Vault in case of default\ncontract Insurance is IInsurance, IncreAccessControl, ReentrancyGuard {\n    using SafeERC20 for IERC20Metadata;\n    using LibMath for int256;\n    using LibMath for uint256;\n\n    /// @notice Insurance token\n    IERC20Metadata public token;\n\n    /// @notice Vault contract\n    IVault public vault;\n\n    /// @notice ClearingHouse contract\n    IClearingHouse public clearingHouse;\n\n    /// @notice Debt which could not be settled by insurance\n    uint256 public systemBadDebt;\n\n    constructor(IERC20Metadata _token, IVault _vault) {\n        if (address(_token) == address(0)) revert Insurance_ZeroAddressConstructor(0);\n        if (address(_vault) == address(0)) revert Insurance_ZeroAddressConstructor(1);\n        token = _token;\n        vault = _vault;\n    }\n\n    modifier onlyVault() {\n        if (msg.sender != address(vault)) revert Insurance_SenderNotVault();\n        _;\n    }\n\n    modifier onlyClearingHouse() {\n        if (msg.sender != address(clearingHouse)) revert Insurance_SenderNotClearingHouse();\n        _;\n    }\n\n    /* ********************** */\n    /*   External functions   */\n    /* ********************** */\n\n    /// @notice Fund insurance. In case of bad debt, first recapitalize the Vault.\n    /// @param amount Amount of UA tokens to be transfered\n    function fundInsurance(uint256 amount) external override onlyClearingHouse {\n        _fundInsurance(amount);\n    }\n\n    /// @notice Settle bad debt in the Vault (in UA)\n    /// @notice `settleDebt` won't revert if the Insurance balance isn't large enough to cover the debt `amount`,\n    ///         so from the point of view of the Vault it'll seem like the Insurance paid back the debt (while it's not).\n    ///         Yet Insurance will keep track of this accounting imbalance with the `systemBadDebt` variable.\n    ///         The first action of the Insurance will be to spur this debt before adding new funds to the Insurance\n    ///         balance (see `fundInsurance`).\n    /// @dev The UA amount transferred to the Vault is not assigned to any user's balance because the Vault cancels\n    ///      the debt of the individual user when calling `settleDebt` (see `settleLiquidationOnCollaterals`).\n    /// @param amount Amount of tokens withdrawn for settlement\n    function settleDebt(uint256 amount) external override onlyVault {\n        // only borrower\n        uint256 insurBalance = IERC20Metadata(token).balanceOf(address(this));\n\n        uint256 amountSettled;\n        if (amount > insurBalance) {\n            amountSettled = insurBalance;\n            systemBadDebt += amount - insurBalance;\n            emit SystemDebtChanged(systemBadDebt);\n        } else {\n            amountSettled = amount;\n        }\n\n        IERC20Metadata(token).safeTransfer(address(vault), amountSettled);\n    }\n\n    /* ****************** */\n    /*     Governance     */\n    /* ****************** */\n\n    /// @notice Update the ClearingHouse\n    /// @param newClearingHouse Address of the new ClearingHouse\n    function setClearingHouse(IClearingHouse newClearingHouse) external onlyRole(GOVERNANCE) {\n        if (address(newClearingHouse) == address(0)) revert Insurance_ClearingHouseZeroAddress();\n        clearingHouse = newClearingHouse;\n        emit ClearingHouseChanged(newClearingHouse);\n    }\n\n    /// @notice Withdraw some amount from the Insurance\n    /// @param amount UA amount to withdraw from the Insurance\n    function removeInsurance(uint256 amount) external override onlyRole(GOVERNANCE) {\n        // check insurance ratio after withdrawal\n        int256 tvl = vault.getTotalValueLocked();\n        uint256 lockedInsurance = token.balanceOf(address(this));\n\n        if (\n            (systemBadDebt > 0) ||\n            (lockedInsurance <= amount) ||\n            (lockedInsurance - amount).toInt256() < tvl.wadMul(clearingHouse.insuranceRatio().toInt256())\n        ) revert Insurance_InsufficientInsurance();\n\n        // withdraw\n        emit InsuranceRemoved(amount);\n        IERC20Metadata(token).safeTransfer(msg.sender, amount);\n    }\n\n    /* ********************* */\n    /*  Internal functions   */\n    /* ********************* */\n\n    /// @dev If systemBadDebt - a measure of the imbalance between the quantity of UA available\n    ///      in the Vault and the amount of UA claims - is positive, then leave the fee (in UA) meant for\n    ///      the Insurance in the Vault.\n    ///      If the Vault is fully solvent in UA terms (systemDebt < 0), then transfer UA to the Insurance.\n    function _fundInsurance(uint256 amount) internal {\n        if (systemBadDebt > 0) {\n            if (amount > systemBadDebt) {\n                uint256 excessUAAfterDebtPayBack = amount - systemBadDebt;\n                vault.transferUa(address(this), excessUAAfterDebtPayBack);\n\n                systemBadDebt = 0;\n            } else {\n                systemBadDebt -= amount;\n            }\n\n            emit SystemDebtChanged(systemBadDebt);\n        } else {\n            vault.transferUa(address(this), amount);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IClearingHouseViewer.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// interfaces\nimport {IClearingHouse} from \"./IClearingHouse.sol\";\nimport {IPerpetual} from \"./IPerpetual.sol\";\nimport {IVault} from \"./IVault.sol\";\nimport {ICryptoSwap} from \"./ICryptoSwap.sol\";\nimport {IInsurance} from \"./IInsurance.sol\";\n\n// libraries\nimport {LibPerpetual} from \"../lib/LibPerpetual.sol\";\n\ninterface IClearingHouseViewer {\n    /* ****************** */\n    /*    Errors          */\n    /* ****************** */\n\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\n    error ClearingHouseViewer_ZeroAddressConstructor(uint8 paramIndex);\n\n    /* ****************** */\n    /*    Global Getters  */\n    /* ****************** */\n\n    function getExpectedVBaseAmount(uint256 idx, uint256 vQuoteAmountToSpend) external view returns (uint256);\n\n    function getExpectedVQuoteAmount(uint256 idx, uint256 vBaseAmountToSpend) external view returns (uint256);\n\n    function marketPrice(uint256 idx) external view returns (uint256);\n\n    function indexPrice(uint256 idx) external view returns (int256);\n\n    function getGlobalPosition(uint256 idx) external view returns (LibPerpetual.GlobalPosition memory);\n\n    function getBaseDust(uint256 idx) external view returns (uint256);\n\n    function getMarket(uint256 idx) external view returns (ICryptoSwap);\n\n    function insuranceFee(uint256 idx) external view returns (int256);\n\n    function getBaseBalance(uint256 idx) external view returns (uint256);\n\n    function getQuoteBalance(uint256 idx) external view returns (uint256);\n\n    function getTotalLiquidityProvided(uint256 idx) external view returns (uint256);\n\n    /* ****************** */\n    /*    User Getters    */\n    /* ****************** */\n\n    function isMarginValid(address account, int256 ratio) external view returns (bool);\n\n    function marginRatio(address account) external view returns (int256);\n\n    function getFundingPaymentsAcrossMarkets(address account) external view returns (int256 fundingPayments);\n\n    function getReserveValue(address account, bool isDiscounted) external view returns (int256);\n\n    function getBalance(address user, uint256 tokenIdx) external view returns (int256);\n\n    function getTraderFundingPayments(uint256 idx, address account) external view returns (int256);\n\n    function getTraderUnrealizedPnL(uint256 idx, address account) external view returns (int256);\n\n    function getTraderPosition(uint256 idx, address account) external view returns (LibPerpetual.TraderPosition memory);\n\n    function getLpFundingPayments(uint256 idx, address account) external view returns (int256);\n\n    function getLpEstimatedPnl(uint256 idx, address account) external view returns (int256);\n\n    function getLpTradingFees(uint256 idx, address account) external view returns (uint256);\n\n    function getLpUnrealizedPnL(uint256 idx, address account) external view returns (int256);\n\n    function isTraderPositionOpen(uint256 idx, address account) external view returns (bool);\n\n    function isLpPositionOpen(uint256 idx, address account) external view returns (bool);\n\n    function getLpPositionAfterWithdrawal(uint256 idx, address account)\n        external\n        view\n        returns (LibPerpetual.TraderPosition memory);\n\n    function getLpPosition(uint256 idx, address account)\n        external\n        view\n        returns (LibPerpetual.LiquidityProviderPosition memory);\n\n    function getProposedAmount(\n        uint256 idx,\n        address user,\n        bool isTrader,\n        uint256 reductionRatio,\n        uint256 iter\n    ) external view returns (uint256 amountIn, uint256 amountOut);\n\n    /* ******************** */\n    /*    Static Helpers    */\n    /* ******************** */\n\n    function removeLiquiditySwap(\n        uint256 idx,\n        address user,\n        uint256 liquidityAmountToRemove,\n        uint256[2] calldata minVTokenAmounts,\n        uint256 proposedAmount\n    ) external returns (uint256 baseProceeds);\n}\n"
    },
    "contracts/CurveCryptoViews.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// interfaces\nimport {ICryptoSwap} from \"./interfaces/ICryptoSwap.sol\";\nimport {IMath} from \"./interfaces/IMath.sol\";\nimport {ICurveCryptoViews} from \"./interfaces/ICurveCryptoViews.sol\";\n\n// libraries\nimport {LibMath} from \"./lib/LibMath.sol\";\n\ncontract CurveCryptoViews is ICurveCryptoViews {\n    using LibMath for uint256;\n\n    // constants\n    uint256 private constant N_COINS = 2;\n    uint256 private constant PRECISION = 10**18; //* The precision to convert to\n    uint256[N_COINS] private PRECISIONS = [1, 1]; // Constants of non-value type not yet implemented.\n\n    /// @notice Curve Math Contract\n    IMath public override math;\n\n    constructor(address _math) {\n        math = IMath(_math);\n    }\n\n    /// @notice Get the amount of coin j one would receive for swapping dx of coin i (excl. fees)\n    /// @param cryptoSwap Curve Cryptoswap contract\n    /// @param i Index of the coin to sell\n    /// @param j Index of the coin to buy\n    /// @param dx Amount to sell\n    /// @return Amount of tokens to received + Any trading fees payed (in j)\n    /// @dev solidity implementation of the get_dy excluding the last last line where fees are deducted\n    /// https://github.com/curvefi/curve-crypto-contract/blob/d7d04cd9ae038970e40be850df99de8c1ff7241b/contracts/tricrypto/CurveCryptoViews3.vy#L40-L78\n    function get_dy_ex_fees(\n        ICryptoSwap cryptoSwap,\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) public view override returns (uint256) {\n        require(i != j && i < N_COINS, \"coin index out of range\");\n        require(dx > 0, \"do not exchange 0 coins\");\n\n        uint256 price_scale = cryptoSwap.price_scale();\n        uint256[2] memory xp = [cryptoSwap.balances(0), cryptoSwap.balances(1)];\n\n        uint256 A = cryptoSwap.A();\n        uint256 gamma = cryptoSwap.gamma();\n        uint256 D = cryptoSwap.D();\n\n        if (cryptoSwap.future_A_gamma_time() > 0) {\n            D = math.newton_D(A, gamma, [xp[0] * PRECISIONS[0], (xp[1] * PRECISIONS[1] * price_scale) / PRECISION]);\n        }\n\n        xp[i] += dx;\n        xp = [xp[0] * PRECISIONS[0], (xp[1] * price_scale) / PRECISION];\n\n        uint256 y = math.newton_y(A, gamma, xp, D, j);\n        uint256 dy = xp[j] - y - 1;\n        xp[j] = y;\n        if (j > 0) {\n            dy = (dy * PRECISION) / price_scale;\n        } else {\n            dy /= PRECISIONS[0];\n        }\n\n        return dy;\n    }\n\n    /* ******************* */\n    /*  TEST / UI Helpers  */\n    /* ******************* */\n\n    /// @notice Get the amount of coin j one would have to pay as trading fees for swapping dx of coin i\n    /// @param cryptoSwap Curve Cryptoswap contract\n    /// @param i Index of the coin to sell\n    /// @param j Index of the coin to buy\n    /// @param dx Amount to sell\n    /// @return Amount of token j payed as trading fees. 18 decimals\n    function get_dy_fees(\n        ICryptoSwap cryptoSwap,\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view override returns (uint256) {\n        uint256 dy_ex_fees = get_dy_ex_fees(cryptoSwap, i, j, dx);\n        uint256 dy = cryptoSwap.get_dy(i, j, dx);\n        return dy_ex_fees - dy;\n    }\n\n    /// @notice Get the share of coin j one would have to pay as trading fees for swapping dx of coin i\n    /// @param cryptoSwap Curve Cryptoswap contract\n    /// @param i Index of the coin to sell\n    /// @param j Index of the coin to buy\n    /// @param dx Amount to sell\n    /// @return Share of token j payed as trading fees. 18 decimals\n    function get_dy_fees_perc(\n        ICryptoSwap cryptoSwap,\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view override returns (uint256) {\n        uint256 dy_ex_fees = get_dy_ex_fees(cryptoSwap, i, j, dx);\n        uint256 dy = cryptoSwap.get_dy(i, j, dx);\n        uint256 feesPayed = dy_ex_fees - dy;\n        return feesPayed.wadDiv(dy_ex_fees);\n    }\n\n    /// @notice Get the amount of coin i one would have to pay for receiving dy of coin j (before any trading fees are charged)\n    /// @dev Does not get the identical estimate (i.e. get_dy(get_dx(100))) ~= 100)\n    ///      Question: Why is that the case? Answer: Newton_y stops when the converge limit is reached:\n    ///      https://github.com/curvefi/curve-crypto-contract/blob/d7d04cd9ae038970e40be850df99de8c1ff7241b/contracts/two/CurveCryptoSwap2.vy#L355\n    /// @dev Should be used for external contracts to get a fairly precise \"estimate\" of the amount of tokens one has to pay to receive dy tokens\n    /// @param cryptoSwap Curve Cryptoswap contract\n    /// @param i Index of the coin to sell\n    /// @param j Index of the coin to buy\n    /// @param dy Amount to tokens to receive\n    /// @return Amount of tokens to sell\n    function get_dx_ex_fees(\n        ICryptoSwap cryptoSwap,\n        uint256 i,\n        uint256 j,\n        uint256 dy\n    ) external view override returns (uint256) {\n        require(i != j && i < N_COINS, \"coin index out of range\");\n        require(dy > 0, \"do not exchange 0 coins\");\n\n        uint256 price_scale = cryptoSwap.price_scale();\n        uint256[2] memory xp = [cryptoSwap.balances(0), cryptoSwap.balances(1)];\n\n        uint256 A = cryptoSwap.A();\n        uint256 gamma = cryptoSwap.gamma();\n        uint256 D = cryptoSwap.D();\n\n        if (cryptoSwap.future_A_gamma_time() > 0) {\n            D = math.newton_D(A, gamma, [xp[0] * PRECISIONS[0], (xp[1] * PRECISIONS[1] * price_scale) / PRECISION]);\n        }\n\n        xp[j] -= dy;\n        xp = [xp[0] * PRECISIONS[0], (xp[1] * price_scale) / PRECISION];\n\n        uint256 x = math.newton_y(A, gamma, xp, D, i);\n        uint256 dx = x - xp[i] + 1;\n        xp[i] = x;\n        if (i > 0) {\n            dx = (dx * PRECISION) / price_scale;\n        } else {\n            dx /= PRECISIONS[0];\n        }\n\n        return dx;\n    }\n}\n"
    },
    "contracts/tokens/VQuote.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// interfaces\nimport {IVQuote} from \"../interfaces/IVQuote.sol\";\n\n// contracts\nimport {VirtualToken} from \"./VirtualToken.sol\";\n\n/// @notice ERC20 token traded on the CryptoSwap pool\ncontract VQuote is IVQuote, VirtualToken {\n    constructor(string memory _name, string memory _symbol) VirtualToken(_name, _symbol) {}\n}\n"
    },
    "contracts/mocks/MintableERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {BaseERC20} from \"../tokens/BaseERC20.sol\";\n\n// interfaces\nimport {IVirtualToken} from \"../interfaces/IVirtualToken.sol\";\n\ncontract MintableERC20 is IVirtualToken, BaseERC20 {\n    constructor(string memory _name, string memory _symbol) BaseERC20(_name, _symbol) {}\n\n    function mint(uint256 amount) external override {\n        _mint(msg.sender, amount);\n    }\n\n    function burn(uint256 amount) external override {\n        _burn(msg.sender, amount);\n    }\n}\n"
    },
    "contracts/test/TestErc20ApproveReturnFalse.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {BaseERC20} from \"../tokens/BaseERC20.sol\";\n\ncontract TestErc20ApproveReturnFalse is BaseERC20 {\n    constructor() BaseERC20(\"Increment Unit of Account\", \"UA\") {}\n\n    function approve(address, uint256) external virtual override returns (bool) {\n        return false;\n    }\n}\n"
    },
    "contracts/ClearingHouseViewer.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n// interfaces\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IClearingHouse} from \"./interfaces/IClearingHouse.sol\";\nimport {IClearingHouseViewer} from \"./interfaces/IClearingHouseViewer.sol\";\nimport {ICryptoSwap} from \"./interfaces/ICryptoSwap.sol\";\n\n// libraries\nimport {LibMath} from \"./lib/LibMath.sol\";\nimport {LibPerpetual} from \"./lib/LibPerpetual.sol\";\n\n/// @title Clearing House Helper Contract\n/// @notice Utility functions to easily extract data from Perpetual Contracts\ncontract ClearingHouseViewer is IClearingHouseViewer {\n    using LibMath for uint256;\n    using LibMath for int256;\n    using SafeERC20 for IERC20Metadata;\n\n    // constants\n    uint256 internal constant VQUOTE_INDEX = 0; // index of quote asset in curve pool\n    uint256 internal constant VBASE_INDEX = 1; // index of base asset in curve pool\n\n    // dependencies\n    IClearingHouse public clearingHouse;\n\n    constructor(IClearingHouse _clearingHouse) {\n        if (address(_clearingHouse) == address(0)) revert ClearingHouseViewer_ZeroAddressConstructor(0);\n        clearingHouse = _clearingHouse;\n    }\n\n    /* ****************** */\n    /*   Market viewer    */\n    /* ****************** */\n\n    /// @notice Return amount for vBase one would receive for exchanging `vQuoteAmountToSpend` in a select market (excluding slippage)\n    /// @dev It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as a reasonable value for `minAmount` in `extendPosition`\n    /// @param idx Index of the perpetual market\n    /// @param vQuoteAmountToSpend Amount of vQuote to be exchanged against some vBase. 18 decimals\n    function getExpectedVBaseAmount(uint256 idx, uint256 vQuoteAmountToSpend) external view override returns (uint256) {\n        return clearingHouse.perpetuals(idx).market().get_dy(VQUOTE_INDEX, VBASE_INDEX, vQuoteAmountToSpend);\n    }\n\n    /// @notice Return amount for vQuote one would receive for exchanging `vBaseAmountToSpend` in a select market (excluding slippage)\n    /// @dev It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as a reasonable value for `minAmount` in `extendPosition`\n    /// @param idx Index of the perpetual market\n    /// @param vBaseAmountToSpend Amount of vBase to be exchanged against some vQuote. 18 decimals\n    function getExpectedVQuoteAmount(uint256 idx, uint256 vBaseAmountToSpend) external view override returns (uint256) {\n        return clearingHouse.perpetuals(idx).market().get_dy(VBASE_INDEX, VQUOTE_INDEX, vBaseAmountToSpend);\n    }\n\n    /// @notice Return the last traded price (used for TWAP)\n    /// @param idx Index of the perpetual market\n    function marketPrice(uint256 idx) public view override returns (uint256) {\n        return clearingHouse.perpetuals(idx).marketPrice();\n    }\n\n    /// @notice Return the current off-chain exchange rate for vBase/vQuote\n    /// @param idx Index of the perpetual market\n    function indexPrice(uint256 idx) external view override returns (int256) {\n        return clearingHouse.perpetuals(idx).indexPrice();\n    }\n\n    /// @notice Return a the GlobalPosition struct of a given market\n    /// @param idx Index of the perpetual market\n    function getGlobalPosition(uint256 idx) external view override returns (LibPerpetual.GlobalPosition memory) {\n        return clearingHouse.perpetuals(idx).getGlobalPosition();\n    }\n\n    /// @notice Return the address of the curve market from a perpetual index\n    /// @param idx Index of the perpetual market\n    function getMarket(uint256 idx) public view override returns (ICryptoSwap) {\n        return clearingHouse.perpetuals(idx).market();\n    }\n\n    /// @notice Return the insurance fee of a perpetual market\n    /// @param idx Index of the perpetual market\n    function insuranceFee(uint256 idx) external view override returns (int256) {\n        return clearingHouse.perpetuals(idx).insuranceFee();\n    }\n\n    /// @notice Return the total supply of base tokens provided to a perpetual market\n    /// @param idx Index of the perpetual market\n    function getBaseBalance(uint256 idx) external view override returns (uint256) {\n        return clearingHouse.perpetuals(idx).vBase().totalSupply();\n    }\n\n    /// @notice Return the total supply of quote tokens provided to a perpetual market\n    /// @param idx Index of the perpetual market\n    function getQuoteBalance(uint256 idx) external view override returns (uint256) {\n        return clearingHouse.perpetuals(idx).vQuote().totalSupply();\n    }\n\n    /// @notice Return the total supply of liquidity tokens in a perpetual market\n    /// @param idx Index of the perpetual market\n    function getTotalLiquidityProvided(uint256 idx) external view override returns (uint256) {\n        return clearingHouse.perpetuals(idx).getTotalLiquidityProvided();\n    }\n\n    /* ****************** */\n    /*   User viewer      */\n    /* ****************** */\n\n    /// @notice Get free collateral of a user, with a given ratio applied on his debts\n    /// @dev free collateral = profit + discounted collaterals USD value\n    function getFreeCollateralByRatio(address account, int256 ratio) external view returns (int256 freeCollateral) {\n        int256 pnl = clearingHouse.getPnLAcrossMarkets(account);\n        int256 fundingPayments = getFundingPaymentsAcrossMarkets(account);\n\n        int256 userDebt = clearingHouse.getDebtAcrossMarkets(account);\n        int256 marginRequired = userDebt.wadMul(ratio);\n\n        // if no trading or LP position open on any market, margin ratio is 100%\n        if (userDebt == 0) {\n            return 1e18;\n        }\n        int256 reserveValue = getReserveValue(account, false);\n\n        // We define freeCollateral as follows:\n        // freeCollateral = min(totalCollateralValue, totalCollateralValue + pnl) - marginRequired)\n        // This is a conservative approach when compared to\n        // freeCollateral = totalCollateralValue + pnl - marginRequired\n        // since the unrealized pnl depends on the index price\n        // where a deviation could allow a trader to empty the vault\n\n        return reserveValue.min(reserveValue + pnl) + fundingPayments - marginRequired;\n    }\n\n    /// @notice Approximately determine whether or not a position is valid for a given margin ratio\n    /// @dev Differ from `ClearingHouse._isPositionValid` in that it includes an estimate of pending funding payments,\n    ///      also `_isPositionValid` formula is arranged differently\n    /// @param account Account of the position to get the margin ratio from\n    /// @param ratio Proposed ratio to compare the position against\n    function isMarginValid(address account, int256 ratio) external view override returns (bool) {\n        return marginRatio(account) >= ratio;\n    }\n\n    /// @notice Get the margin ratio of a user, i.e. all trading and LP positions across all markets\n    /// @dev Unlike ClearingHouse.getFreeCollateralByRatio, ClearingHouseViewer.marginRatio includes fundingPayments\n    ///      and formula is arranged differently\n    /// @param account Account of the position to get the margin ratio from\n    function marginRatio(address account) public view override returns (int256) {\n        // margin ratio = (collateral + unrealizedPositionPnl) / trader.openNotional\n        // all amounts must be expressed in vQuote (e.g. USD), otherwise the end result doesn't make sense\n\n        int256 unrealizedPositionPnl = clearingHouse.getPnLAcrossMarkets(account);\n        int256 userDebt = clearingHouse.getDebtAcrossMarkets(account);\n        int256 fundingPayments = getFundingPaymentsAcrossMarkets(account);\n\n        // if no trading or LP position open on any market, margin ratio is 100%\n        if (userDebt == 0) {\n            return 1e18;\n        }\n\n        int256 collateral = getReserveValue(account, false);\n\n        return _computeMarginRatio(collateral, unrealizedPositionPnl, fundingPayments, userDebt);\n    }\n\n    /// @notice Get the funding payments of an user across all perpetual markets\n    /// @param account User to get the funding payments of\n    function getFundingPaymentsAcrossMarkets(address account) public view override returns (int256 fundingPayments) {\n        for (uint256 i = 0; i < clearingHouse.getNumMarkets(); i++) {\n            fundingPayments +=\n                clearingHouse.perpetuals(i).getTraderFundingPayments(account) +\n                clearingHouse.perpetuals(i).getLpFundingPayments(account);\n        }\n    }\n\n    /// @notice Calculate missed funding payments\n    /// @param idx Index of the perpetual market\n    /// @param account User to get the funding payments of\n    function getTraderFundingPayments(uint256 idx, address account) external view override returns (int256) {\n        return clearingHouse.perpetuals(idx).getTraderFundingPayments(account);\n    }\n\n    /// @notice Calculate missed funding payments\n    /// @param idx Index of the perpetual market\n    /// @param account Trader to get the unrealized PnL from\n    function getTraderUnrealizedPnL(uint256 idx, address account) external view override returns (int256) {\n        if (!isTraderPositionOpen(idx, account)) {\n            return 0;\n        }\n\n        return clearingHouse.perpetuals(idx).getTraderUnrealizedPnL(account);\n    }\n\n    /// @notice Get the portfolio value of a trader / lp\n    /// @param account Address to get the portfolio value from\n    /// @param isDiscounted Whether or not the reserve value should be discounted by the weight of the collateral\n    /// @return reserveValue Value of collaterals in USD. 18 decimals\n    function getReserveValue(address account, bool isDiscounted) public view override returns (int256) {\n        return clearingHouse.vault().getReserveValue(account, isDiscounted);\n    }\n\n    /// @notice Get User LP balance\n    /// @param user User to get the balance of\n    /// @param tokenIdx Token to get the balance of\n    function getBalance(address user, uint256 tokenIdx) external view override returns (int256) {\n        return clearingHouse.vault().getBalance(user, tokenIdx);\n    }\n\n    /// @notice Get trader position\n    /// @param idx Index of the perpetual market\n    /// @param account Address to get the trading position from\n    function getTraderPosition(uint256 idx, address account)\n        public\n        view\n        override\n        returns (LibPerpetual.TraderPosition memory)\n    {\n        return clearingHouse.perpetuals(idx).getTraderPosition(account);\n    }\n\n    /// @notice Whether a given trader position is open\n    /// @param idx Index of the perpetual market\n    /// @param account Address of the trading account\n    function isTraderPositionOpen(uint256 idx, address account) public view override returns (bool) {\n        return clearingHouse.perpetuals(idx).isTraderPositionOpen(account);\n    }\n\n    /// @notice Whether a given LP position is open\n    /// @param idx Index of the perpetual market\n    /// @param account Address of the LP account\n    function isLpPositionOpen(uint256 idx, address account) public view override returns (bool) {\n        return clearingHouse.perpetuals(idx).isLpPositionOpen(account);\n    }\n\n    /// @notice Calculate missed funding payments\n    /// @param idx Index of the perpetual market\n    /// @param account Lp to get the funding payments\n    function getLpFundingPayments(uint256 idx, address account) external view override returns (int256) {\n        return clearingHouse.perpetuals(idx).getLpFundingPayments(account);\n    }\n\n    /// @param idx Index of the perpetual market\n    /// @param account Lp to get the unrealized PnL from\n    function getLpUnrealizedPnL(uint256 idx, address account) public view override returns (int256) {\n        if (!isLpPositionOpen(idx, account)) {\n            return 0;\n        }\n\n        return clearingHouse.perpetuals(idx).getLpUnrealizedPnL(account);\n    }\n\n    /// @param idx Index of the perpetual market\n    /// @param account Lp to get the trading fees earned from\n    /// @return tradingFeesEarned Trading fees earned by the Liquidity Provider. 18 decimals\n    function getLpTradingFees(uint256 idx, address account) public view override returns (uint256) {\n        if (!isLpPositionOpen(idx, account)) {\n            return 0;\n        }\n\n        return clearingHouse.perpetuals(idx).getLpTradingFees(account);\n    }\n\n    /// @notice Get the unrealized profit and Loss and the trading fees earned of a  Liquidity Provider\n    /// @param  account Lp to get the pnl and trading fees earned from\n    /// @return pnl Unrealized profit and loss and trading fees earned. 18 decimals\n    function getLpEstimatedPnl(uint256 idx, address account) external view override returns (int256) {\n        if (!isLpPositionOpen(idx, account)) {\n            return 0;\n        }\n\n        return getLpUnrealizedPnL(idx, account) + getLpTradingFees(idx, account).toInt256();\n    }\n\n    /// @notice Get the (active) position of a liquidity provider after withdrawing liquidity\n    /// @param account Liquidity Provider\n    /// @return (Active) Liquidity Provider position\n    function getLpPositionAfterWithdrawal(uint256 idx, address account)\n        public\n        view\n        override\n        returns (LibPerpetual.TraderPosition memory)\n    {\n        return clearingHouse.perpetuals(idx).getLpPositionAfterWithdrawal(account);\n    }\n\n    /// @notice Get Lp position\n    /// @param idx Index of the perpetual market\n    /// @param account Address to get the LP position from\n    function getLpPosition(uint256 idx, address account)\n        external\n        view\n        override\n        returns (LibPerpetual.LiquidityProviderPosition memory)\n    {\n        return clearingHouse.perpetuals(idx).getLpPosition(account);\n    }\n\n    /// @notice Get the current (base) dust balance\n    /// @return Base balance of Governance. 18 decimals\n    function getBaseDust(uint256 idx) external view override returns (uint256) {\n        return int256(getTraderPosition(idx, address(clearingHouse)).positionSize).toUint256();\n    }\n\n    /// @notice Get the proposed amount needed to close a position\n    /// @dev Solidity implementation to minimize the node calls once has to make when finding proposed amount\n    /// @dev Should not be called from another contract\n    /// @param idx Index of the perpetual market\n    /// @param user Account\n    /// @param isTrader Get LP or Trader liquidity provider proposed amount\n    /// @param reductionRatio Percentage of the position that the user wishes to close. Min: 0. Max: 1e18\n    /// @param iter Maximum iterations\n    /// @return amountIn Amount of tokens to swap. 18 decimals\n    /// @return amountOut Amount of tokens to receive from the swap. 18 decimals\n    function getProposedAmount(\n        uint256 idx,\n        address user,\n        bool isTrader,\n        uint256 reductionRatio,\n        uint256 iter\n    ) external view override returns (uint256 amountIn, uint256 amountOut) {\n        int256 positionSize = isTrader\n            ? getTraderPosition(idx, user).positionSize\n            : getLpPositionAfterWithdrawal(idx, user).positionSize;\n\n        if (reductionRatio > 1e18) revert(\"Can not reduce by more than 100%\");\n        int256 targetPositionSize = positionSize.wadMul(reductionRatio.toInt256());\n\n        if (positionSize > 0) {\n            amountIn = targetPositionSize.toUint256();\n            amountOut = clearingHouse.perpetuals(idx).curveCryptoViews().get_dy_ex_fees(\n                getMarket(idx),\n                VBASE_INDEX,\n                VQUOTE_INDEX,\n                amountIn\n            );\n        } else {\n            uint256 position = (-targetPositionSize).toUint256();\n            amountIn = position.wadMul(marketPrice(idx));\n            // binary search in [marketPrice * 0.7, marketPrice * 1.3]\n            uint256 maxVal = (amountIn * 13) / 10;\n            uint256 minVal = (amountIn * 7) / 10;\n\n            for (uint256 i = 0; i < iter; i++) {\n                amountIn = (minVal + maxVal) / 2;\n                // slither-disable-next-line calls-loop\n                amountOut = clearingHouse.perpetuals(idx).curveCryptoViews().get_dy_ex_fees(\n                    getMarket(idx),\n                    VQUOTE_INDEX,\n                    VBASE_INDEX,\n                    amountIn\n                );\n\n                if (amountOut == position) {\n                    break;\n                } else if (amountOut < position) {\n                    minVal = amountIn;\n                } else {\n                    maxVal = amountIn;\n                }\n            }\n\n            // take maxVal to make sure we are above the target\n            if (amountOut < position) {\n                amountIn = maxVal;\n                amountOut = clearingHouse.perpetuals(idx).curveCryptoViews().get_dy_ex_fees(\n                    getMarket(idx),\n                    VQUOTE_INDEX,\n                    VBASE_INDEX,\n                    amountIn\n                );\n            }\n        }\n        return (amountIn, amountOut);\n    }\n\n    /* ******************** */\n    /*    Static Helpers    */\n    /* ******************** */\n\n    /// @notice ONLY STATIC CALL\n    /// @notice Returns base amount of swapping after removing liquidity\n    /// @notice Used to estimate proposedAmount for removing liquidity\n    /// @param idx Index of the perpetual market\n    /// @param liquidityAmountToRemove Amount of liquidity (in LP tokens) to be removed from the pool. 18 decimals\n    /// @param minVTokenAmounts Minimum amount of virtual tokens [vQuote, vBase] withdrawn from the curve pool. 18 decimals\n    /// @param proposedAmount Amount at which to get the LP position (in vBase if LONG, in vQuote if SHORT). 18 decimals\n    /// @return baseProceeds received from swapping after removing liquidity\n    function removeLiquiditySwap(\n        uint256 idx,\n        address user,\n        uint256 liquidityAmountToRemove,\n        uint256[2] calldata minVTokenAmounts,\n        uint256 proposedAmount\n    ) external override returns (uint256 baseProceeds) {\n        try\n            clearingHouse.perpetuals(idx).removeLiquiditySwap(\n                user,\n                liquidityAmountToRemove,\n                minVTokenAmounts,\n                proposedAmount\n            )\n        {\n            // slither-disable-next-line uninitialized-local,variable-scope\n        } catch (bytes memory errorMessage) {\n            // slither-disable-next-line variable-scope\n            return abi.decode(errorMessage, (uint256));\n        }\n    }\n\n    /* ****************** */\n    /*   Internal viewer  */\n    /* ****************** */\n    function _computeMarginRatio(\n        int256 collateral,\n        int256 unrealizedPositionPnl,\n        int256 fundingPayments,\n        int256 userDebt\n    ) internal pure returns (int256) {\n        return (collateral + unrealizedPositionPnl + fundingPayments).wadDiv(userDebt.abs());\n    }\n}\n"
    },
    "contracts/mocks/MockAggregator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n/// @dev Dummy implementation of the interface. Contract meant to be mocked\ncontract MockAggregator is AggregatorV3Interface {\n    uint8 public override decimals;\n    string public override description = \"MockAggregator\";\n    uint256 public override version = 3;\n\n    constructor(uint8 _decimals) {\n        // 8 for all forex pairs: https://docs.chain.link/docs/ethereum-addresses/\n        decimals = _decimals;\n    }\n\n    function getRoundData(uint80 _roundId)\n        external\n        pure\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        return (_roundId, 0, 0, 0, 0);\n    }\n\n    function latestRoundData()\n        external\n        pure\n        override\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        return (0, 0, 0, 0, 0);\n    }\n}\n"
    },
    "contracts/mocks/MockStableSwap.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// contracts\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @notice Mock StableSwap market to test buying/selling of derivative toknens\n/// @dev Uses the well-known x * y = k formula\n\ncontract MockStableSwap is Ownable {\n    struct Pool {\n        uint256 vQuote;\n        uint256 vBase;\n        uint256 totalAssetReserve;\n        uint256 price; // 10 ** 18\n    }\n\n    uint256 constant DECIMALS = 10**18;\n    Pool public pool;\n\n    constructor(uint256 _vQuote, uint256 _vBase) Ownable() {\n        pool.vQuote = _vQuote;\n        pool.vBase = _vBase;\n        pool.totalAssetReserve = _vQuote * _vBase;\n        pool.price = (_vBase * DECIMALS) / _vQuote;\n    }\n\n    /************************* events *************************/\n    event NewReserves(uint256 vBase, uint256 vQuote, uint256 newPrice, uint256 blockNumber);\n\n    /************************* functions *************************/\n\n    /* mint vBase to go long euro */\n    function mintVBase(uint256 amount) external onlyOwner returns (uint256) {\n        uint256 vBasenew = pool.vBase + amount;\n        uint256 vQuoteNew = pool.totalAssetReserve / vBasenew; // x = k / y\n        uint256 buy = pool.vQuote - vQuoteNew;\n\n        _updateBalances(vBasenew, vQuoteNew);\n\n        return buy;\n    }\n\n    /* burn vBase to go short euro */\n    function burnVBase(uint256 amount) external onlyOwner returns (uint256) {\n        uint256 vBasenew = pool.vBase - amount;\n        uint256 vQuoteNew = pool.totalAssetReserve / vBasenew; // x = k / y\n        uint256 buy = vQuoteNew - pool.vQuote;\n        _updateBalances(vBasenew, vQuoteNew);\n\n        return buy;\n    }\n\n    /* mint vQuote to close long euro */\n    function mintVQuote(uint256 amount) external onlyOwner returns (uint256) {\n        uint256 vQuoteNew = pool.vQuote + amount;\n        uint256 vBasenew = pool.totalAssetReserve / vQuoteNew; // x = k / y\n        uint256 sell = pool.vBase - vBasenew;\n\n        _updateBalances(vBasenew, vQuoteNew);\n\n        return sell;\n    }\n\n    /* burn vQuote to close short euro */\n    function burnVQuote(uint256 amount) external onlyOwner returns (uint256) {\n        uint256 vQuoteNew = pool.vBase - amount;\n        uint256 vBasenew = pool.totalAssetReserve / vQuoteNew; // x = k / y\n        uint256 sell = vBasenew - pool.vBase;\n\n        _updateBalances(vBasenew, vQuoteNew);\n\n        return sell;\n    }\n\n    /* update reserve balances after buying/selling */\n    function _updateBalances(uint256 vBaseNew, uint256 vQuoteNew) internal {\n        uint256 newPrice = (vBaseNew * DECIMALS) / vQuoteNew;\n\n        pool.price = newPrice;\n        pool.vBase = vBaseNew;\n        pool.vQuote = vQuoteNew;\n\n        emit NewReserves(vBaseNew, vQuoteNew, newPrice, block.number);\n    }\n}\n"
    },
    "contracts/test/TestLibMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// libraries\nimport \"../lib/LibMath.sol\";\n\ncontract TestLibMath {\n    function toInt256(uint256 x) internal pure returns (int256) {\n        return LibMath.toInt256(x);\n    }\n}\n"
    },
    "contracts/test/TestLibReserve.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.15;\n\n// libraries\nimport \"../lib/LibReserve.sol\";\n\ncontract TestLibReserve {\n    function tokenToWad(uint8 tokenDecimals, uint256 amount) external pure returns (uint256) {\n        return LibReserve.tokenToWad(tokenDecimals, amount);\n    }\n\n    function wadToToken(uint8 tokenDecimals, uint256 wadAmount) external pure returns (uint256) {\n        return LibReserve.wadToToken(tokenDecimals, wadAmount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}